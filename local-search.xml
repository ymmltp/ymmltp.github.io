<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SqlServer</title>
    <link href="/2023/03/02/SqlServer/"/>
    <url>/2023/03/02/SqlServer/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h1><h2 id="触发器-（Triggers）"><a href="#触发器-（Triggers）" class="headerlink" title="触发器 （Triggers）"></a>触发器 （Triggers）</h2><pre><code class="hljs sql"><span class="hljs-comment">-- 创建 Trigger</span>USE [e_DMS]GO<span class="hljs-comment">/****** Object:  Trigger [dbo].[updateWeekLength]    Script Date: 3/2/2023 11:03:17 AM ******/</span><span class="hljs-keyword">SET</span> ANSI_NULLS <span class="hljs-keyword">ON</span>GO<span class="hljs-keyword">SET</span> QUOTED_IDENTIFIER <span class="hljs-keyword">ON</span>GO<span class="hljs-comment">-- =============================================</span><span class="hljs-comment">-- Author: Adele lu</span><span class="hljs-comment">-- Create date: 2023-03-02</span><span class="hljs-comment">-- Description:确保 Calender 中的周别都是两位，不足两位的，在前面补 0</span><span class="hljs-comment">-- =============================================</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TRIGGER</span> 触发器名字   <span class="hljs-keyword">ON</span> 作用的表格或者视图 <span class="hljs-keyword">FOR</span> [<span class="hljs-keyword">INSERT</span><span class="hljs-operator">/</span><span class="hljs-keyword">Update</span><span class="hljs-operator">/</span><span class="hljs-keyword">Delete</span>]<span class="hljs-keyword">AS</span>     <span class="hljs-keyword">declare</span> <span class="hljs-variable">@weekNo</span> <span class="hljs-type">varchar</span>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@weekNo</span> <span class="hljs-operator">=</span> [Week] <span class="hljs-keyword">from</span> inserted    if(len(<span class="hljs-variable">@weekNo</span>)<span class="hljs-operator">&lt;</span><span class="hljs-number">2</span>)  <span class="hljs-comment">--触发条件</span><span class="hljs-keyword">BEGIN</span>    <span class="hljs-comment">-- 执行过程</span><span class="hljs-keyword">update</span> Calendar <span class="hljs-keyword">set</span> [Week] <span class="hljs-operator">=</span><span class="hljs-keyword">RIGHT</span>(<span class="hljs-string">&#x27;00&#x27;</span><span class="hljs-operator">+</span> <span class="hljs-variable">@weekNo</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">where</span> [Week]<span class="hljs-operator">=</span><span class="hljs-variable">@weekNo</span><span class="hljs-comment">-- SET NOCOUNT ON added to prevent extra result sets from</span><span class="hljs-comment">-- interfering with SELECT statements.</span><span class="hljs-keyword">SET</span> NOCOUNT <span class="hljs-keyword">ON</span>;    <span class="hljs-comment">-- Insert statements for trigger here</span><span class="hljs-keyword">END</span></code></pre><h2 id="Update-回撤"><a href="#Update-回撤" class="headerlink" title="Update 回撤"></a>Update 回撤</h2><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<span class="hljs-keyword">UPDATE</span> your_table <span class="hljs-keyword">SET</span> column1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;new_value&#x27;</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">-- 如果您想要撤销更新，请使用以下命令：</span><span class="hljs-keyword">ROLLBACK</span> TRANSACTION;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WindowsService</title>
    <link href="/2023/02/17/WindowsService/"/>
    <url>/2023/02/17/WindowsService/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-Service程序"><a href="#Windows-Service程序" class="headerlink" title="Windows Service程序"></a>Windows Service程序</h1><h2 id="安装、拆卸、调试Windows服务"><a href="#安装、拆卸、调试Windows服务" class="headerlink" title="安装、拆卸、调试Windows服务"></a>安装、拆卸、调试Windows服务</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><pre><code class="hljs c">New-Service -Name <span class="hljs-string">&quot;WorkingHoursDataSyncer&quot;</span> -BinaryPathName <span class="hljs-string">&quot;C:\Working Hour Data Syncer\WorkingHoursDataSyncer.exe&quot;</span></code></pre><h3 id="2、拆卸"><a href="#2、拆卸" class="headerlink" title="2、拆卸"></a>2、拆卸</h3><ul><li>查看PowerShell版本 <code>$PSVersionTable</code></li><li>PowerShell V6.0及以上 <code>Remove-Service 服务名 -Confirm:$false -Verbose</code></li><li>PowerShell V5.1或更低版本 <code>Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\服务名 | Remove-Item -Force -Verbose</code> -&gt; <code>sc.exe delete &quot;服务名&quot;</code></li></ul><h3 id="3、调试"><a href="#3、调试" class="headerlink" title="3、调试"></a>3、调试</h3><ul><li>将 Windows服务，改成 Console 程序调试。具体步骤参考<a href="https://learn.microsoft.com/zh-cn/dotnet/framework/windows-services/how-to-debug-windows-service-applications">如何：调试 Windows 服务应用程序</a></li></ul><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>1、 windows服务启动时：The system cannot find the file specified.</strong></p><p>在 properties 查看该服务的运行路径是否是完整路径，如果不是，拆卸当前服务，重新安装</p><pre><code class="hljs c">New-Service -Name <span class="hljs-string">&quot;WorkingHoursDataSyncer&quot;</span> -BinaryPathName <span class="hljs-string">&quot;C:\Working Hour Data Syncer\WorkingHoursDataSyncer.exe&quot;</span></code></pre><p>在 <code>BinaryPathName</code> 中使用完整路径。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/windows-services/how-to-install-and-uninstall-services">1、如何：安装和卸载 Windows 服务</a><br><a href="https://www.mianshigee.com/note/detail/116499afo/">2、如何使用PowerShell删除Windows服务</a><br><a href="https://jingyan.baidu.com/article/6c67b1d68c70be6687bb1ee8.html">3、查看PowerShell版本</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/windows-services/how-to-debug-windows-service-applications">4、如何：调试 Windows 服务应用程序</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitCommand</title>
    <link href="/2022/10/24/gitCommand/"/>
    <url>/2022/10/24/gitCommand/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux</title>
    <link href="/2022/05/04/linux/"/>
    <url>/2022/05/04/linux/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令:"></a>常见指令:</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>查看文件</td></tr><tr><td>ls -al</td><td>查看所有文件和权限</td></tr><tr><td>chmode</td><td>修改用户权限(用数字表示权限:chmod 777 fileName)(chmod ug&#x3D;rwx,o&#x3D;x fileName)(用加减法表示权限的增加和删除:chmod ugo+r fileName)(chmod ug+w,o-w fileName)(a:all;u:user;g:group;o:other)</td></tr></tbody></table><h4 id="linux-文件类型"><a href="#linux-文件类型" class="headerlink" title="linux 文件类型:"></a>linux 文件类型:</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>d</td><td>目录</td></tr><tr><td>-</td><td>文件</td></tr><tr><td>l</td><td>链接文档(link file)</td></tr><tr><td>b</td><td>可随机存取装置</td></tr><tr><td>c</td><td>串行端口设备</td></tr></tbody></table><h4 id="linux-文件权限类型"><a href="#linux-文件权限类型" class="headerlink" title="linux 文件权限类型:"></a>linux 文件权限类型:</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>-r</td><td>读取</td></tr><tr><td>w</td><td>写入</td></tr><tr><td>x</td><td>执行</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>socket</title>
    <link href="/2022/04/08/socket/"/>
    <url>/2022/04/08/socket/</url>
    
    <content type="html"><![CDATA[<h2 id="Socket-套接字"><a href="#Socket-套接字" class="headerlink" title="Socket(套接字)"></a>Socket(套接字)</h2><h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><p>TCP&#x2F;IP的上层接口<br>有两种传输文件的方式<br>1、TCP 数据流传输，需要定义主机和客机<br>2、UDP 报文传输，不稳定，但是实时性强</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-comment"># 服务器</span><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> s:   <span class="hljs-comment"># AF_INET:使用IPv4;SOCK_STREAM:TCP协议</span>    s.bind((<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">1234</span>))   <span class="hljs-comment"># 关联网卡和端口</span>    s.listen()   <span class="hljs-comment">#开始监听</span>    conn, addr = s.accept()   <span class="hljs-comment"># 接受客户端链接，返回客户端ip(addr)和新的socket(conn) </span>    <span class="hljs-comment"># *socket s用于监听连接，c用于和客户端通信</span>    <span class="hljs-keyword">with</span> conn:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Connected by&#x27;</span>, addr)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            data = conn.recv(<span class="hljs-number">1024</span>)  <span class="hljs-comment"># 接受客户端传递的信息，一次最大信息量为1024字节</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:                <span class="hljs-keyword">break</span>            conn.sendall(data)  <span class="hljs-comment"># 发送数据给客户端</span>            <span class="hljs-built_in">print</span>(data)<span class="hljs-comment"># 客户端</span><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> s:    s.connect((<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">1234</span>))   <span class="hljs-comment"># 链接服务器地址和端口号</span>    s.sendall(<span class="hljs-string">b&#x27;Hello, world&#x27;</span>)    data = s.recv(<span class="hljs-number">1024</span>)    <span class="hljs-built_in">print</span>(data)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arithmetic</title>
    <link href="/2022/04/06/arithmetic/"/>
    <url>/2022/04/06/arithmetic/</url>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="MiniMax-极小化极大算法"><a href="#MiniMax-极小化极大算法" class="headerlink" title="MiniMax (极小化极大算法)"></a>MiniMax (极小化极大算法)</h3><p>查询出最坏的情况下最好的那个结果<br>1、<a href="https://blog.csdn.net/zkybeck_ck/article/details/45644471">CSDN MiniMax 讲解</a></p><h4 id="Alpha-Beta剪枝算法"><a href="#Alpha-Beta剪枝算法" class="headerlink" title="Alpha-Beta剪枝算法"></a>Alpha-Beta剪枝算法</h4><p>删除 MiniMax 算法中不影响结局的中间节点<br>对 MiniMax 树进行中序遍历</p><blockquote><p>alpha 为下限，初始为 -inif<br>beta 为上限,初始为 +inif</p></blockquote><p>1、在 MiniMax 算法树中，每一个 min 节点修改 beta 值，每一个 max 节点修改 alpha 值<br>2、当某个节点出现 alpha &gt;&#x3D; beta 时，该节点剩下的子节点可以忽略不计</p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2022/03/10/Vue/"/>
    <url>/2022/03/10/Vue/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="Vue-in-VSC"><a href="#Vue-in-VSC" class="headerlink" title="Vue in VSC"></a>Vue in VSC</h3><p>1、安装手脚架</p><blockquote><p>npm install -g -vue-cli<br>2、安装打包工具<br>npm install -g webpack<br>3、创建Vue项目<br>vue init webpack projectName<br>4、配置信息<br>5、进入创建的项目目录运行project<br>npm run dev</p></blockquote><h3 id="vite创建Vue项目"><a href="#vite创建Vue项目" class="headerlink" title="vite创建Vue项目"></a>vite创建Vue项目</h3><pre><code class="hljs js">npm init vite@latest</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eCharts</title>
    <link href="/2022/03/08/eCharts/"/>
    <url>/2022/03/08/eCharts/</url>
    
    <content type="html"><![CDATA[<h2 id="eCharts"><a href="#eCharts" class="headerlink" title="eCharts"></a>eCharts</h2><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><pre><code class="hljs javascript">option = &#123;  <span class="hljs-attr">title</span>: &#123;            <span class="hljs-comment">//坐标的title</span>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Stacked Line&#x27;</span>,    subtext  &#125;,  <span class="hljs-attr">tooltip</span>: &#123;    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,  <span class="hljs-comment">//悬浮提示框:&quot;axis&quot;:显示该列所有数据;&quot;item&quot;:显示当前悬浮对象的内容</span>    <span class="hljs-attr">formatter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;   <span class="hljs-comment">//自定义显示内容</span>      <span class="hljs-keyword">if</span>(e.<span class="hljs-property">data</span>.<span class="hljs-property">value</span>)        <span class="hljs-keyword">return</span> e.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;:&quot;</span>+e.<span class="hljs-property">data</span>.<span class="hljs-property">value</span>+<span class="hljs-string">&quot;:&quot;</span>+e.<span class="hljs-property">data</span>.<span class="hljs-property">label</span>;      <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> e.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;:&quot;</span>+e.<span class="hljs-property">value</span>;    &#125;  &#125;,  <span class="hljs-attr">legend</span>: &#123;   <span class="hljs-comment">//图例/系列</span>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Email&#x27;</span>, <span class="hljs-string">&#x27;Union Ads&#x27;</span>, <span class="hljs-string">&#x27;Video Ads&#x27;</span>, <span class="hljs-string">&#x27;Direct&#x27;</span>, <span class="hljs-string">&#x27;Search Engine&#x27;</span>]  &#125;,  <span class="hljs-attr">grid</span>: &#123; <span class="hljs-comment">//可以使用数组，表示多个坐标轴</span>    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,    <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;4%&#x27;</span>,    <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,    <span class="hljs-attr">width</span>:<span class="hljs-string">&#x27;80%&#x27;</span>,    <span class="hljs-attr">height</span>:<span class="hljs-string">&#x27;80%&#x27;</span>,    <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否将坐标轴包含在内</span>  &#125;,    <span class="hljs-attr">toolbox</span>: &#123;    <span class="hljs-attr">feature</span>: &#123;      <span class="hljs-attr">saveAsImage</span>: &#123;&#125;    &#125;  &#125;,  <span class="hljs-attr">xAxis</span>: &#123;   <span class="hljs-comment">//如果grid为多个坐标轴，也可以使用数组，增加&#123;gridIndex: 0&#125;属性，对每个坐标轴进行设置。</span>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,    <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>]  &#125;,  <span class="hljs-attr">yAxis</span>: &#123;   <span class="hljs-comment">//同xAxis</span>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>  &#125;,  <span class="hljs-attr">series</span>: [    &#123;      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Email&#x27;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,      <span class="hljs-attr">data</span>: [&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">label</span>:<span class="hljs-string">&quot;hahahha&quot;</span>&#125;, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>]       <span class="hljs-comment">//data中的内容可以是对象，但是值的属性一定要是Value,其他可以自定义一些属性。</span>    &#125;,    &#123;      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Union Ads&#x27;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,      <span class="hljs-attr">data</span>: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">190</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>]    &#125;,    &#123;      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Video Ads&#x27;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,      <span class="hljs-attr">data</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">232</span>, <span class="hljs-number">201</span>, <span class="hljs-number">154</span>, <span class="hljs-number">190</span>, <span class="hljs-number">330</span>, <span class="hljs-number">410</span>]    &#125;,    &#123;      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Direct&#x27;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,      <span class="hljs-attr">data</span>: [<span class="hljs-number">320</span>, <span class="hljs-number">332</span>, <span class="hljs-number">301</span>, <span class="hljs-number">334</span>, <span class="hljs-number">390</span>, <span class="hljs-number">330</span>, <span class="hljs-number">320</span>]    &#125;,    &#123;      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Search Engine&#x27;</span>,      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,      <span class="hljs-attr">data</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>, <span class="hljs-number">1320</span>]    &#125;  ]&#125;;</code></pre><h3 id="使用数据集作为Data"><a href="#使用数据集作为Data" class="headerlink" title="使用数据集作为Data"></a>使用数据集作为Data</h3><pre><code class="hljs javascript">option = &#123;  <span class="hljs-attr">dataset</span>: [    &#123;      <span class="hljs-attr">dimensions</span>: [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;profession&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>],      <span class="hljs-attr">source</span>: [        [<span class="hljs-string">&#x27;Hannah Krause&#x27;</span>, <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;Engineer&#x27;</span>, <span class="hljs-number">314</span>, <span class="hljs-string">&#x27;2011-02-12&#x27;</span>],        [<span class="hljs-string">&#x27;Zhao Qian&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;Teacher&#x27;</span>, <span class="hljs-number">351</span>, <span class="hljs-string">&#x27;2011-03-01&#x27;</span>],        [<span class="hljs-string">&#x27;Jasmin Krause &#x27;</span>, <span class="hljs-number">52</span>, <span class="hljs-string">&#x27;Musician&#x27;</span>, <span class="hljs-number">287</span>, <span class="hljs-string">&#x27;2011-02-14&#x27;</span>],        [<span class="hljs-string">&#x27;Li Lei&#x27;</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;Teacher&#x27;</span>, <span class="hljs-number">219</span>, <span class="hljs-string">&#x27;2011-02-18&#x27;</span>],        [<span class="hljs-string">&#x27;Karle Neumann&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;Engineer&#x27;</span>, <span class="hljs-number">253</span>, <span class="hljs-string">&#x27;2011-04-02&#x27;</span>],        [<span class="hljs-string">&#x27;Adrian Groß&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;Teacher&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;2011-01-16&#x27;</span>],        [<span class="hljs-string">&#x27;Mia Neumann&#x27;</span>, <span class="hljs-number">71</span>, <span class="hljs-string">&#x27;Engineer&#x27;</span>, <span class="hljs-number">165</span>, <span class="hljs-string">&#x27;2011-03-19&#x27;</span>],        [<span class="hljs-string">&#x27;Böhm Fuchs&#x27;</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;Musician&#x27;</span>, <span class="hljs-number">318</span>, <span class="hljs-string">&#x27;2011-02-24&#x27;</span>],        [<span class="hljs-string">&#x27;Han Meimei&#x27;</span>, <span class="hljs-number">67</span>, <span class="hljs-string">&#x27;Engineer&#x27;</span>, <span class="hljs-number">366</span>, <span class="hljs-string">&#x27;2011-03-12&#x27;</span>]      ]    &#125;,    &#123;      <span class="hljs-attr">transform</span>: &#123;        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;sort&#x27;</span>,        <span class="hljs-attr">config</span>: &#123; <span class="hljs-attr">dimension</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;desc&#x27;</span> &#125;      &#125;    &#125;  ],  <span class="hljs-attr">xAxis</span>: &#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,    <span class="hljs-attr">axisLabel</span>: &#123; <span class="hljs-attr">interval</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">rotate</span>: <span class="hljs-number">30</span> &#125;  &#125;,  <span class="hljs-attr">yAxis</span>: &#123;&#125;,  <span class="hljs-attr">series</span>:[ &#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,    <span class="hljs-attr">encode</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;age&#x27;</span> &#125;,    <span class="hljs-attr">datasetIndex</span>: <span class="hljs-number">1</span>  &#125;,   &#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,    <span class="hljs-attr">encode</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;score&#x27;</span> &#125;,    <span class="hljs-attr">datasetIndex</span>: <span class="hljs-number">1</span>  &#125;]&#125;;</code></pre><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><p>自定义按钮</p><pre><code class="hljs javascript"><span class="hljs-attr">toolbox</span>: &#123;    <span class="hljs-attr">feature</span>: &#123;        <span class="hljs-attr">myTool1</span>: &#123;            <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;自定义扩展方法1&#x27;</span>,            <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;path://M432.45,595.444c0,2.177-4.661,6.82-11.305,6.82c-6.475,0-11.306-4.567-11.306-6.82s4.852-6.812,11.306-6.812C427.841,588.632,432.452,593.191,432.45,595.444L432.45,595.444z M421.155,589.876c-3.009,0-5.448,2.495-5.448,5.572s2.439,5.572,5.448,5.572c3.01,0,5.449-2.495,5.449-5.572C426.604,592.371,424.165,589.876,421.155,589.876L421.155,589.876z M421.146,591.891c-1.916,0-3.47,1.589-3.47,3.549c0,1.959,1.554,3.548,3.47,3.548s3.469-1.589,3.469-3.548C424.614,593.479,423.062,591.891,421.146,591.891L421.146,591.891zM421.146,591.891&#x27;</span>,            <span class="hljs-attr">onclick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;myToolHandler1&#x27;</span>)            &#125;        &#125;,        <span class="hljs-attr">myTool2</span>: &#123;            <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;自定义扩展方法&#x27;</span>,            <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;image://https://echarts.apache.org/zh/images/favicon.png&#x27;</span>,            <span class="hljs-attr">onclick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;myToolHandler2&#x27;</span>)            &#125;        &#125;    &#125;&#125;</code></pre><p>自定义界面图形、文本……</p><pre><code class="hljs javascript"><span class="hljs-attr">graphic</span>: [  &#123;      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;image&#x27;</span>,      <span class="hljs-attr">right</span>: <span class="hljs-number">40</span>,      <span class="hljs-attr">top</span>: <span class="hljs-number">20</span>,      <span class="hljs-attr">style</span>: &#123;          <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;/img/arrowleft.png&#x27;</span>,      &#125;,       <span class="hljs-attr">invisible</span>: <span class="hljs-literal">false</span>,                                             <span class="hljs-attr">onclick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;          <span class="hljs-keyword">if</span> (dataFloor) &#123;              dataFloor -= <span class="hljs-number">1</span>;          &#125;          myChart1.<span class="hljs-title function_">setOption</span>(optionArray[dataFloor]);      &#125;  &#125;]</code></pre><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p>1、<a href="https://echarts.apache.org/examples/zh/index.html">echart官网</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express</title>
    <link href="/2022/02/17/Express/"/>
    <url>/2022/02/17/Express/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DontNetCore</title>
    <link href="/2022/01/05/DontNetCore/"/>
    <url>/2022/01/05/DontNetCore/</url>
    
    <content type="html"><![CDATA[<h3 id="Web-Deploy发布"><a href="#Web-Deploy发布" class="headerlink" title="Web Deploy发布"></a>Web Deploy发布</h3><h4 id="1、不信任的证书"><a href="#1、不信任的证书" class="headerlink" title="1、不信任的证书"></a>1、不信任的证书</h4><blockquote><p>SeverityCodeDescriptionProjectFileLineSuppression State<br>ErrorWeb deployment task failed. (Connected to the remote computer (“10.136.16.135”) using the specified process (“Web Management Service”), but could not verify the server’s certificate. If you trust the server, connect again and allow untrusted certificates.  </p></blockquote><pre><code class="hljs html">在Properties-&gt;PublishProfiles-&gt;IISProfile.pubxml文件中添加<span class="hljs-tag">&lt;<span class="hljs-name">AllowUntrustedCertificate</span>&gt;</span>True<span class="hljs-tag">&lt;/<span class="hljs-name">AllowUntrustedCertificate</span>&gt;</span></code></pre><h3 id="Web-Api"><a href="#Web-Api" class="headerlink" title="Web Api"></a>Web Api</h3><blockquote><p>ApiController: 当在控制器类上应用了 ApiController 特性时，它会启用复杂类型参数绑定功能。可以传递List<myclass> 作为 request body，但是会导致int 这种简单参数无法获取到 。</p><p>不推荐使用 ApiController，想获取复杂类型的参数，可以直接使用 FromBody 定义函数的参数来源</p></blockquote><pre><code class="hljs c">public IActionResult <span class="hljs-title function_">AddLists</span><span class="hljs-params">( [FromBody] List&lt;ReminderContact&gt; items)</span></code></pre><blockquote><p>Route(“[controller]&#x2F;[action]”) : 用于定义 API 控制器的行为和路由。</p></blockquote><pre><code class="hljs C">namespace Esclate_Reminder.Controllers&#123;    [ApiController]    [Route(<span class="hljs-string">&quot;[controller]/[action]&quot;</span>)]    public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EscalateContactController</span> :</span> Controller    &#123;        private EsclateContactService _escService = new EsclateContactService();        [HttpGet]        public IActionResult <span class="hljs-title function_">QueryEnable</span><span class="hljs-params">()</span>        &#123;            try            &#123;                <span class="hljs-keyword">return</span> Json(_escService.QueryEnable());            &#125;            catch (Exception err)            &#123;                <span class="hljs-keyword">return</span> new CustomError(HttpStatusCode.BadRequest, err.Message);            &#125;        &#125;        [HttpGet]        public IActionResult <span class="hljs-title function_">QueryAll</span><span class="hljs-params">()</span>        &#123;            try            &#123;                <span class="hljs-keyword">return</span> Json(_escService.QueryAll());            &#125;            catch (Exception err)            &#123;                <span class="hljs-keyword">return</span> new CustomError(HttpStatusCode.BadRequest, err.Message);            &#125;        &#125;        [HttpGet]        public IActionResult <span class="hljs-title function_">Query_byCategory</span><span class="hljs-params">(<span class="hljs-built_in">string</span> category)</span>        &#123;            try            &#123;                <span class="hljs-keyword">return</span> Json(_escService.Query_byCategory(category));            &#125;            catch (Exception err)            &#123;                <span class="hljs-keyword">return</span> new CustomError(HttpStatusCode.BadRequest, err.Message);            &#125;        &#125;        [HttpPost]        public IActionResult <span class="hljs-title function_">AddLists</span><span class="hljs-params">(List&lt;ReminderContact&gt; items)</span> &#123;            try            &#123;                <span class="hljs-keyword">return</span> Json(_escService.AddLists(items));            &#125;            catch (Exception err)            &#123;                <span class="hljs-keyword">return</span> new CustomError(HttpStatusCode.BadRequest, err.Message);            &#125;        &#125;        [HttpPost]        public IActionResult <span class="hljs-title function_">Add</span><span class="hljs-params">(ReminderContact item)</span>        &#123;            try            &#123;                <span class="hljs-keyword">return</span> Json(_escService.Add(item));            &#125;            catch (Exception err)            &#123;                <span class="hljs-keyword">return</span> new CustomError(HttpStatusCode.BadRequest, err.Message);            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph</title>
    <link href="/2021/12/20/Graph/"/>
    <url>/2021/12/20/Graph/</url>
    
    <content type="html"><![CDATA[<h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>至少包含一个点的集合，称为图</p><table><thead><tr><th>Index</th><th>无向图 （n个顶点 e条边）</th><th>有向图</th></tr></thead><tbody><tr><td>定义</td><td>V &#x3D; {A,B,C,D,E} E &#x3D; {(A,B),(A,C)}</td><td>V &#x3D; {A,B,C,D,E} E &#x3D; {&lt;A,B&gt;,&lt;A,C&gt;}</td></tr><tr><td>简单图</td><td>没有重复的边，也没有连接到自身的边</td><td>–</td></tr><tr><td>复杂图</td><td>有重复边或者有</td><td>–</td></tr><tr><td>完全图</td><td>每两个顶点间都有边连接 n(n-1)&#x2F;2条边</td><td>n(n-1)条边</td></tr><tr><td>图形</td><td>‘-’链接</td><td>‘-&gt;’链接</td></tr><tr><td>连通</td><td>任意两个顶点之间都互相链接（连同子图）</td><td>（强连通子图）</td></tr><tr><td>极大连通分量</td><td>如果本身就是(强)连通的图那么就是自身</td><td>–</td></tr><tr><td>极小连通分量</td><td>（连通图）n-1条边</td><td>n条边</td></tr><tr><td>度</td><td>该顶点的连接的边的个数 2e</td><td>出的+入度 （“出度”-&gt;“入度”）</td></tr><tr><td>生成树</td><td>连通无向图的极小连通子图（不唯一）</td><td>–</td></tr><tr><td>生成森林</td><td>非连通无向图的极小连通子图（不唯一）</td><td>–</td></tr></tbody></table><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><code>V = &#123;A,B,C,D,E&#125;  </code></p><p>无向图：</p><pre><code class="hljs mermaid">graph LR;  A---B  A---C  C---D  D---E</code></pre><p>结点数组：</p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><h4 id="1、邻接矩阵法"><a href="#1、邻接矩阵法" class="headerlink" title="1、邻接矩阵法"></a>1、邻接矩阵法</h4><p>用矩阵的方式把所有结点间的关系记录下来，适用于稠密图<br>无向图 $ A[i][j] : Vi - Vj,$ 关于主对角线对称<br>有向图 $ A[i][j] : Vi \rightarrow Vj,$<br>网     矩阵中的内容可以是权重，无连接的结点可以表示为 $ 0、 \infty $</p><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>A</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>B</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>C</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>D</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>E</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxVCount 100</span>typeof <span class="hljs-type">char</span> Vtype;typeof <span class="hljs-type">int</span> Etype;typeof <span class="hljs-keyword">struct</span>&#123;    Vtype Vex [MaxVCount];    Etype Edge[MaxVCount][MaxVCount];    <span class="hljs-type">int</span> Vcount,Ecount;&#125;MGraph</code></pre><h4 id="2、邻接表法"><a href="#2、邻接表法" class="headerlink" title="2、邻接表法"></a>2、邻接表法</h4><p>当前结点所链接的所有的结点组成一个链表，<br>链表中的内容为：结点数组的Index+指向下一个节点的指针</p><pre><code class="hljs mermaid">graph LR;  0A--&gt;1--&gt;2</code></pre><pre><code class="hljs mermaid">graph LR;  1B--&gt;0</code></pre><pre><code class="hljs mermaid">graph LR;  2C--&gt;0</code></pre><pre><code class="hljs mermaid">graph LR;  3D--&gt;0--&gt;3</code></pre><pre><code class="hljs mermaid">graph LR;  4E--&gt;3</code></pre><pre><code class="hljs C++"><span class="hljs-comment">//定义链表结构</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxVCount 100</span>typeof <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>&#123;    <span class="hljs-type">int</span> Vindex;    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span> *Next;&#125;ArcNode;<span class="hljs-comment">//定义每一个节点的结构：</span>typeof <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span>&#123;    Vtype data;    ArcNode *first;&#125;VNode;<span class="hljs-comment">//定义邻接表</span>typeof <span class="hljs-keyword">struct</span>&#123;    VNode Vlist[MaxVCount];    <span class="hljs-type">int</span> Vcount,Ecount;&#125;ALGraph;</code></pre><h4 id="3、十字链表法（有向图的一种链式存储结构）"><a href="#3、十字链表法（有向图的一种链式存储结构）" class="headerlink" title="3、十字链表法（有向图的一种链式存储结构）"></a>3、十字链表法（有向图的一种链式存储结构）</h4><p>邻接表法：在有向图中根据当前结点可以方便的检索到与之链接出结点，但是要查找对应的入结点比较麻烦<br>因此引入十字链表法<br>链表内容（边的信息）</p><table><thead><tr><th>Vi</th><th>Vj</th><th>同入的下一个边</th><th>同出的下一个边</th></tr></thead></table><pre><code class="hljs C++"><span class="hljs-comment">//定义链表结构</span>typeof <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>&#123;    <span class="hljs-type">int</span> i,j;    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span> *iNext,*jNext;&#125;ArcNode;<span class="hljs-comment">//定义每一个节点的结构：</span>typeof <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span>&#123;    Vtype data,    ArcNode *firstIn,*firstOut;&#125;VNode;<span class="hljs-comment">//定义十字链接表</span>typeof <span class="hljs-keyword">struct</span> &#123;    VNode VList[MaxVCount];    <span class="hljs-type">int</span> Vcount,Ecount;&#125;GLGraph;</code></pre><h4 id="4、邻接多重表"><a href="#4、邻接多重表" class="headerlink" title="4、邻接多重表"></a>4、邻接多重表</h4>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenSSL</title>
    <link href="/2021/12/08/OpenSSL/"/>
    <url>/2021/12/08/OpenSSL/</url>
    
    <content type="html"><![CDATA[<h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><p><a href="https://slproweb.com/products/Win32OpenSSL.html">OpenSSL下载</a><br><a href="https://www.cnblogs.com/zhoushiya/p/14986840.html">安装教程</a></p><h3 id="IIS-安装-个人认证"><a href="#IIS-安装-个人认证" class="headerlink" title="IIS 安装 个人认证"></a>IIS 安装 个人认证</h3><p>IIS -&gt; 电脑名 -&gt; Server Certificate -&gt; Create Self-Singal Certifical<br>打开需要认证的web -&gt; Bindings -&gt; Add -&gt; 选择https,和个人认证,配置端口,ok<br>客户端浏览器打开网址 -&gt; 信任该web</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MarkdownLearn</title>
    <link href="/2021/12/01/MarkdownLearn/"/>
    <url>/2021/12/01/MarkdownLearn/</url>
    
    <content type="html"><![CDATA[<h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p>1.<a href="https://www.runoob.com/markdown/md-advance.html">菜鸟教程-Markdown教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022杂记</title>
    <link href="/2021/12/01/2022/"/>
    <url>/2021/12/01/2022/</url>
    
    <content type="html"><![CDATA[<h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><h3 id="20220222"><a href="#20220222" class="headerlink" title="20220222"></a>20220222</h3><p>2022-02-22 星期二。<br>说是今年最二最有爱的一天。</p><p>突然在朋友圈刷到了天娇领证的消息，年前刚去吃了她的订婚酒，说真的看到了她未来的另一半，才放下心来，毕竟前车之鉴，我这个妹妹是个感情用事的人。还好现在这位看起来就很不错。<br>但我却实在不能在这一天和她同乐，毕竟现在压力来到我这里了。想想我现在的处境……算了还是别想了。人无远虑必有近忧，说的就是我吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database</title>
    <link href="/2021/12/01/DatabaseLearn/"/>
    <url>/2021/12/01/DatabaseLearn/</url>
    
    <content type="html"><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库事务正确执行的四个基本要素：（ACID）<br>A:原子性（atomicity）<br>C:一致性（consistency）<br>I:隔离性（isolation）<br>D:持续性（durability）</p><h3 id="关系操作和关系数据语言-SQL"><a href="#关系操作和关系数据语言-SQL" class="headerlink" title="关系操作和关系数据语言 SQL"></a>关系操作和关系数据语言 SQL</h3><p>关系是<br>$$ 域D_1,D_2,D_3… $$<br>笛卡尔积的子集</p><p>1.SQL是集：数据定义(DDL)，数据查询，数据控制(DCL)，数据操纵(DML) 于一体的结构化查询语言<br>2.基本的关系操作包括：增删改查，(查询包括：交并差除，连接，投影，选择，笛卡尔积)</p><blockquote><p>选择，投影，并，差，笛卡尔积，是五种基本操作</p></blockquote><p>3.关系操作的对象和结果都是集合<br>4.关系模式: R(U,D,DOM,F)<br>5.关系的完整性包括：实体完整性，参照完整性和，用户定义完整性<br>6.如果一组属性可以唯一的标识一个元组且他的子集不可以，那么称该属性组为候选码；<br>  如果一个关系有多个候选码，选择其中一个为主码；<br>  不属于任何候选码的属性称为非主属性&#x2F;非码属性<br>7.关系操作的对象和结果都是集合<br>8.任意两个元组的候选码不能取相同的值</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Entity Framework</title>
    <link href="/2021/11/10/EntityFramework/"/>
    <url>/2021/11/10/EntityFramework/</url>
    
    <content type="html"><![CDATA[<h2 id="EntityFramwork"><a href="#EntityFramwork" class="headerlink" title="EntityFramwork"></a>EntityFramwork</h2><h3 id="1、EF-链接各类型数据库"><a href="#1、EF-链接各类型数据库" class="headerlink" title="1、EF 链接各类型数据库"></a>1、EF 链接各类型数据库</h3><p><a href="https://www.cnblogs.com/mhc860217/articles/11919563.html">Scaaffold-DbContext指令解释</a></p><h4 id="1-1、-net-EF-链接postgreSql"><a href="#1-1、-net-EF-链接postgreSql" class="headerlink" title="1.1、.net EF 链接postgreSql"></a>1.1、.net EF 链接postgreSql</h4><blockquote><p>选择 .net 4.6.1</p><ol><li>安装插件 Npgsql PostgreSQL Integration</li><li>安装 EF框架 无框架限制</li><li>安装 Npgsql 注意.net版本</li><li>安装 EF6 for Npgsql 提供postgresql的ADO模型，要匹配：.net 以及 2,3 的版本</li></ol></blockquote><h4 id="1-2、Core-EF-链接postgreSql"><a href="#1-2、Core-EF-链接postgreSql" class="headerlink" title="1.2、Core EF 链接postgreSql"></a>1.2、Core EF 链接postgreSql</h4><blockquote><ol><li>安装插件 Npgsql PostgreSQL Integration</li><li>安装 EF框架：Microsoft.EntityFrameworkCore</li><li>Microsoft.EntityFrameworkCore.Design;<br>Microsoft.EntityFrameworkCore.Tools</li><li>安装 Npgsql: Npgsql.EntityFrameworkCore.PostgreSQL</li><li>Npgsql.EntityFrameworkCore.PostgreSQL.Design</li><li>cmd-&gt;cd 进入工程文件.csproj所在的文件夹 -&gt;<br>dotnet ef dbcontext scaffold “Host&#x3D;cnwuxm1medb01;Database&#x3D;EC;Username&#x3D;ECUser;Password&#x3D;Jabil123” Npgsql.EntityFrameworkCore.PostgreSQL -o Models</li></ol></blockquote><ul><li>Use dotnet build to see the errors<blockquote><p>程序编译出错了，要保证程序能够正常运行的基础上，更新数据库cs文件</p></blockquote></li><li>Use the Force flag to overwrite these files<blockquote><p>dotnet ef dbcontext scaffold “Host&#x3D;cnwuxm1medb01;Database&#x3D;FOF;Username&#x3D;FOFUser;Password&#x3D;Jabil123” Npgsql.EntityFrameworkCore.PostgreSQL -o Model -f</p></blockquote></li></ul><h4 id="1-3、Core-EF-链接-MySQL"><a href="#1-3、Core-EF-链接-MySQL" class="headerlink" title="1.3、Core EF 链接 MySQL"></a>1.3、Core EF 链接 MySQL</h4><blockquote><ol><li>安装 EF框架：Microsoft.EntityFrameworkCore</li><li>Microsoft.EntityFrameworkCore.Tools</li><li>安装 Mysql.Data</li><li>安装 Pomelo.EntityFrameworkCore.MySql(官方插件有问题，使用这个社区版本)</li><li>cmd-&gt;cd 进入工程文件.csproj所在的文件夹 -&gt;<br>Scaffold-DbContext “server&#x3D;cnwuxg0te01;uid&#x3D;root;pwd&#x3D;Jabil12345;port&#x3D;3306;database&#x3D;sparepart_current;” Pomelo.EntityFrameworkCore.MySql -OutputDir Models -f</li></ol></blockquote><h4 id="1-4、Core-EF-链接-SQL-Server"><a href="#1-4、Core-EF-链接-SQL-Server" class="headerlink" title="1.4、Core EF 链接 SQL Server"></a>1.4、Core EF 链接 SQL Server</h4><blockquote><p>通过数据库结构建立实体：</p><ol><li>Install-Package Microsoft.EntityFrameworkCore.SqlServer<br>Install-Package Microsoft.EntityFrameworkCore.Tools<br>Install-Package Microsoft.EntityFrameworkCore.SqlServer.Design</li><li>cmd-&gt;cd 进入工程文件.csproj所在的文件夹 -&gt;<br>Scaffold-DbContext ‘Data Source&#x3D;cnwuxm0lsql01;Initial Catalog&#x3D;PMMS;User ID&#x3D;pmms_readonly;Password&#x3D;Jabil123;MultipleActiveResultSets&#x3D;True;Connection Timeout&#x3D;120’ Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models\PMMS -Table EQ,PMrecord,PMItems</li></ol></blockquote><p>Scaffold-DbContext “Data Source&#x3D;cnwuxg0te01;Initial Catalog&#x3D;Apps;User ID&#x3D;sa;Password&#x3D;Jabil12345;MultipleActiveResultSets&#x3D;True;Connection Timeout&#x3D;120;TrustServerCertificate&#x3D;true” Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models\Common -Table Calendar</p><blockquote><p>更新数据库：</p><ol><li>add-migration AddUserDetails </li><li>update-database AddUserDetails</li></ol></blockquote><h3 id="2、查询语句"><a href="#2、查询语句" class="headerlink" title="2、查询语句"></a>2、查询语句</h3><p>可以使用linq语句，或者EF结构</p><h4 id="动态条件查询"><a href="#动态条件查询" class="headerlink" title="动态条件查询"></a>动态条件查询</h4><pre><code class="hljs C#"><span class="hljs-keyword">var</span> item = db.pmsheets.ToList();    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(department))        item = item.Where(e =&gt; e.department == department).ToList();    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(project))        item = item.Where(e =&gt; e.project == project).ToList();    <span class="hljs-keyword">var</span> items = item.Select(e =&gt; <span class="hljs-keyword">new</span> &#123;        paras = e.station    &#125;).Distinct().ToList();</code></pre><h4 id="两表链接"><a href="#两表链接" class="headerlink" title="两表链接"></a>两表链接</h4><pre><code class="hljs C#"><span class="hljs-keyword">var</span> pmitems = db.PMItems        .Join(db.EQs, pm =&gt; pm.EQID, eq =&gt; eq.EQID, (pm, eq) =&gt; <span class="hljs-keyword">new</span> &#123;             pmid=pm.pmid,            EQID=pm.pmid,            owner = eq.Owners,        &#125;)        .Where(e =&gt; pmid.Contains(e.pmid)).ToList();</code></pre><h4 id="Where-不执行"><a href="#Where-不执行" class="headerlink" title="Where 不执行"></a>Where 不执行</h4><pre><code class="hljs C#">pmms pmmsdb = <span class="hljs-keyword">new</span> pmms();inspect db = <span class="hljs-keyword">new</span> inspect();<span class="hljs-keyword">var</span> eqwhere = pmmsdb.EQs.Where(e =&gt; <span class="hljs-literal">true</span>);<span class="hljs-keyword">if</span> (department.Length&gt;<span class="hljs-number">0</span>) eqwhere = eqwhere.Where(e =&gt; department.Contains(e.Department));<span class="hljs-keyword">if</span> (line.Length &gt; <span class="hljs-number">0</span>) eqwhere = eqwhere.Where(e =&gt; line.Contains(e.Line));<span class="hljs-keyword">if</span> (project.Length &gt; <span class="hljs-number">0</span>) eqwhere = eqwhere.Where(e =&gt; project.Contains(e.Workcell));<span class="hljs-keyword">var</span> eqlist = eqwhere.Select(e =&gt; <span class="hljs-keyword">new</span> &#123;    Line = e.Line,    EQID = e.EQID&#125;).ToList();</code></pre><h4 id="EF-实现sql中的方法"><a href="#EF-实现sql中的方法" class="headerlink" title="EF 实现sql中的方法"></a>EF 实现sql中的方法</h4><pre><code class="hljs C#"><span class="hljs-keyword">using</span> Microsoft.EntityFrameworkCore;EF.Functions</code></pre><pre><code class="hljs C#">EF 中 Equals方法，只能用于引用类型(例如：<span class="hljs-built_in">string</span>)，不能用于值类型(例如：<span class="hljs-built_in">int</span>)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/04/bootstrapSelect/"/>
    <url>/2021/11/04/bootstrapSelect/</url>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap-Select"><a href="#Bootstrap-Select" class="headerlink" title="Bootstrap Select"></a>Bootstrap Select</h2><pre><code class="hljs javascript"><span class="hljs-attr">function</span>:全选：data-none-selected-text=<span class="hljs-string">&quot;All&quot;</span> data-actions-box=<span class="hljs-string">&quot;true&quot;</span>是否支持多选：multiple多选最多：data-max-options=<span class="hljs-string">&quot;5&quot;</span> 是否支持查询：data-live-search=<span class="hljs-string">&quot;true&quot;</span>下拉框显示的option个数：data-size=<span class="hljs-string">&quot;6&quot;</span></code></pre><pre><code class="hljs javascript">&lt;select id=<span class="hljs-string">&quot;machine-select&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-control selectpicker&quot;</span> title=<span class="hljs-string">&quot;Select Machine&quot;</span>  multiple data-size=<span class="hljs-string">&quot;6&quot;</span> data-live-search=<span class="hljs-string">&quot;true&quot;</span> data-max-options=<span class="hljs-string">&quot;5&quot;</span> &gt;&lt;/select&gt;</code></pre><p>bootstrap-select js 控制选择</p><pre><code class="hljs javascript"></code></pre><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><p><a href="https://developer.snapappointments.com/bootstrap-select/examples/">bootstrap-select Document</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/10/18/openCV/"/>
    <url>/2021/10/18/openCV/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h1><p><a href="https://docs.opencv.org/4.5.2/d5/d10/tutorial_js_root.html">参考文件</a></p><p><a href="https://docs.opencv.org/_VERSION_/opencv.js">各版本.js文件下载地址</a></p><h3 id="1、常用方法："><a href="#1、常用方法：" class="headerlink" title="1、常用方法："></a>1、常用方法：</h3><pre><code class="hljs javascript"><span class="hljs-comment">//读取图片-&gt; mat对象</span>cv.<span class="hljs-title function_">imread</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;imageSrc&#x27;</span>))<span class="hljs-comment">//输出到canvas</span>cv.<span class="hljs-title function_">inshow</span>(<span class="hljs-string">&#x27;canvasOutput2&#x27;</span>,dst)  <span class="hljs-comment">//element id,mat类型的对象</span><span class="hljs-comment">//设置画布大小</span>cv.<span class="hljs-title class_">Size</span>(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>)cv.<span class="hljs-title function_">resize</span>(src, src, dsize);  <span class="hljs-comment">// 输入对象，输出对象，输出对象的大小</span><span class="hljs-comment">//设置画面颜色 (对画面操作前最好将其转换成RGB)</span><span class="hljs-comment">//https://blog.csdn.net/keith_bb/article/details/53470170</span>cv.<span class="hljs-title function_">cvtColor</span>(src, src, cv.<span class="hljs-property">COLOR_RGBA2GRAY</span>, <span class="hljs-number">0</span>);cv.<span class="hljs-title function_">threshold</span>(src, src, <span class="hljs-number">100</span>, <span class="hljs-number">255</span>, cv.<span class="hljs-property">THRESH_OTSU</span>);<span class="hljs-comment">//cvtColor+threshold 将图片转为二进制图像</span><span class="hljs-comment">//轮廓检索</span><span class="hljs-comment">//https://blog.csdn.net/dcrmg/article/details/51987348</span> cv.<span class="hljs-title function_">findContours</span>(src, contours, hierarchy, cv.<span class="hljs-property">RETR_TREE</span>, cv.<span class="hljs-property">CHAIN_APPROX_NONE</span>); <span class="hljs-comment">//灰度图片或二进制图像，存储轮廓，存储每个轮廓的相对关系，轮廓检索模式，轮廓近似方法</span><span class="hljs-comment">//绘制轮廓</span><span class="hljs-comment">//https://blog.csdn.net/qq_18343569/article/details/47982167</span>cv.<span class="hljs-title function_">drawContours</span>(src_clone, contours, i, color, <span class="hljs-number">1</span>);<span class="hljs-comment">//图片描线</span>cv.<span class="hljs-title class_">Canny</span>()<span class="hljs-comment">//图片模糊</span>cv.<span class="hljs-title function_">blur</span>()cv.<span class="hljs-title function_">filter</span>() </code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tree</title>
    <link href="/2021/10/14/tree/"/>
    <url>/2021/10/14/tree/</url>
    
    <content type="html"><![CDATA[<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><h3 id="二叉排序树（二叉查找树）（BST）："><a href="#二叉排序树（二叉查找树）（BST）：" class="headerlink" title="二叉排序树（二叉查找树）（BST）："></a>二叉排序树（二叉查找树）（BST）：</h3><p>左节点&lt;根节点&lt;右节点 </p><h3 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）:"></a>平衡二叉树（AVL）:</h3><p>左右子树的高度差的绝对值&lt;&#x3D;1</p><h3 id="哈夫曼树："><a href="#哈夫曼树：" class="headerlink" title="哈夫曼树："></a>哈夫曼树：</h3><p>带权路径长度 &#x3D; 权*根到节点的边数<br>所有 <strong>叶子节点</strong> 的带权路径长度之和（WPL）最小的树</p><h3 id="B树（多路平衡查找树）绝对平衡"><a href="#B树（多路平衡查找树）绝对平衡" class="headerlink" title="B树（多路平衡查找树）绝对平衡"></a>B树（多路平衡查找树）绝对平衡</h3><p>1、最多的<strong>分叉</strong>，称为树的阶：5阶B树：一个节点最多有5个分叉，最少有3个分叉；最多4个元素。最少有2个元素<br>2、节点中的的元素是有序的<br>3、非根节点(ceil(m&#x2F;2),m)个子树，（ceil(m&#x2F;2)-1，m-1）个元素<br>   根节点（1，m）个子树，（1，m-1）个元素<br>4、所有的叶节点（其实都是null,就是查找失败的节点）都出现在同一层，叶节点的上一层，称为终端节点<br>5、B树的高度，通常不包含叶子节点（失败节点，null）<br>6、各个节点的关键字是不重复的<br>7、每个关键字中还包含指向内容的指针。</p><h3 id="B-树-绝对平衡"><a href="#B-树-绝对平衡" class="headerlink" title="B+树 绝对平衡"></a>B+树 绝对平衡</h3><p>类似分块查找<br>根节点也至少需要两个子树，否则不是B+树<br>1、节点中的关键字个数和子树个数相同<br>2、所有的叶子节点，包含所有的关键字，及指向对应记录的指针，<br>3、叶节点中关键字按大小顺序排列，且相邻的叶节点按大小顺序链接起来（<strong>支持顺序查找</strong>）<br>4、所有分支节点中仅包含子节点关键字的最大值以及指向子节点的指针<br>5、非根节点：(ceil(m&#x2F;2),m)，分支数&#x3D;元素个数<br>   根节点（1，m）<br>6、分支节点中出现过的数字，还会在子节点中出现<br>7、分支节点，只起到索引的作用。并不包含指向内容的指针</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>平衡二叉查找树的变体,左右子树高度差可以大于一,不一定平衡，但一定是二叉查找树<br>1、 结点是红色或黑色。<br>2、根结点是黑色。<br>3、所有叶子都是黑色。（叶子是NIL结点）<br>4、每个红色结点的两个子结点都是黑色。（从每个叶子到根的所有路径上不能有两个连续的红色结点）<br>5、从任一节结点其每个叶子的所有路径都包含相同数目的黑色结点</p><h3 id="堆-必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质"><a href="#堆-必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质" class="headerlink" title="堆 必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质"></a>堆 必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质</h3><p>堆的插入：<br>永远插入最后一个位置，再进行排序，和交换，使当前堆满足堆的属性<br>堆的删除：<br>使用最后一个数填补被删除的数，再进行排序，交换，使当前堆满足堆的属性</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL Learning</title>
    <link href="/2021/10/13/postgreSQL/"/>
    <url>/2021/10/13/postgreSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><h3 id="1、注意点"><a href="#1、注意点" class="headerlink" title="1、注意点:"></a>1、注意点:</h3><blockquote><p>1、大写(A)的名字，需要用双引号（”A”）,使其生效，否者会报错： column “a” does not exist<br>2、Trigger怎么写？？？？语法错误</p></blockquote><h3 id="2-1、postgreSql-in-VS-net"><a href="#2-1、postgreSql-in-VS-net" class="headerlink" title="2.1、postgreSql in VS .net"></a>2.1、postgreSql in VS .net</h3><blockquote><p>选择 .net 4.6.1<br>1、安装插件 Npgsql PostgreSQL Integration<br>2、安装 EF框架 无框架限制<br>3、安装 Npgsql 注意.net版本<br>4、安装 EF6 for Npgsql 提供postgresql的ADO模型，要匹配：.net 以及 2,3 的版本</p></blockquote><h3 id="2-2、postgreSql-in-VS-net-Core"><a href="#2-2、postgreSql-in-VS-net-Core" class="headerlink" title="2.2、postgreSql in VS .net Core"></a>2.2、postgreSql in VS .net Core</h3><blockquote><p>1、安装插件 Npgsql PostgreSQL Integration<br>2、安装 EF框架：Microsoft.EntityFrameworkCore<br>3、Microsoft.EntityFrameworkCore.Tools<br>4、安装 Npgsql: Npgsql.EntityFrameworkCore.PostgreSQL<br>5、Npgsql.EntityFrameworkCore.PostgreSQL.Design<br>6、cmd-&gt;cd 进入工程文件.csproj所在的文件夹 -&gt; 运行如下语句</p></blockquote><pre><code class="hljs C">dotnet ef dbcontext scaffold <span class="hljs-string">&quot;Host=cnwuxm1medb01;Database=EC;Username=ECUser;Password=Jabil123&quot;</span> Npgsql.EntityFrameworkCore.PostgreSQL -o Model</code></pre><ul><li>Use dotnet build to see the errors<blockquote><p>程序编译出错了，要保证程序能够正常运行的基础上，更新数据库cs文件</p></blockquote></li><li>Use the Force flag to overwrite these files<blockquote><p>dotnet ef dbcontext scaffold “Host&#x3D;cnwuxm1medb01;Database&#x3D;FOF;Username&#x3D;FOFUser;Password&#x3D;Jabil123” Npgsql.EntityFrameworkCore.PostgreSQL -o Model -f</p></blockquote></li></ul><h3 id="3、postgresql-sql-语法"><a href="#3、postgresql-sql-语法" class="headerlink" title="3、postgresql sql 语法"></a>3、postgresql sql 语法</h3><h4 id="（1）将数组类型的数据拆分为多行"><a href="#（1）将数组类型的数据拆分为多行" class="headerlink" title="（1）将数组类型的数据拆分为多行"></a>（1）将数组类型的数据拆分为多行</h4><pre><code class="hljs sql"><span class="hljs-keyword">select</span> x.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> machine,line,station,<span class="hljs-built_in">unnest</span>(dparametername)<span class="hljs-keyword">as</span> dparametername,<span class="hljs-built_in">unnest</span>(dparametervalue)<span class="hljs-keyword">as</span> dparametervalue <span class="hljs-keyword">from</span> ct_det <span class="hljs-keyword">where</span> machine <span class="hljs-operator">=</span><span class="hljs-string">&#x27;5CG4412DY9&#x27;</span>)x<span class="hljs-keyword">where</span> x.dparametername <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span></code></pre><h4 id="（2）保留小数"><a href="#（2）保留小数" class="headerlink" title="（2）保留小数"></a>（2）保留小数</h4><pre><code class="hljs sql">round(<span class="hljs-number">8</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>::<span class="hljs-type">numeric</span>,<span class="hljs-number">2</span>)</code></pre><h3 id="4、Core-EF使用原生sql"><a href="#4、Core-EF使用原生sql" class="headerlink" title="4、Core EF使用原生sql"></a>4、Core EF使用原生sql</h3><pre><code class="hljs C">using Microsoft.EntityFrameworkCore;var items = db.CtDet.FromSqlRaw(sql).ToList();<span class="hljs-comment">//只能查询实体类，不能查询自定义类 select</span><span class="hljs-comment">//如果查询自定义类，需要在model中写出实体并注册到dataset中</span>var items = db.Database.ExecuteSqlRaw(sql);<span class="hljs-comment">//返回被影响的行 update,delete,insert</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/26/MVC/"/>
    <url>/2021/08/26/MVC/</url>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="cshtml"><a href="#cshtml" class="headerlink" title=".cshtml"></a>.cshtml</h3><p>cs生成HTML界面，所以每刷新一次，都要重新生成界面。<br>_layout.cshtml每次加载都刷新</p><p>Q:如何在客户端与服务器之间建立一次链接；并生成cookie.cookie有效时间为，整个通话期间，界面关闭，删除cookie.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2021杂记</title>
    <link href="/2021/06/30/2021/"/>
    <url>/2021/06/30/2021/</url>
    
    <content type="html"><![CDATA[<h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><h3 id="20210223"><a href="#20210223" class="headerlink" title="20210223"></a>20210223</h3><h3 id="20211209"><a href="#20211209" class="headerlink" title="20211209"></a>20211209</h3><p>和苏老师吵架了，因为他在我复习的时候吃东西，还和别人聊天到12点才想起我，既不让我早睡，也不帮我复习。交这样的男朋友有什么用，还不如我NoNo，至少知道到点了就要来踩奶。<br>就知道自己开心，你是开心了，我嘞，我就是逗你开心的工具人？遇事不对就“我错了，我错了”，认错就更闹着玩似的，要是道歉有用要警察干嘛，又不花时间又不花钱，就会耍嘴皮子。天天说喜欢喜欢，喜欢你个大头鬼。要比嘴皮子，那我妹那渣男前男友说话都比你好听多了。<br>还天天说什么监督你早睡，根本做不到，做不到就别说！每天那么晚给我打电话，我还天天巴巴守那等你下课。我等你个头！我是失了智我天天等你，肯定就是睡少了，脑子才这么轴。100分英语卷子考个38分，拉几把倒吧，考个屁的研，收拾收拾回家种田算了，好歹在家还有人天天给我做饭，还不用洗碗。<br>对，天天说让我早睡，没一天不搁那跟我大眼瞪小眼的，咋了，你眼睛大你了不起，我就眼睛小咋了，这都要跟我争，是不是个男的，都不知道让着女生一点的吗？<br>亏我跟你分享那么多八卦，希望你学到一点，要引以为戒。学，学你个头，一点用没有，书看到屁股里去了。<br>我是自己一个人过不下去了，我这么依靠你，还不是觉得那样你会比较高兴，好家伙，根本靠不住。我自己站直了自己两条腿走路我不舒服？我非要靠你身上？爱咋咋地！老子不管了。<br>还leve up 2.0版本，行我承认是比1.0高级那么一点，但也没达到客户需求啊，再说了乙方不就是挑刺的吗？你这甲方怎么还不改方案，跟不上乙方需求，要被撤资的啊。</p><p>垃圾男朋友，<br>有不如没有。<br>一直这么狗，<br><del>早晚要分手。</del>（行苏老师不让说<del>分手</del>）<br>早晚say goodbye</p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edu2021</title>
    <link href="/2020/11/10/edu2021/"/>
    <url>/2020/11/10/edu2021/</url>
    
    <content type="html"><![CDATA[<h2 id="考研相关"><a href="#考研相关" class="headerlink" title="考研相关"></a>考研相关</h2><p>华东师范大学 数据科学与工程学院  当代数据管理系统</p><p>1、政治（101）</p><p>2、英语1（201）</p><p>3、数学2（302）</p><p>4、专业课：数据科学与工程综合（824）</p><h2 id="专业课考点及参考资料（824）"><a href="#专业课考点及参考资料（824）" class="headerlink" title="专业课考点及参考资料（824）"></a>专业课考点及参考资料（824）</h2><h3 id="1）数据结构与程序设计："><a href="#1）数据结构与程序设计：" class="headerlink" title="1）数据结构与程序设计："></a>1）数据结构与程序设计：</h3><p>数据结构的概念；算法及其时间和空间复杂度分析；常用线性结构：栈、队列，循环队列, 数组, 字符串等；线性结构的链式存储，链表、双向链表、循环链表、链式队列、链式栈；递归概念、递归程序设计、回溯法、广度优先搜索、深度优先搜索；列表：查找的概念，顺序查找与二分查找；哈希表：利用哈希表进行查找，哈希冲突的解决；排序的概念：排序算法(插入排序、冒泡排序、快速排序、堆排序、基数排序等)；树：基本性质、常用存储结构、遍历算法、二叉树、二叉查找树、堆、二叉平衡树、多路树（Trie树，B树）；图：基本概念、存储结构、遍历算法、生成树、拓扑排序、最短路径；C++语言程序设计：数据类型、操作符和表达式、控制流程、函数、程序结构、数组、指针、结构和共用体、基本输入输出、类与对象。 </p><p>参考教材：克鲁斯（Robert L. Kruse）等著. 《数据结构与程序设计——C++语言描述》 高等教育出版社，2001 （第1-12章） </p><h3 id="2）数据管理系统及应用："><a href="#2）数据管理系统及应用：" class="headerlink" title="2）数据管理系统及应用："></a>2）数据管理系统及应用：</h3><p>数据库的基本概念：数据库、数据库管理系统、DBA；数据模型的基本概念：层次模型、网状模型、关系模型；关系模型：关系代数、关系演算；查询语言：SQL（DDL、DML）；数据库设计：数据库模式、范式、ER图、逻辑设计、物理设计、约束的使用；事务处理：ACID属性、事务在程序中的使用方法、并发控制、日志、恢复；数据库的基本工作原理：数据的存储方式、索引、查询的执行方式、查询优化；数据库的辅助工具：存储过程、触发器、软件访问数据库的方式（ODBC）。</p><p>参考教材：王珊、萨师煊，《数据库系统概论》第五版，高等教育出版社，2014年（第1-11章） </p><h3 id="3）操作系统："><a href="#3）操作系统：" class="headerlink" title="3）操作系统："></a>3）操作系统：</h3><p>系统调用概念与机制、常用文件与进程相关的系统调用（POSIX）、操作系统结构、微内核、虚拟机、单道程序、多道程序、运行态、就绪态、阻塞态、新建态、僵死态、进程、进程模型、线程、线程模型、进程控制块 (PCB)、陷入、抢占、FCFS进程调度、时间片轮转调度、优先级调度、多重队列调度、最短进程优先调度、两级调度、同步、互斥竞争条件、临界区、忙等算法、锁变量、原子操作、信号量、管程、消息、饿死、经典IPC问题、两阶段加锁、I&#x2F;O 的各种控制方式、设备驱动程序、SPOOLing、死锁、死锁预防、死锁检测、死锁避免、银行家算法、RAM盘、磁盘、磁盘调度算法、时钟、终端设备、虚拟存储器、地址重定位、地址映射、逻辑地址、物理地址、固定分区、可变分区（动态分区）、交换、内碎片、外碎片、首次适配法、下次适配法、最佳适配法、最差适配法、分页、分段、页表、页表项、虚页、页框、多级页表、TLBs，翻译后援存储器（快表）、逆向页表、最近未使用页面替换算法（NRU）、先进先出页面替换算法（FIFO）、第二次机会页面替换算法、时钟页面替换算法、最久未使用页面替换算法（LRU）、软件模拟LRU算法 （NFU）、老化算法、Belady异常、系统抖动、工作集模型、工作集、文件系统、文件、目录文件、字符设备文件、块设备文件、硬链接、符号链接、目录项、i-node、超级块、打开文件表、文件系统安装、块高速缓存、文件系统的性能、一致性检查、文件系统安全性与保护机制。</p><p> 参考教材：[荷] Andrew S. Tanenbaum &#x2F; [荷] Herbert Bos著，陈向群 &#x2F; 马洪兵等译， 《现代操作系统（原书第4版）》机械工业出版社，2017 </p><h3 id="4）概率论与数理统计初步："><a href="#4）概率论与数理统计初步：" class="headerlink" title="4）概率论与数理统计初步："></a>4）概率论与数理统计初步：</h3><p>样本空间与概率的基本概念：概率模型、条件概率基本概念、全概率定理和贝叶斯准则及它们的应用、独立性；离散随机变量，概率质量函数（分布列）的基本概念、常用离散概率分布（如伯努利分布、二项分布、几何分布、泊松分布等）、随机变量的函数、期望、均值与方差、常用离散概率分布的期望与方差计算和结论、多个随机变量的联合分布、事件条件下的随机变量与随机变量取特定值条件下的随机变量、条件期望、随机变量与事件的独立性、随机变量之间的独立性、多个随机变量的相互独立性；连续随机变量：连续随机变量、概率密度函数、累积分布函数、正态分布、多个随机变量的联合概率密度、连续随机变量的条件和独立性、连续贝叶斯准则及其应用；随机变量函数：随机变量函数的概念和其PDF计算方法、卷积的概念和计算方法、协方差和相关系数、条件期望和条件方差及其在估计中的应用；极限定理：马尔可夫和切比雪夫不等式、弱大数定理和依概率收敛、中心极限定理及其应用、强大数定理和以概率1收敛；随机过程初步：伯努利过程、泊松过程、离散时间的马尔可夫链；统计推断初步：贝叶斯统计推断的概念、点估计、贝叶斯最小均方估计、经典参数估计、假设检验、显著性检验。</p><p>参考教材：Dimitri P. Bertsekas, John N. Tsitsiklis著，郑忠国，童行伟译.《概率导论（第2版，修订版）》. 人民邮电出版社. 2016 （第1-9章）</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>1、<a href="https://yjszs.ecnu.edu.cn/system/sscsfwlist.asp">硕士研究生招生考试科目初试范围一览(仅供参考)</a></p><p>2、<a href="https://yz.chsi.com.cn/">中国研究生招生信息网</a></p><p>3、<a href="https://yjszs.ecnu.edu.cn/index.asp">华东师范大学研究生招生信息网</a></p><p>4、<a href="https://souky.eol.cn/">研究生招生报名查询系统</a></p><p>5、<a href="http://ecnu.fanya.chaoxing.com/portal">华东师范大学网络教学平台</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#</title>
    <link href="/2020/11/05/languageC/"/>
    <url>/2020/11/05/languageC/</url>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>override(重写):与父类函数特征（函数名、参数类型与个数）相同</p><p>overload(重载):同一个类中的方法名相同，但函数特征不同，可省略</p><p>new(overwrite覆写):与父类中同名的方法，也称为覆盖，覆盖不会改变父类方法的功能。</p><h2 id="delegate委托"><a href="#delegate委托" class="headerlink" title="delegate委托"></a>delegate委托</h2><p>[^注释1]<br><strong>委托，可以将方法当作参数使用</strong><br>可以增加方法的复用性，帮助程序解耦</p><h2 id="Struct声明-VS-Class声明"><a href="#Struct声明-VS-Class声明" class="headerlink" title="Struct声明 VS Class声明"></a>Struct声明 VS Class声明</h2><p>Class 声明一个引用类型<br>Struct 声明一个值类型</p><p>Class 实体的赋值，是把地址赋值给了其他对象（任意对象被修改就改变了该地址下的内容）<br>Struct 实体的赋值，只是把实际值拷贝了一份放到新的地址下</p><p>[^注释2]</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>方法的简化写法,可以直接用于 list,array 等集合中</p><pre><code class="hljs C"><span class="hljs-comment">//定义一个lambda对象</span><span class="hljs-comment">//有返回值的用Func&lt;&gt;</span>Func&lt;<span class="hljs-built_in">string</span>&gt; fnc2 = () =&gt;  <span class="hljs-string">&quot;你好&quot;</span>;  <span class="hljs-comment">//无参数</span>Func&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; fnc1 = (x, y) =&gt; x == y;  <span class="hljs-comment">//有两个参数，最后一个是返回值类型</span><span class="hljs-comment">//无返回值的用Action</span>Action callback = () =&gt;  Console.WriteLine();  <span class="hljs-comment">//无参数</span>Action&lt;<span class="hljs-built_in">string</span>&gt; callback = hha =&gt;   <span class="hljs-comment">//有一个参数</span>&#123;Console.WriteLine(hha);Console.ReadKey();&#125;;</code></pre><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p>[^注释1]： <a href="https://www.cnblogs.com/zcqiand/p/13656161.html">委托，事件和Lambda表达式</a><br>[^注释2]： <a href="https://www.cnblogs.com/jjg0519/p/10341010.html">C#中 struct 和 class 的区别详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dom指令</title>
    <link href="/2020/09/22/Dom/"/>
    <url>/2020/09/22/Dom/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><table><thead><tr><th align="left">CODE</th><th align="left">MEAN</th></tr></thead><tbody><tr><td align="left">netstat -aon|findstr “9050</td><td align="left">&#x2F;&#x2F;查看port是否被占用</td></tr><tr><td align="left">netstat -ano</td><td align="left">&#x2F;&#x2F;查看系统正在使用的port</td></tr></tbody></table><h2 id="通信相关"><a href="#通信相关" class="headerlink" title="通信相关"></a>通信相关</h2><table><thead><tr><th>CODE</th><th>MEAN</th></tr></thead><tbody><tr><td>telnet   [IP]</td><td></td></tr><tr><td>ping  [IP]  [port]</td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>promise</title>
    <link href="/2020/09/18/promise/"/>
    <url>/2020/09/18/promise/</url>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>js中具有嵌套关系的ajax异步操作代码过于冗长，使用promise可以用简洁的方式呈现异步操作。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">TestFnc</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;    <span class="hljs-comment">//resolve()返回正常值</span>    <span class="hljs-comment">//reject()返回异常值</span>&#125;)</code></pre><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><p>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些学习遇到的问题</title>
    <link href="/2020/09/17/Question/"/>
    <url>/2020/09/17/Question/</url>
    
    <content type="html"><![CDATA[<h3 id="1、JS相关"><a href="#1、JS相关" class="headerlink" title="1、JS相关"></a>1、JS相关</h3><h4 id="Q-如何对promise中的方法添加监听事件"><a href="#Q-如何对promise中的方法添加监听事件" class="headerlink" title="Q:如何对promise中的方法添加监听事件"></a>Q:如何对promise中的方法添加监听事件</h4><blockquote></blockquote><h4 id="Q-Ajax"><a href="#Q-Ajax" class="headerlink" title="Q:Ajax"></a>Q:Ajax</h4><blockquote></blockquote><h3 id="2-HTTP相关问题"><a href="#2-HTTP相关问题" class="headerlink" title="2.HTTP相关问题"></a>2.HTTP相关问题</h3><h4 id="Q-Cookie-Session-token"><a href="#Q-Cookie-Session-token" class="headerlink" title="Q:Cookie,Session,token"></a>Q:Cookie,Session,token</h4><blockquote></blockquote><h4 id="Q-网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js-怎么处理"><a href="#Q-网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js-怎么处理" class="headerlink" title="Q:网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js,怎么处理"></a>Q:网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js,怎么处理</h4><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36820717/article/details/81663351">https://blog.csdn.net/qq_36820717/article/details/81663351</a></p><p>给js&#x2F;css文件设置版本号，并动态获取版本号，以确保每次更新js&#x2F;css内容</p></blockquote><h3 id="3-C-相关"><a href="#3-C-相关" class="headerlink" title="3.C#相关"></a>3.C#相关</h3><h4 id="Q-什么是Interface"><a href="#Q-什么是Interface" class="headerlink" title="Q:什么是Interface"></a>Q:什么是Interface</h4><blockquote></blockquote><h4 id="Q-委托"><a href="#Q-委托" class="headerlink" title="Q:委托"></a>Q:委托</h4><blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/2020/08/20/javascript/"/>
    <url>/2020/08/20/javascript/</url>
    
    <content type="html"><![CDATA[<h3 id="基础知识javascript原生方法"><a href="#基础知识javascript原生方法" class="headerlink" title="基础知识javascript原生方法"></a>基础知识javascript原生方法</h3><h4 id="判断数组是否包含某个元素：indexOf"><a href="#判断数组是否包含某个元素：indexOf" class="headerlink" title="判断数组是否包含某个元素：indexOf"></a>判断数组是否包含某个元素：indexOf</h4><h4 id="添加Dom元素"><a href="#添加Dom元素" class="headerlink" title="添加Dom元素"></a>添加Dom元素</h4><pre><code class="hljs javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showmessage</span>(<span class="hljs-params">msg</span>)&#123;    <span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;logdebug&#x27;</span>);    <span class="hljs-keyword">if</span>(!log)&#123;        <span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);        log.<span class="hljs-property">id</span>=<span class="hljs-string">&#x27;logdebug&#x27;</span>;        log.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&#x27;&lt;h2&gt;Log Debug&lt;/h2&gt;&#x27;</span>;        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(log);    &#125;    <span class="hljs-keyword">var</span> pre = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;pre&#x27;</span>);    <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(msg);    pre.<span class="hljs-title function_">appendChild</span>(text);    log.<span class="hljs-title function_">appendChild</span>(pre);&#125;</code></pre><h4 id="给元素添加属性"><a href="#给元素添加属性" class="headerlink" title="给元素添加属性"></a>给元素添加属性</h4><pre><code class="hljs javascript"><span class="hljs-comment">//添加原始属性</span>dom.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;dom.<span class="hljs-property">style</span>.<span class="hljs-property">visiblity</span> = <span class="hljs-string">&#x27;hidden&#x27;</span>;<span class="hljs-comment">//添加自定义css样式</span><span class="hljs-keyword">if</span>(!dom.<span class="hljs-property">className</span>) dom.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;mystyle&#x27;</span>;<span class="hljs-keyword">else</span> dom.<span class="hljs-property">className</span> += <span class="hljs-string">&#x27;mystyle&#x27;</span>;</code></pre><h4 id="给元素注册事件"><a href="#给元素注册事件" class="headerlink" title="给元素注册事件"></a>给元素注册事件</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>dom.addEventListener</td><td>给元素注册事件，且注册的事件按注册顺序依次触发</td></tr><tr><td>dom.attachEvent</td><td>给元素注册事件，不按注册顺序触发</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(image.<span class="hljs-property">addEventListener</span>)    image.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,myfunction,params);<span class="hljs-keyword">else</span>    image.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>,myfunction);  <span class="hljs-comment">//兼容IE8及之前的版本</span></code></pre><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><pre><code class="hljs javascript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;自定义报错的内容&quot;</span>);<span class="hljs-comment">//异常可以使用try,catch捕捉</span><span class="hljs-keyword">try</span>&#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;自定义报错的内容&quot;</span>);&#125;<span class="hljs-keyword">catch</span>(e)&#123;    <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Error</span>)&#123;        <span class="hljs-title function_">alert</span>(e.<span class="hljs-property">name</span> +<span class="hljs-string">&quot;:&quot;</span>+e.<span class="hljs-property">message</span>);    &#125;&#125;</code></pre><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><pre><code class="hljs javascript"><span class="hljs-comment">//匿名函数</span><span class="hljs-comment">//在匿名函数后面加(),可以直接执行。</span><span class="hljs-comment">//可以和各个运算符一起使用</span><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hahah:&quot;</span> + <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;        <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;你好啊!&quot;</span>)&#125;() );&#125;;<span class="hljs-title function_">a</span>();</code></pre><h5 id="Function-apply"><a href="#Function-apply" class="headerlink" title="Function.apply()"></a>Function.apply()</h5><p>将test()作为people对象的一个方法<br><strong>apply(object,[array]) 参数一定以数组的形式传入，不然会报TypeError的错误</strong></p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">args</span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);&#125;<span class="hljs-keyword">var</span> people = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;lupei&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">12</span>&#125;;test.<span class="hljs-title function_">apply</span>(people,[args]);&gt;lupei</code></pre><h4 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>eval()</td><td>执行字符串中的javascript代码</td></tr><tr><td>Infinity</td><td>表示正无穷大的数:typepof(Infinity)&#x3D;number</td></tr><tr><td>NaN</td><td>表示不是数值的值:<strong>typepof(NaN)&#x3D;number</strong></td></tr><tr><td>null</td><td>表示不是数值的值:<strong>typepof(null)&#x3D;object;isNaN(null)&#x3D;false</strong></td></tr><tr><td>undefined</td><td>表示未定义的数:typepof(undefined)&#x3D;undefined</td></tr><tr><td>isFinite()</td><td>判断数值是否有限</td></tr><tr><td>isNaN()</td><td>判断是否非数值</td></tr></tbody></table><h3 id="jQuery以及一些新的方法"><a href="#jQuery以及一些新的方法" class="headerlink" title="jQuery以及一些新的方法"></a>jQuery以及一些新的方法</h3><h4 id="注册jQuery对象"><a href="#注册jQuery对象" class="headerlink" title="注册jQuery对象"></a>注册jQuery对象</h4><pre><code class="hljs javascript"><span class="hljs-comment">//一个参数</span>$(<span class="hljs-string">&#x27;#elementID&#x27;</span>)   <span class="hljs-comment">//返回id为elementID  一个元素</span>$(<span class="hljs-string">&#x27;.elementCSS&#x27;</span>)  <span class="hljs-comment">//返回class为elementID  一组元素</span>$(<span class="hljs-string">&#x27;input :text&#x27;</span>)  <span class="hljs-comment">//返回类型为text的  一组input元素</span>$(<span class="hljs-string">&quot;ul li:first&quot;</span>)  <span class="hljs-comment">//ul中的第一个li</span>$(<span class="hljs-string">&quot;#log span&quot;</span>)  <span class="hljs-comment">//id=&#x27;log&#x27;的后代元素(包含子，孙子，重孙……元素)中所有的&lt;span&gt;</span>$(<span class="hljs-string">&quot;#log&gt;span&quot;</span>)  <span class="hljs-comment">//id=&#x27;log&#x27;的子元素(内部第一层)中所有的&lt;span&gt;</span>$(<span class="hljs-string">&quot;#log span&quot;</span>)  <span class="hljs-comment">//id=&#x27;log&#x27;的后代元素中所有的&lt;span&gt;</span>$(<span class="hljs-string">&#x27;*[name=&quot;x&quot;]&#x27;</span>)  <span class="hljs-comment">//所有含name=&quot;x&quot;属性的元素</span><span class="hljs-comment">//两个参数</span>$(<span class="hljs-string">&#x27;&lt;img/&gt;&#x27;</span>,       <span class="hljs-comment">//创建一个img元素，并附带这些属性</span>&#123;    <span class="hljs-attr">src</span>:url,    <span class="hljs-attr">css</span>:&#123;<span class="hljs-string">&#x27;border&#x27;</span>: <span class="hljs-string">&#x27;blue solid 15px&#x27;</span>&#125;,       <span class="hljs-attr">text</span>:,    <span class="hljs-attr">val</span>:,    <span class="hljs-attr">html</span>:,    <span class="hljs-attr">width</span>:,    <span class="hljs-attr">height</span>:,    <span class="hljs-attr">offset</span>:,    <span class="hljs-attr">data</span>:,     <span class="hljs-attr">click</span>:<span class="hljs-title function_">myfunction</span>(),&#125;)$(<span class="hljs-string">&#x27;.elementCSS&#x27;</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>) <span class="hljs-comment">//查询出document.body中所有css=&#x27;elementCSS&#x27;的元素。</span></code></pre><h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="函数与方法-1"><a href="#函数与方法-1" class="headerlink" title="函数与方法"></a>函数与方法</h4><p>jq中通常函数和方法都是成对出现的，用法参考each</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>$.each(myele,f1)</td><td>each函数：对ele中的每个元素都调用一次f1方法</td></tr><tr><td>$myele.each(f1(index));</td><td>each方法：作用同上,在方法中可以直接使用$(this)表示当前对象，或者使用第二个参数</td></tr><tr><td><strong>forEach()与each()的区别</strong></td><td>each()的遍历，如果有一个元素返回false,则结束遍历,forEach不会;each()类似于Promise,可用于链式调用</td></tr><tr><td>$myele.map(f1(index,this))</td><td>作用同上,返回一组对象作为方法运行的结果</td></tr><tr><td><strong>each,foreach,map的差别和使用场景</strong></td><td>–</td></tr><tr><td>$myele.width()</td><td>设置和获取对象的宽度</td></tr><tr><td>$myele.height()</td><td>设置和获取对象的高度</td></tr><tr><td>$myele.scrollTop()</td><td>设置和获取竖向滚动条的位置，<strong>不接受函数作为参数</strong></td></tr><tr><td>$myele.scrollLeft()</td><td>设置和获取横向滚动条的位置，<strong>不接受函数作为参数</strong></td></tr><tr><td>$myele.data(‘mydata’)</td><td>获取 <code>&lt;div data-mydata=&quot;我的数据&quot;&gt;&lt;/div&gt;</code>中的data标签的值，第一个参数，指定data的对象<strong>不接受函数作为参数</strong>；设置第二个参数可以给该对象赋值</td></tr><tr><td>$myele.reomveData(‘x’)</td><td>移除 <code>&lt;div data-x=&quot;我的数据&quot;&gt;&lt;/div&gt;</code>中的data-x标签，不赋值则移除所有data标签</td></tr></tbody></table><h4 id="插入和替换"><a href="#插入和替换" class="headerlink" title="插入和替换"></a>插入和替换</h4><p>当插入的对象已经是页面中的一部分时，此时如果只插入一个位置，那么会直接移动这个对象，而不会执行复制并添加的动作，执行复制动作，<code>$(&#39;追加的内容&#39;).clone().appendTo($myele)</code></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>$myele.append(‘追加的内容’)</td><td>在对象内，尾部 追加内容;对调主宾的用法：appendTo</td></tr><tr><td>$myele.prepend(‘追加的内容’)</td><td>在对象内，头部 追加内容;对调主宾的用法：prependTo</td></tr><tr><td>$myele.before(‘追加的内容’)</td><td>在对象外，前面 追加内容;对调主宾的用法：insertBefore</td></tr><tr><td>$myele.after(‘追加的内容’)</td><td>在对象外，后面 追加内容;对调主宾的用法：insertAfter</td></tr><tr><td>$(‘hr’).replaceWith(‘<code>&lt;br/&gt;</code>‘)</td><td>将<code>&#39;&lt;hr/&gt;&#39;</code>替换成<code>&lt;br/&gt;</code>;对调主宾的用法：replaceAll</td></tr></tbody></table><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>$myele.empty()</td><td>删除元素内部的所有子节点</td></tr><tr><td>$myele.remove()</td><td>删除元素本身以及内部的所有子节点，包括绑定在元素上的事件处理程序和数据</td></tr><tr><td>$myele.detach</td><td>类似remove()，但不移除事件处理程序和数据</td></tr><tr><td>filter()</td><td>从选择器中进行筛选，而不会在界面上进行处理</td></tr></tbody></table><h4 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h4><p><b style="color:red">注意：某些方法，在文档树上会向上冒泡</b></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>blur()</td><td>失焦 <strong>不支持冒泡</strong></td></tr><tr><td>click()</td><td>点击</td></tr><tr><td>change()</td><td></td></tr><tr><td>dbclick()</td><td></td></tr><tr><td>error()</td><td></td></tr><tr><td>focus()</td><td>获得焦点 <strong>不支持冒泡</strong></td></tr><tr><td>focusin()</td><td><strong>支持冒泡</strong></td></tr><tr><td>focusout()</td><td><strong>支持冒泡</strong></td></tr><tr><td>keydown()</td><td>键盘按下 <strong>支持冒泡</strong></td></tr><tr><td>keypress()</td><td>按键并产生了可打印字符</td></tr><tr><td>keyup()</td><td>键盘抬起 <strong>支持冒泡</strong></td></tr><tr><td>load()</td><td>内容加载完成后触发</td></tr><tr><td>mousedown()</td><td>按下鼠标键</td></tr><tr><td>mouseenter()</td><td>鼠标悬停在某个元素上 <strong>不支持冒泡</strong></td></tr><tr><td>mouseleave()</td><td>鼠标从某个悬停元素上移出 <strong>不支持冒泡</strong></td></tr><tr><td>mousemove()</td><td>移动鼠标就会触发，不应该在里面触发计算密集形任务</td></tr><tr><td>mouseover()</td><td>鼠标悬停在某个元素上 <strong>支持冒泡</strong></td></tr><tr><td>mouseout()</td><td>鼠标从某个悬停元素上移出 <strong>支持冒泡</strong></td></tr><tr><td>mouseup()</td><td>鼠标键抬起 <strong>mousedown和mouseup之后还会触发click事件</strong></td></tr><tr><td>resize()</td><td>调整界面大小</td></tr><tr><td>scroll()</td><td>鼠标滚轮滑动</td></tr><tr><td>select()</td><td></td></tr><tr><td>submit()</td><td></td></tr><tr><td>unload()</td><td>从一个界面跳转到另一界面时触发</td></tr></tbody></table><h4 id="js原生变成jq对象"><a href="#js原生变成jq对象" class="headerlink" title="js原生变成jq对象"></a>js原生变成jq对象</h4><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showmessage</span>(<span class="hljs-params">msg</span>)&#123;    <span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;logdebug&#x27;</span>);    <span class="hljs-keyword">if</span>(!log)&#123;        <span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);        log.<span class="hljs-property">id</span>=<span class="hljs-string">&#x27;logdebug&#x27;</span>;        log.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&#x27;&lt;h2&gt;Log Debug&lt;/h2&gt;&#x27;</span>;        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(log);    &#125;    <span class="hljs-keyword">var</span> pre = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;pre&#x27;</span>);    <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(msg);    <span class="hljs-keyword">var</span> img = $(<span class="hljs-string">&#x27;&lt;input/&gt;&#x27;</span>,       <span class="hljs-comment">//创建一个img元素，并附带这些属性</span>    &#123;        <span class="hljs-attr">value</span>:<span class="hljs-string">&quot;hahaha&quot;</span>,        <span class="hljs-attr">src</span>:<span class="hljs-string">&#x27;mypic.png&#x27;</span>,        <span class="hljs-attr">css</span>:&#123;<span class="hljs-string">&#x27;border&#x27;</span>: <span class="hljs-string">&#x27;blue solid 15px&#x27;</span>&#125;,                       &#125;)    <span class="hljs-comment">//用$()将js对象变成jquery对象</span>    $(pre).<span class="hljs-title function_">append</span>(text);    $(pre).<span class="hljs-title function_">append</span>(img);    $(log).<span class="hljs-title function_">append</span>(pre);&#125;</code></pre><h3 id="知识提升"><a href="#知识提升" class="headerlink" title="知识提升"></a>知识提升</h3><p>1、a标签不跳转<br>2、js直接给input元素赋值不能触发onchange事件：</p><pre><code class="hljs javascript">使用trigger方法，手动触发 $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;focus&quot;</span>);  <span class="hljs-comment">//触发focus的事件，也实际执行了focus方法，input获得焦点</span> $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">triggerHandler</span>( <span class="hljs-string">&quot;focus&quot;</span> );  <span class="hljs-comment">//触发focus的事件，不执行focus方法，input不获得焦点</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/zhaoxiaoying/p/9031890.html">1、const,var,let的区别</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2020/08/19/ajax/"/>
    <url>/2020/08/19/ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><h3 id="1、ajax基本用法"><a href="#1、ajax基本用法" class="headerlink" title="1、ajax基本用法"></a>1、ajax基本用法</h3><pre><code class="hljs javascript">.<span class="hljs-title function_">ajaxSend</span>( <span class="hljs-title class_">Event</span> event, jqXHR jqXHR, <span class="hljs-title class_">PlainObject</span> ajaxOptions)   <span class="hljs-comment">//在ajax request发送前触发</span>.<span class="hljs-title function_">ajaxStart</span>()       <span class="hljs-comment">//when the first Ajax request begins</span>.<span class="hljs-title function_">ajaxSuccess</span>(<span class="hljs-title class_">Event</span> event, jqXHR jqXHR, <span class="hljs-title class_">PlainObject</span> ajaxOptions, <span class="hljs-title class_">PlainObject</span> data)     <span class="hljs-comment">//whenever an Ajax request completes successfully</span>.<span class="hljs-title function_">ajaxComplete</span>(<span class="hljs-title class_">Event</span> event, jqXHR jqXHR, <span class="hljs-title class_">PlainObject</span> ajaxOptions)  <span class="hljs-comment">//ajax完成时触发</span>.<span class="hljs-title function_">ajaxError</span>( <span class="hljs-title class_">Event</span> event, jqXHR jqXHR, <span class="hljs-title class_">PlainObject</span> ajaxSettings, <span class="hljs-title class_">String</span> thrownError ) <span class="hljs-comment">//ajax完成，但是返回码不是200时触发</span>.<span class="hljs-title function_">ajaxStop</span>()  <span class="hljs-comment">//when all Ajax requests have completed</span></code></pre><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.e-pm.com.cn/api/user/Adduser&quot;</span>,    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST/GET&quot;</span>,         <span class="hljs-comment">//jquery-1.9.0及之后改为method</span>    <span class="hljs-attr">cache</span>:<span class="hljs-literal">false</span>,              <span class="hljs-comment">//只在Get方法中生效 It works by appending &quot;_=&#123;timestamp&#125;&quot; to the GET parameters</span>    <span class="hljs-attr">traditional</span>: <span class="hljs-literal">true</span>,        <span class="hljs-comment">//是否传递数组类型的参数</span>    <span class="hljs-attr">crossDomain</span>:<span class="hljs-literal">false</span>,         <span class="hljs-comment">//是否跨域  crossDomain (default: false)</span>    <span class="hljs-attr">asycn</span>: <span class="hljs-literal">true</span>,             <span class="hljs-comment">//是否异步  async (default: true)</span>    <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,      <span class="hljs-comment">//发送的文件类型 (default: &#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;)</span>    <span class="hljs-attr">processData</span>:<span class="hljs-literal">true</span>         <span class="hljs-comment">//通过contentType的属性将data中的内容转义成string(default:true) If you want to send a DOMDocument, or other non-processed data, set this option to false.</span>    <span class="hljs-attr">data</span>:&#123;&#125;,                  <span class="hljs-comment">//传递的参数</span>    <span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;json&#x27;</span>,          <span class="hljs-comment">//服务器返回的文件类型（&quot;xml&quot;,&quot;json&quot;返回的数据不是json格式或者&#123;&#125;/null都会报错,&quot;text&quot;,&quot;script&quot;）</span>    <span class="hljs-attr">converters</span>:<span class="hljs-string">&quot;* text&quot;</span>,      <span class="hljs-comment">//修改返回参数的类型 (default: &#123;&quot;* text&quot;: window.String, &quot;text html&quot;: true, &quot;text json&quot;: jQuery.parseJSON, &quot;text xml&quot;: jQuery.parseXML&#125;)</span>    <span class="hljs-attr">dataFilter</span>:<span class="hljs-title class_">Function</span>( <span class="hljs-title class_">String</span> data, <span class="hljs-title class_">String</span> type )&#123;        <span class="hljs-comment">//data:服务器返回的参数，type:dataType中定义的参数</span>        <span class="hljs-comment">//对返回值进行预处理，作用于Success之前,返回的结果共后续的方法使用</span>    &#125;,    <span class="hljs-attr">statusCode</span>: &#123;        <span class="hljs-number">404</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;page not found&quot;</span> );        &#125;    &#125;    <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res,status,xhr</span>)&#123;    <span class="hljs-comment">//success funciton</span>    &#125;,    <span class="hljs-attr">fail</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;    <span class="hljs-comment">//fail funcion</span>    &#125;,    <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">err,status,xhr</span>)&#123;            &#125;,    <span class="hljs-attr">complete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"> jqXHR jqXHR, <span class="hljs-built_in">String</span> textStatus </span>)&#123;    &#125;,&#125;);<span class="hljs-comment">//ajaxSetup:ajax配置。此后，每一个ajax方法都将使用setup中的参数。</span><span class="hljs-comment">//ajax中的所有参数都可以配置到setup中，注意，该方法全局生效。</span>$.<span class="hljs-title function_">ajaxSetup</span>(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/xmlhttp/&quot;</span>,  <span class="hljs-attr">global</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>&#125;);$.<span class="hljs-title function_">ajax</span>(&#123;     <span class="hljs-comment">// url not set here; uses /xmlhttp/</span>    <span class="hljs-attr">data</span>: myData &#125;);</code></pre><h3 id="2、ajax上传文件"><a href="#2、ajax上传文件" class="headerlink" title="2、ajax上传文件"></a>2、ajax上传文件</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;eq-img&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;eq-img&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;eq-img-input&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;selectImage(this)&quot;</span> /&gt;</span></code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectImage</span>(<span class="hljs-params">file</span>) &#123;    <span class="hljs-keyword">var</span> item = file.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];    <span class="hljs-keyword">var</span> index = item.<span class="hljs-property">name</span>.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>;    <span class="hljs-keyword">var</span> type = item.<span class="hljs-property">name</span>.<span class="hljs-title function_">substring</span>(index).<span class="hljs-title function_">toLowerCase</span>();    <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&quot;jpg&quot;</span> &amp;&amp; type !== <span class="hljs-string">&quot;png&quot;</span>)&#123;        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;只能上传jpg和png格式的图片！&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">var</span> <span class="hljs-title class_">HTMLimgID</span> = $(file)[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;-input&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-keyword">if</span> (!file.<span class="hljs-property">files</span> || !file.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]) &#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();        reader.<span class="hljs-title function_">readAsDataURL</span>(file.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);        reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) &#123;            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-title class_">HTMLimgID</span>).<span class="hljs-property">src</span> = evt.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;  <span class="hljs-comment">//在img中加载图片</span>            <span class="hljs-comment">//把文件加载到form里，利用form上传</span>            <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();            formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;name&#x27;</span>, file.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//上传的应该是一个file对象，name是服务器端需要的对象名</span>            $.<span class="hljs-title function_">ajax</span>(&#123;                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.e-pm.com.cn/api/image/SaveImages2&quot;</span>,                <span class="hljs-attr">data</span>: formData,                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,                <span class="hljs-attr">cache</span>:<span class="hljs-literal">false</span>,                <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;                    <span class="hljs-comment">//success funciton</span>                &#125;,                <span class="hljs-attr">fail</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;                    <span class="hljs-comment">//fail funcion</span>                &#125;            &#125;);        &#125;    &#125;&#125;</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://api.jquery.com/category/ajax/">ajax库</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Learning</title>
    <link href="/2020/08/11/mysql/"/>
    <url>/2020/08/11/mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="一、基础用法"><a href="#一、基础用法" class="headerlink" title="一、基础用法"></a>一、基础用法</h3><h4 id="1-增、删、改、查"><a href="#1-增、删、改、查" class="headerlink" title="1.增、删、改、查"></a>1.增、删、改、查</h4><h5 id="查询–Select"><a href="#查询–Select" class="headerlink" title="查询–Select"></a>查询–Select</h5><pre><code class="hljs mysql">Select * from [Table]                       //查询整个表select * from [Table] where [Project]=&#x27;A&#x27; and [Equipment Number]=&#x27;b&#x27; and ……   //查询Project下内容为A的数据select distinct program FROM A            //相同的program会被合并SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2</code></pre><h5 id="增加–Insert"><a href="#增加–Insert" class="headerlink" title="增加–Insert"></a>增加–Insert</h5><pre><code class="hljs mysql">Insert into [Table]([表头]，[表头]，[表头]) values(&#x27;值&#x27;,&#x27;值&#x27;,&#x27;值&#x27;)，(&#x27;值&#x27;,&#x27;值&#x27;,&#x27;值&#x27;)，(&#x27;值&#x27;,&#x27;值&#x27;,&#x27;值&#x27;)    Olecmd.ExecuteNonQuery();//写入表</code></pre><h5 id="修改–Update"><a href="#修改–Update" class="headerlink" title="修改–Update"></a>修改–Update</h5><pre><code class="hljs mysql">update [Table] set [列]=&#x27;value&#x27; where [Project]=&#x27;&quot; + comboBox1.Text + &quot;&#x27;and [Equipment Name]=&#x27;&quot; + comboBox2.Text + &quot;&#x27;and [Model]=&#x27;&quot; + comboBox3.Text + &quot;&#x27;&quot;</code></pre><h5 id="删除–Delete"><a href="#删除–Delete" class="headerlink" title="删除–Delete"></a>删除–Delete</h5><pre><code class="hljs mysql">delete from [table] where……;delete from [table] limit num;  //删除固定几行</code></pre><h5 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h5><p>replace可以起到Insert和Update的效果，但是使用需要注意</p><h4 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2.数据库操作"></a>2.数据库操作</h4><h4 id="3-常见方法"><a href="#3-常见方法" class="headerlink" title="3.常见方法"></a>3.常见方法</h4><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><span class="hljs-keyword">desc</span>countsum<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">end</span><span class="hljs-keyword">having</span></code></pre><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4.实例"></a>4.实例</h4><h5 id="查询每组数据的前几个"><a href="#查询每组数据的前几个" class="headerlink" title="查询每组数据的前几个"></a>查询每组数据的前几个</h5><p>（例如：每班前三名的同学）</p><p>查询每个人最近20次点检用时：</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.DRI,c.pmTime,c.Date<span class="hljs-keyword">FROM</span> pmhistory c<span class="hljs-keyword">WHERE</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> ID <span class="hljs-keyword">FROM</span> pmhistory a <span class="hljs-keyword">WHERE</span> a.DRI <span class="hljs-operator">=</span> c.DRI <span class="hljs-keyword">AND</span> a.Date <span class="hljs-operator">&gt;=</span> c.Date) <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c.DRI,c.Date <span class="hljs-keyword">desc</span></code></pre><h3 id="二、Mysql进阶"><a href="#二、Mysql进阶" class="headerlink" title="二、Mysql进阶"></a>二、Mysql进阶</h3><h4 id="1-EXPLAIN的使用与分析"><a href="#1-EXPLAIN的使用与分析" class="headerlink" title="1.EXPLAIN的使用与分析"></a>1.EXPLAIN的使用与分析</h4><h4 id="2-Case-When"><a href="#2-Case-When" class="headerlink" title="2.Case When"></a>2.Case When</h4><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Fixture_ID,<span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> `Status` <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;Backend ME&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span> )<span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Backend ME&#x27;</span>,<span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> `Status` <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;Production Line&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Production Line&#x27;</span><span class="hljs-keyword">from</span> fixturelist <span class="hljs-keyword">where</span> Fixture_ID <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> fixture_id <span class="hljs-keyword">from</span> fixture <span class="hljs-keyword">where</span> Department<span class="hljs-operator">=</span><span class="hljs-string">&#x27;TE&#x27;</span> <span class="hljs-keyword">AND</span> Project<span class="hljs-operator">=</span>&quot;FATP Common&quot;)</code></pre><h4 id="3-时间比较"><a href="#3-时间比较" class="headerlink" title="3.时间比较"></a>3.时间比较</h4><p>now()函数返回的是当前时间的年月日时分秒，如：2008-12-29 16:25:46</p><p>CURDATE()函数返回的是年月日信息： 如：2008-12-29</p><p>CURTIME()函数返回的是当前时间的时分秒信息，如：16:25:46</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TIMESTAMPDIFF(<span class="hljs-keyword">MONTH</span>,<span class="hljs-string">&#x27;2012-10-01&#x27;</span>,<span class="hljs-string">&#x27;2013-01-13&#x27;</span>);  <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">Day</span><span class="hljs-keyword">select</span> DATEDIFF(<span class="hljs-string">&#x27;2013-01-13&#x27;</span>,<span class="hljs-string">&#x27;2012-10-01&#x27;</span>);</code></pre><h4 id="4-创建存储过程"><a href="#4-创建存储过程" class="headerlink" title="4.创建存储过程"></a>4.创建存储过程</h4><pre><code class="hljs sql">delimiter $<span class="hljs-keyword">create</span> <span class="hljs-keyword">PROCEDURE</span> Update_FxitureBinCount()<span class="hljs-keyword">BEGIN</span>    <span class="hljs-keyword">DECLARE</span>  FixtureID1  <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>); <span class="hljs-comment">-- FixtureID</span>    <span class="hljs-keyword">DECLARE</span>  Bin1  <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>); <span class="hljs-comment">-- Bin</span>    <span class="hljs-keyword">DECLARE</span>  BinQTY <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>);   <span class="hljs-comment">-- QTY</span>    <span class="hljs-comment">-- 遍历数据结束标志</span>    <span class="hljs-keyword">DECLARE</span> done <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">FALSE</span>;    <span class="hljs-comment">-- 游标</span>    <span class="hljs-keyword">DECLARE</span> cur_account <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">select</span> Fixture_ID,`Status` <span class="hljs-keyword">AS</span> BIN,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> QTY <span class="hljs-keyword">from</span> fixturelist <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Fixture_ID,`Status`;    <span class="hljs-comment">-- 将结束标志绑定到游标</span>    <span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">NOT</span> FOUND <span class="hljs-keyword">SET</span> done <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span>;    <span class="hljs-comment">-- 打开游标</span>    <span class="hljs-keyword">OPEN</span>  cur_account;         <span class="hljs-comment">-- 遍历</span>    read_loop: LOOP            <span class="hljs-comment">-- 取值 取多个字段</span>            <span class="hljs-keyword">FETCH</span>  NEXT <span class="hljs-keyword">from</span> cur_account <span class="hljs-keyword">INTO</span> FixtureID1,Bin1,BinQTY;            IF done <span class="hljs-keyword">THEN</span>                LEAVE read_loop;             <span class="hljs-keyword">END</span> IF;        <span class="hljs-comment">-- 你自己想做的操作</span>        <span class="hljs-keyword">UPDATE</span> fixturebin_count <span class="hljs-keyword">set</span> qty <span class="hljs-operator">=</span> BinQTY <span class="hljs-keyword">where</span> Fixture_ID<span class="hljs-operator">=</span>FixtureID1 <span class="hljs-keyword">and</span> bin<span class="hljs-operator">=</span>Bin1;    <span class="hljs-keyword">END</span> LOOP;    <span class="hljs-keyword">CLOSE</span> cur_account;<span class="hljs-keyword">END</span> $</code></pre><h4 id="5-根据特殊字符，将一行内容拆分为多行"><a href="#5-根据特殊字符，将一行内容拆分为多行" class="headerlink" title="5.根据特殊字符，将一行内容拆分为多行"></a>5.根据特殊字符，将一行内容拆分为多行</h4><pre><code class="hljs sql"><span class="hljs-comment">--使用 mysql.help_topic 库</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> substring_index(substring_index(a.column1,<span class="hljs-string">&#x27;,&#x27;</span>,b.help_topic_id<span class="hljs-operator">+</span><span class="hljs-number">1</span>),<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-number">-1</span>)<span class="hljs-keyword">from</span> table1 a <span class="hljs-keyword">join</span> mysql.help_topic b <span class="hljs-keyword">on</span> b.help_topic_id<span class="hljs-operator">&lt;</span>(length(a.column1)<span class="hljs-operator">-</span>LENGTH(REPLACE(a.column1,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))<span class="hljs-operator">+</span><span class="hljs-number">1</span>)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas Learning</title>
    <link href="/2020/07/30/canvas/"/>
    <url>/2020/07/30/canvas/</url>
    
    <content type="html"><![CDATA[<h2 id="Canvas的定义"><a href="#Canvas的定义" class="headerlink" title="Canvas的定义"></a>Canvas的定义</h2><p><span style="color:red">html属性中的width和height，不要使用css样式，因为这个属性除了定义画板大小，还定义了画板的分辨率</span></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid gray;margin:50px auto;display:block&quot;</span>&gt;</span>            当前浏览器不支持canvas(只有浏览器不支持canvas时才会显示这段话)/或者在js中判断canvas.getContext(&#x27;2d&#x27;)是否为空。        <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-comment">//canvas是基于状态来绘制的</span></span><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);</span><span class="language-javascript">                <span class="hljs-comment">//使用Context绘制</span></span><span class="language-javascript">                <span class="hljs-keyword">var</span> context=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><span class="language-javascript">            &#125;</span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="Canvas的用法"><a href="#Canvas的用法" class="headerlink" title="Canvas的用法"></a>Canvas的用法</h2><h3 id="1、常用方法"><a href="#1、常用方法" class="headerlink" title="1、常用方法"></a>1、常用方法</h3><p><span style="color:red">canvas是基于状态来绘制的</span></p><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><pre><code class="hljs javascript"><span class="hljs-comment">//js中定义画板的大小用width和height属性，</span>canvas.<span class="hljs-property">width</span>=<span class="hljs-number">1024</span>;canvas.<span class="hljs-property">height</span>=<span class="hljs-number">768</span>;<span class="hljs-comment">//2D绘图</span><span class="hljs-comment">//获取画板对象</span><span class="hljs-keyword">var</span> context=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);  <span class="hljs-comment">//2d画板</span><span class="hljs-comment">//绘图接口</span><span class="hljs-comment">//画板左上角为原点，向右X正，向下Y正</span>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);<span class="hljs-comment">//设置绘制范围 不一定要同时出现</span>context.<span class="hljs-title function_">beginPath</span>(); <span class="hljs-comment">//开始一个新的路径，beginPath + lineTo = moveTo</span>context.<span class="hljs-title function_">closePath</span>(); <span class="hljs-comment">//当绘制的图形不是闭合图形时，会自动闭合，对fill无效，可以避免线段宽度带来的间隙</span><span class="hljs-comment">//刷新画布内容</span>cxt.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-variable constant_">WINDOW_WIDTH</span>,<span class="hljs-variable constant_">WINDOW_HEIGHT</span>);  <span class="hljs-comment">//3D绘图</span><span class="hljs-keyword">var</span> context=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;3d&#x27;</span>);  <span class="hljs-comment">//3d画板</span><span class="hljs-comment">//点是否在画布内</span>context.<span class="hljs-title function_">isPointInPath</span>(x,y);<span class="hljs-comment">//添加事件</span>canvas.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mouseup&quot;</span>,<span class="hljs-keyword">function</span>);</code></pre><h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><pre><code class="hljs javascript"><span class="hljs-comment">//线条绘制</span><span class="hljs-comment">//设置画笔的属性</span>context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;context.<span class="hljs-property">lineCap</span> = <span class="hljs-string">&quot;butt&quot;</span>/<span class="hljs-string">&quot;round&quot;</span>/<span class="hljs-string">&quot;square&quot;</span> <span class="hljs-comment">//线条起始形状，默认，圆形，方形</span>context.<span class="hljs-property">lineJoin</span> = <span class="hljs-string">&quot;miter&quot;</span>/<span class="hljs-string">&quot;bevel&quot;</span>/<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-comment">//线条相交部分的效果 ，尖角（默认），平角，圆角</span>context.<span class="hljs-property">miterLimit</span> = <span class="hljs-number">10</span>(默认值); <span class="hljs-comment">//相交线段的内角与外角距离的最大像素差，一旦超过这个值，lineJoin默认bevel</span>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#ff0000&quot;</span>; <span class="hljs-comment">//支持css样式</span><span class="hljs-comment">//绘制线条</span>context.<span class="hljs-title function_">stroke</span>();  <span class="hljs-comment">//图形填充</span><span class="hljs-comment">//设置填充属性</span>context.<span class="hljs-property">fillStyle</span>= <span class="hljs-string">&quot;rgb(2,100,222)&quot;</span>;<span class="hljs-comment">//填充图形 （如果填充发生在绘制线条之后，会使线条的宽度发生变化。所以一般要先填充再绘线）</span>context.<span class="hljs-title function_">fill</span>();<span class="hljs-comment">//绘制矩形</span>context.<span class="hljs-title function_">rect</span>(x,y,width,height)<span class="hljs-comment">//规划矩形路线，需要使用stroke和fill来绘图，矩形的位置，宽高</span>context.<span class="hljs-title function_">strokeRect</span>(x,y,width,height)<span class="hljs-comment">//绘制矩形边框，使用的属性和stroke一样</span>context.<span class="hljs-title function_">fillRect</span>(x,y,width,height)<span class="hljs-comment">//绘制填充的矩形，使用的属性和fill一样</span><span class="hljs-comment">//绘制圆 </span><span class="hljs-comment">//(3点钟方向为0*pi/2*pi,6点钟方向0.5*pi,9点钟方向1*pi,12点钟方向1.5*pi)</span>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,<span class="hljs-literal">false</span>); <span class="hljs-comment">//圆心坐标(X,Y),半径，起始弧度，结束弧度，是否逆时针</span>context.<span class="hljs-title function_">actTo</span>(x1,y1,x2,y2,r); <span class="hljs-comment">//配合moveTo(x0,y0可以绘制半径为r,同时相切与直线(x0,y0)-(x1,y1)和直线(x1,y1)-(x2,y2)的弧线(x0,y0)-(x1,y1)部分可能会有直线；起始点是(x0,y0)，但结束点是圆弧与直线(x1,y1)-(x2,y2)的切点</span></code></pre><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><pre><code class="hljs javascript"><span class="hljs-comment">//二次曲线</span>context.<span class="hljs-title function_">moveTo</span>(x0,y0);context.<span class="hljs-title function_">quadraticCurveTo</span>(x1,y1,x2,y2); <span class="hljs-comment">// 绘制起始点为(x0,y0),控制点为(x1,y1),结束点为(x2,y2)的曲线</span><span class="hljs-comment">//三次曲线</span>context.<span class="hljs-title function_">moveTo</span>(x0,y0);context.<span class="hljs-title function_">bezierCurveTo</span>(x1,y1,x2,y2,x3,y3); <span class="hljs-comment">// 绘制起始点为(x0,y0),控制点为(x1,y1),(x2,y2),结束点为(x3,y3)的曲线</span></code></pre><h4 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h4><pre><code class="hljs javascript">context.<span class="hljs-title function_">translate</span>(x,y); <span class="hljs-comment">// 位移，位移的移动是叠加的，所以移动之后需要反向移回，或者使用save,restore</span>context.<span class="hljs-title function_">scale</span>(a,b); <span class="hljs-comment">//长宽，会放大图像的所有属性（起始点坐标，线宽,图形大小）</span>context.<span class="hljs-title function_">rotate</span>(deg); <span class="hljs-comment">//旋转</span>context.<span class="hljs-title function_">transform</span>(a,b,c,d,e,f);<span class="hljs-comment">//水平缩放，水平倾斜，垂直倾斜，垂直缩放，水平位移，垂直位移transform和位移类似，是叠加的，可以使用setTransform，将他设成初始值</span>context.<span class="hljs-title function_">setTransform</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//不考虑之前所有的transform</span><span class="hljs-comment">//这两者应该成对出现,进行图型变换前最好先保存。</span>context.<span class="hljs-title function_">save</span>();<span class="hljs-comment">//保存当前状态</span>context.<span class="hljs-title function_">restore</span>();<span class="hljs-comment">//回复至前一次保存的状态</span></code></pre><h4 id="渐变色（可作为fillStyle-strokeStyle的值）"><a href="#渐变色（可作为fillStyle-strokeStyle的值）" class="headerlink" title="渐变色（可作为fillStyle&#x2F;strokeStyle的值）"></a>渐变色（可作为fillStyle&#x2F;strokeStyle的值）</h4><pre><code class="hljs javascript"><span class="hljs-comment">//线性渐变色</span><span class="hljs-keyword">var</span> grd = context.<span class="hljs-title function_">createLinearGradient</span>(xstart,ystart,xend,yend); <span class="hljs-comment">// </span>grd.<span class="hljs-title function_">addColorStop</span>(stop,color);<span class="hljs-comment">//放射性渐变</span><span class="hljs-keyword">var</span> grd = context.<span class="hljs-title function_">createRadialGradient</span>(x0,y0,r0,x1,y1,r1); <span class="hljs-comment">// 在两个圆中间进行渐变</span>grd.<span class="hljs-title function_">addColorStop</span>(stop,color);<span class="hljs-comment">//图像做背景填充</span><span class="hljs-keyword">var</span> pattern = context.<span class="hljs-title function_">createPattern</span>(img/canvas/video,repeat-style); <span class="hljs-comment">//填充对象可以是图片，canvas,或vedio;repear-stylt = no-rapeat/repeat-x/repeat-y/repeat</span></code></pre><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><pre><code class="hljs javascript"><span class="hljs-comment">//配置文字属性</span>context.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;bold 40px Arial&quot;</span>; <span class="hljs-comment">//默认值20px sans-serif</span><span class="hljs-comment">//font属性的所有值font-style(normal italic oblique),font-variant(normal small-caps),font-weight(normal/400 bold/700 ),font-size(20px 20em 100%),font-family(支持多备选字体 @font-face)</span><span class="hljs-comment">//绘制填充文字</span>context.<span class="hljs-property">fillStyle</span> =<span class="hljs-string">&quot;#058&quot;</span>; <span class="hljs-comment">//可以使用渐变色和图像为背景</span>context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;Welcome...&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>); <span class="hljs-comment">//string,x,y,文字最大长度（选填）</span><span class="hljs-comment">//绘制边框文字</span>context.<span class="hljs-property">strokeStyle</span> =<span class="hljs-string">&quot;#058&quot;</span>;  <span class="hljs-comment">//可以使用渐变色和图像为背景</span>context.<span class="hljs-title function_">strokeText</span>(<span class="hljs-string">&quot;Hello...&quot;</span>,<span class="hljs-number">500</span>,<span class="hljs-number">100</span>，<span class="hljs-number">200</span>);<span class="hljs-comment">//文字对齐</span>context.<span class="hljs-property">textAlign</span> = center/right/left <span class="hljs-comment">//文字水平对齐，针对指定的x坐标</span>context.<span class="hljs-property">textBaseline</span> = top/middle/bottom <span class="hljs-comment">//文字垂直对齐，针对指定的y坐标</span><span class="hljs-comment">//文本的度量</span>context.<span class="hljs-title function_">measureText</span>(string).<span class="hljs-property">width</span></code></pre><h3 id="2、高级方法"><a href="#2、高级方法" class="headerlink" title="2、高级方法"></a>2、高级方法</h3><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><pre><code class="hljs javascript"><span class="hljs-comment">//可用于文字，图片</span>context.<span class="hljs-property">shadowColor</span>  <span class="hljs-comment">//类似于fillStyle</span>context.<span class="hljs-property">shadowOffsetX</span>context.<span class="hljs-property">shadowOffsetY</span>context.<span class="hljs-property">shadowBlur</span>   <span class="hljs-comment">// 阴影模糊程度，越大越模糊</span></code></pre><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><pre><code class="hljs javascript">context.<span class="hljs-property">globalAlpha</span> = <span class="hljs-number">0.7</span> <span class="hljs-comment">//全局透明度属性</span>context.<span class="hljs-property">globalCompositeOperation</span> = <span class="hljs-string">&quot;source-over&quot;</span> <span class="hljs-comment">//全局图像覆盖属性 </span></code></pre><table><thead><tr><th>图2覆盖图1</th><th>图1覆盖图2</th><th>其他特性</th></tr></thead><tbody><tr><td>source-over</td><td>destination-over</td><td>lighter:重叠处颜色叠加</td></tr><tr><td>source-atop:显示图1以及图2在图1内部的部分</td><td>destination-atop:显示图2以及图1在图2内部的部分</td><td>copy:只绘制图2</td></tr><tr><td>source-in:显示图2在图1内部的部分</td><td>destination-in:显示图1在图2内部的部分</td><td>xor:重叠处图像挖空</td></tr><tr><td>source-out:显示图2在图1外部的部分</td><td>destination-out:显示图1在图2内部的部分</td><td></td></tr></tbody></table><h4 id="剪辑区域"><a href="#剪辑区域" class="headerlink" title="剪辑区域"></a>剪辑区域</h4><pre><code class="hljs javascript">context.<span class="hljs-title function_">clip</span>()  <span class="hljs-comment">//将之前绘制的封闭图形作为新的画布环境</span></code></pre><p><strong>实例</strong></p><p>实现一个探照灯效果</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">light</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-title function_">draw</span>(context);            <span class="hljs-title function_">update</span>(canvas.<span class="hljs-property">width</span>,canvas.<span class="hljs-property">height</span>); &#125;, <span class="hljs-number">40</span>); &#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">cxt</span>)&#123;    <span class="hljs-keyword">var</span> canvas = cxt.<span class="hljs-property">canvas</span>;    cxt.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvas.<span class="hljs-property">width</span>,canvas.<span class="hljs-property">height</span>);        cxt.<span class="hljs-title function_">save</span>();    cxt.<span class="hljs-title function_">beginPath</span>();    cxt.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;black&quot;</span>;    cxt.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvas.<span class="hljs-property">width</span>,canvas.<span class="hljs-property">height</span>);    cxt.<span class="hljs-title function_">beginPath</span>();    cxt.<span class="hljs-title function_">arc</span>(cycle.<span class="hljs-property">x</span>,cycle.<span class="hljs-property">y</span>,cycle.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>*<span class="hljs-number">2</span>);    cxt.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;white&quot;</span>;    cxt.<span class="hljs-title function_">fill</span>();    cxt.<span class="hljs-title function_">clip</span>();  <span class="hljs-comment">//只会显示出圆形内部的内容</span>    cxt.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;bold 150px Arial&quot;</span>;    cxt.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&quot;center&quot;</span>;    cxt.<span class="hljs-property">textBaseline</span> = <span class="hljs-string">&quot;middle&quot;</span>;    cxt.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#058&quot;</span>;    cxt.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;CANVAS&quot;</span>,canvas.<span class="hljs-property">width</span>/<span class="hljs-number">2</span>,canvas.<span class="hljs-property">height</span>/<span class="hljs-number">4</span>);  <span class="hljs-comment">//文字是画在原来的方形画布上的</span>    cxt.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;CANVAS&quot;</span>,canvas.<span class="hljs-property">width</span>/<span class="hljs-number">2</span>,canvas.<span class="hljs-property">height</span>/<span class="hljs-number">2</span>);    cxt.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;CANVAS&quot;</span>,canvas.<span class="hljs-property">width</span>/<span class="hljs-number">2</span>,canvas.<span class="hljs-property">height</span>/<span class="hljs-number">4</span>*<span class="hljs-number">3</span>);    cxt.<span class="hljs-title function_">restore</span>();&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">width,height</span>)&#123;    cycle.<span class="hljs-property">x</span> += cycle.<span class="hljs-property">vx</span>;    cycle.<span class="hljs-property">y</span> += cycle.<span class="hljs-property">vy</span>;    <span class="hljs-keyword">if</span>(cycle.<span class="hljs-property">x</span>-cycle.<span class="hljs-property">radius</span>&lt;=<span class="hljs-number">0</span>)    &#123;        cycle.<span class="hljs-property">vx</span> = -cycle.<span class="hljs-property">vx</span>;        cycle.<span class="hljs-property">x</span> =cycle.<span class="hljs-property">radius</span>;    &#125;    <span class="hljs-keyword">if</span>(cycle.<span class="hljs-property">x</span>+cycle.<span class="hljs-property">radius</span>&gt;=width)    &#123;        cycle.<span class="hljs-property">vx</span> = -cycle.<span class="hljs-property">vx</span>;        cycle.<span class="hljs-property">x</span> = width - cycle.<span class="hljs-property">radius</span>;    &#125;    <span class="hljs-keyword">if</span>(cycle.<span class="hljs-property">y</span>-cycle.<span class="hljs-property">radius</span>&lt;=<span class="hljs-number">0</span>)    &#123;        cycle.<span class="hljs-property">vy</span> = -cycle.<span class="hljs-property">vy</span>;        cycle.<span class="hljs-property">y</span> = cycle.<span class="hljs-property">radius</span>;    &#125;    <span class="hljs-keyword">if</span>(cycle.<span class="hljs-property">y</span>+cycle.<span class="hljs-property">radius</span>&gt;=height)    &#123;        cycle.<span class="hljs-property">vy</span> = -cycle.<span class="hljs-property">vy</span>;        cycle.<span class="hljs-property">y</span> = height - cycle.<span class="hljs-property">radius</span>;    &#125;&#125;</code></pre><h4 id="路径方向和剪纸效果"><a href="#路径方向和剪纸效果" class="headerlink" title="路径方向和剪纸效果"></a>路径方向和剪纸效果</h4><p><span style = "color:red">使用fill()的这个特性实现剪纸效果</span></p><pre><code class="hljs javascript">context.<span class="hljs-title function_">fill</span>();  <span class="hljs-comment">//遵循非零环绕原则,绘图与路径方向有关</span></code></pre><p><strong>例子</strong>:</p><pre><code class="hljs javascript">context.<span class="hljs-title function_">beginPath</span>();context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>,<span class="hljs-number">300</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,<span class="hljs-literal">false</span>); context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>,<span class="hljs-number">150</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,<span class="hljs-literal">true</span>);  <span class="hljs-comment">//context.arc(400,400,150,0,2*Math.PI,false); </span>context.<span class="hljs-title function_">closePath</span>();context.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;blue&quot;</span>;context.<span class="hljs-property">shadowColor</span>= <span class="hljs-string">&quot;gray&quot;</span>;context.<span class="hljs-property">shadowOffsetX</span> = <span class="hljs-number">10</span>;context.<span class="hljs-property">shadowOffsetY</span> = <span class="hljs-number">10</span>;context.<span class="hljs-property">shadowBlur</span> = <span class="hljs-number">10</span>;context.<span class="hljs-title function_">fill</span>();</code></pre><h4 id="Canvas交互实例"><a href="#Canvas交互实例" class="headerlink" title="Canvas交互实例"></a>Canvas交互实例</h4><p>点击改变小球的颜色</p><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cv&quot;</span>); <span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>); balls  = [];<span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">800</span>;     <span class="hljs-title class_">CreateBalls</span>();    <span class="hljs-title function_">drawBall</span>();    canvas.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mouseup&quot;</span>,detect);   <span class="hljs-comment">//部署鼠标事件mousemove,mousedown</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">CreateBalls</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)    &#123;        <span class="hljs-keyword">var</span> <span class="hljs-title class_">ABall</span> = &#123;        <span class="hljs-attr">x</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*canvas.<span class="hljs-property">width</span>,        <span class="hljs-attr">y</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*canvas.<span class="hljs-property">height</span>,        <span class="hljs-attr">radius</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">20</span>+<span class="hljs-number">20</span>,        &#125;        balls[i] = <span class="hljs-title class_">ABall</span>;    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">drawBall</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i &lt;balls.<span class="hljs-property">length</span>;i++)    &#123;        context.<span class="hljs-title function_">beginPath</span>();        context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#058&quot;</span>;        context.<span class="hljs-title function_">arc</span>(balls[i].<span class="hljs-property">x</span>,balls[i].<span class="hljs-property">y</span>,balls[i].<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);        context.<span class="hljs-title function_">fill</span>();    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">detect</span>(<span class="hljs-params">event</span>)&#123;    <span class="hljs-keyword">var</span> x = event.<span class="hljs-property">clientX</span> - canvas.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;  <span class="hljs-comment">//获取鼠标点击在画布上的位置</span>    <span class="hljs-keyword">var</span> y = event.<span class="hljs-property">clientY</span> - canvas.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;balls.<span class="hljs-property">length</span>;i++)    &#123;        context.<span class="hljs-title function_">beginPath</span>();        context.<span class="hljs-title function_">arc</span>(balls[i].<span class="hljs-property">x</span>,balls[i].<span class="hljs-property">y</span>,balls[i].<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);        <span class="hljs-keyword">if</span>(context.<span class="hljs-title function_">isPointInPath</span>(x,y))  <span class="hljs-comment">//判断(x,y)是否在所绘制的图形内部</span>        &#123;            context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;            context.<span class="hljs-title function_">fill</span>();        &#125;    &#125;&#125;</code></pre><h4 id="在Canvas上使用HTML其他元素"><a href="#在Canvas上使用HTML其他元素" class="headerlink" title="在Canvas上使用HTML其他元素"></a>在Canvas上使用HTML其他元素</h4><p>1、Canvas标签内部的内容只有在Canvas无效时才能看见</p><p>2、使用绝对定位将一个新的div至于Canvas之上，在新的div中布置HTML元素</p><h4 id="扩充Canvas函数方法"><a href="#扩充Canvas函数方法" class="headerlink" title="扩充Canvas函数方法"></a>扩充Canvas函数方法</h4><p>增加一个方法</p><pre><code class="hljs javascript"><span class="hljs-title class_">CanvasRenderingContext2D</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fillStar</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">r,R,x,y,rot</span>)&#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">beginPath</span>();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*R+x,                    -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*R+y);        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*r+x,                    -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*r+y);    &#125;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">closePath</span>();    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fill</span>();&#125;</code></pre><p>复写一个方法（不推荐），增加一个属性</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<span class="hljs-keyword">var</span> originalMoveTo = <span class="hljs-title class_">CanvasRenderingContext2D</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">moveTo</span>;<span class="hljs-title class_">CanvasRenderingContext2D</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">lastMoveToLoc</span> = &#123;&#125;;  <span class="hljs-comment">//增加的新属性</span><span class="hljs-title class_">CanvasRenderingContext2D</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">moveTo</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;    originalMoveTo.<span class="hljs-title function_">apply</span>(context,[x,y]);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastMoveToLoc</span>.<span class="hljs-property">x</span> = x;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastMoveToLoc</span>.<span class="hljs-property">y</span> = y;&#125;</code></pre><h4 id="Canvas兼容"><a href="#Canvas兼容" class="headerlink" title="Canvas兼容"></a>Canvas兼容</h4><p>1、IE6,7,8可以添加explorecanvas库来兼容。</p><h4 id="Canvas图形库"><a href="#Canvas图形库" class="headerlink" title="Canvas图形库"></a>Canvas图形库</h4><p>1、<a href="https://code.google.com/archive/p/canvasplus">canvasplus</a></p><p>2、<a href="https://northwardcompass.com/artisanjs-a-generative-art-and-canvas-extension/">Artisan JS</a></p><p>3、<a href="https://www.rgraph.net/">Rgraph:图表图形库</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code class="hljs javascript"><span class="hljs-comment">//canvas是基于状态来绘制的，只使用最后一次赋值的属性</span><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);    <span class="hljs-comment">//使用Context绘制</span>    <span class="hljs-keyword">var</span> context=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);        context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);    context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);    context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">700</span>);    context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);    <span class="hljs-comment">//设置画笔的属性</span>    context.<span class="hljs-property">fillStyle</span>= <span class="hljs-string">&quot;rgb(2,100,222)&quot;</span>;    context.<span class="hljs-title function_">fill</span>();    <span class="hljs-comment">//设置画笔的属性</span>    context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;    context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#ff0000&quot;</span>;    context.<span class="hljs-title function_">stroke</span>();      context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);    context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">800</span>,<span class="hljs-number">700</span>);    context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;black&quot;</span>;  <span class="hljs-comment">//black会覆盖上面的 &quot;#ff0000&quot;，所以最后都是黑色线条</span>    context.<span class="hljs-title function_">stroke</span>();          <span class="hljs-comment">//绘制圆弧</span>    context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;    context.<span class="hljs-property">strokeStyle</span>  =<span class="hljs-string">&quot;#005588&quot;</span>;    context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,<span class="hljs-literal">true</span>);    context.<span class="hljs-title function_">stroke</span>();&#125;</code></pre><h4 id="如何绘制两个不同的线条"><a href="#如何绘制两个不同的线条" class="headerlink" title="如何绘制两个不同的线条"></a>如何绘制两个不同的线条</h4><pre><code class="hljs javascript"><span class="hljs-comment">//绘制第一个图形</span>context.<span class="hljs-title function_">beginPath</span>();context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">700</span>);context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.<span class="hljs-title function_">closePath</span>();context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#ff0000&quot;</span>;context.<span class="hljs-title function_">stroke</span>();  <span class="hljs-comment">//绘制第二个图形</span>context.<span class="hljs-title function_">beginPath</span>();context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">800</span>,<span class="hljs-number">700</span>);context.<span class="hljs-title function_">closePath</span>();context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;black&quot;</span>;context.<span class="hljs-title function_">stroke</span>();</code></pre><h4 id="绘制七巧板"><a href="#绘制七巧板" class="headerlink" title="绘制七巧板"></a>绘制七巧板</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid gray;margin:50px auto;display:block&quot;</span>&gt;</span>            当前浏览器不支持canvas.../或者在js中判断canvas.getContext(&#x27;2d&#x27;)是否为空。        <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-comment">//定义七巧板</span></span><span class="language-javascript">            <span class="hljs-keyword">let</span> tangram = [</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">800</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#caff67&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#67becf&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">800</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">800</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">600</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">600</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">600</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#ef2d61&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">600</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">600</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">600</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#f9f51a&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">600</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">600</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">600</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#a594c0&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">600</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#fa8ecc&quot;</span>&#125;,</span><span class="language-javascript">                &#123;<span class="hljs-attr">p</span>:[&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">800</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">400</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">800</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;,&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">400</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">800</span>&#125;],<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#f6ca29&quot;</span>&#125;,</span><span class="language-javascript">            ]</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">                <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);</span><span class="language-javascript">                <span class="hljs-keyword">var</span> context=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);    <span class="hljs-comment">//使用Context绘制</span></span><span class="language-javascript">                tangram.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;</span><span class="language-javascript">                    <span class="hljs-title function_">draw</span>(item,context);</span><span class="language-javascript">                &#125;)</span><span class="language-javascript">            &#125;</span><span class="language-javascript"></span><span class="language-javascript">            <span class="hljs-comment">//画图方法</span></span><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">piece,cxt</span>)</span><span class="language-javascript">            &#123;</span><span class="language-javascript">                cxt.<span class="hljs-title function_">beginPath</span>();</span><span class="language-javascript">                cxt.<span class="hljs-title function_">moveTo</span>(piece.<span class="hljs-property">p</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span>,piece.<span class="hljs-property">p</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span>);</span><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; piece.<span class="hljs-property">p</span>.<span class="hljs-property">length</span>; i++)</span><span class="language-javascript">                &#123;</span><span class="language-javascript">                    cxt.<span class="hljs-title function_">lineTo</span>(piece.<span class="hljs-property">p</span>[i].<span class="hljs-property">x</span>,piece.<span class="hljs-property">p</span>[i].<span class="hljs-property">y</span>);</span><span class="language-javascript">                &#125;</span><span class="language-javascript">                cxt.<span class="hljs-title function_">closePath</span>();</span><span class="language-javascript">                <span class="hljs-comment">//设置画笔的属性</span></span><span class="language-javascript">                cxt.<span class="hljs-property">fillStyle</span>= piece.<span class="hljs-property">color</span>;</span><span class="language-javascript">                cxt.<span class="hljs-title function_">fill</span>();</span><span class="language-javascript">                cxt.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&quot;black&quot;</span>;</span><span class="language-javascript">                cxt.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">2</span>;</span><span class="language-javascript">                cxt.<span class="hljs-title function_">stroke</span>();</span><span class="language-javascript">            &#125;</span><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="简单的球体掉落"><a href="#简单的球体掉落" class="headerlink" title="简单的球体掉落"></a>简单的球体掉落</h4><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ball = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">512</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">r</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">g</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">vx</span>:-<span class="hljs-number">4</span>,<span class="hljs-attr">vy</span>:-<span class="hljs-number">10</span>,<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#005588&quot;</span>&#125;;<span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cv&quot;</span>);    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">1024</span>;    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">768</span>;    <span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);    <span class="hljs-built_in">setInterval</span>(        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;            <span class="hljs-title function_">render</span>(context);            <span class="hljs-title function_">update</span>();        &#125;,<span class="hljs-number">20</span> <span class="hljs-comment">//50ms执行一次，所以帧率是20</span>    );&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span> ()&#123;    ball.<span class="hljs-property">x</span>+=ball.<span class="hljs-property">vx</span>;    ball.<span class="hljs-property">y</span>+=ball.<span class="hljs-property">vy</span>;    ball.<span class="hljs-property">vy</span>+=ball.<span class="hljs-property">g</span>;    <span class="hljs-keyword">if</span>(ball.<span class="hljs-property">y</span>&gt;=<span class="hljs-number">768</span>-ball.<span class="hljs-property">r</span>)    &#123;        ball.<span class="hljs-property">y</span> = <span class="hljs-number">768</span>-ball.<span class="hljs-property">r</span>;        ball.<span class="hljs-property">vy</span> = -ball.<span class="hljs-property">vy</span>*<span class="hljs-number">0.5</span>;  <span class="hljs-comment">//0.5的摩擦系数</span>    &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">cxt</span>)&#123;    cxt.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,cxt.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>,cxt.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);    cxt.<span class="hljs-property">fillStyle</span> = ball.<span class="hljs-property">color</span>;    cxt.<span class="hljs-title function_">beginPath</span>();    cxt.<span class="hljs-title function_">arc</span>(ball.<span class="hljs-property">x</span>,ball.<span class="hljs-property">y</span>,ball.<span class="hljs-property">r</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);    cxt.<span class="hljs-title function_">fill</span>();&#125;</code></pre><h4 id="五角星"><a href="#五角星" class="headerlink" title="五角星"></a>五角星</h4><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawStar</span>(<span class="hljs-params">cxt,x,y,R,rot</span>)&#123;    cxt.<span class="hljs-title function_">save</span>();    cxt.<span class="hljs-title function_">translate</span>(x,y);    cxt.<span class="hljs-title function_">rotate</span>(rot/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);    cxt.<span class="hljs-title function_">scale</span>(R,R);    <span class="hljs-title function_">starPath</span>(cxt);    cxt.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#fb3&quot;</span>;    <span class="hljs-comment">//cxt.strokeStyle = &quot;#fd5&quot;;</span>    <span class="hljs-comment">//cxt.lineWidth = 3;  // scale()方法会影响该属性</span>    cxt.<span class="hljs-property">lineJoin</span> = <span class="hljs-string">&quot;round&quot;</span>;    cxt.<span class="hljs-title function_">fill</span>();    <span class="hljs-comment">//cxt.stroke();</span>    cxt.<span class="hljs-title function_">restore</span>();&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">starPath</span>(<span class="hljs-params">cxt</span>)  <span class="hljs-comment">//标准五角星</span>&#123;    cxt.<span class="hljs-title function_">beginPath</span>();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        cxt.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>),                   -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>));        cxt.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*<span class="hljs-number">0.5</span>,                   -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)*<span class="hljs-number">0.5</span>);    &#125;    cxt.<span class="hljs-title function_">closePath</span>();&#125;</code></pre><p><strong>渐变色</strong></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> grd = context.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">800</span>);grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.0</span>,<span class="hljs-string">&quot;#f00&quot;</span>);grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.5</span>,<span class="hljs-string">&quot;#0f0&quot;</span>);grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1.0</span>,<span class="hljs-string">&quot;#00f&quot;</span>);context.<span class="hljs-property">fillStyle</span> = grd;context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);</code></pre><h4 id="图片填充"><a href="#图片填充" class="headerlink" title="图片填充"></a>图片填充</h4><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> backgroundImage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>;backgroundImage.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;&quot;</span> ;backgroundImage.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> pattern = context.<span class="hljs-title function_">createPattern</span>(backgroundImage,<span class="hljs-string">&quot;no-repeat&quot;</span>);     context.<span class="hljs-property">fillStyle</span> = pattern;    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,widht,height);&#125;</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1、<a href="https://www.w3.org/TR/2dcontext/">Canvas,W3C标准</a></p><p>2、<a href="https://html.spec.whatwg.org/">WHATWG标准</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2020/07/29/novel1/"/>
    <url>/2020/07/29/novel1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>《如果有来生》</p><p>如果有来生，要做一棵树，</p><p>站成永恒。</p><p>没有悲欢的姿势，</p><p>一半在尘土里安详，</p><p>一半在风里飞扬；</p><p>一半洒落荫凉，</p><p>一半沐浴阳光。</p><p>非常沉默、非常骄傲。</p><p>从不依靠、从不寻找。</p><p>​                                    —-三毛《写给自己》</p></blockquote><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p>风可以带走什么？</p><p>大概只有身上的泥土和一声浅浅的叹息吧。</p><p>看着那群勾肩搭背，欢笑着离去的背影，小树拍了拍身上的泥，撑着膝盖从地上爬起来，转身回家去了。这种事情他早就习以为常，也没必要感伤什么。妈妈在家做了好吃的饼子等他呢，回去晚了，凉了可就糟蹋那美味了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>清潭集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《朱生豪情书》节选</title>
    <link href="/2020/07/27/reader-1/"/>
    <url>/2020/07/27/reader-1/</url>
    
    <content type="html"><![CDATA[<h4 id="上"><a href="#上" class="headerlink" title="上"></a>上</h4><blockquote><ul><li>所谓爱的对象主要是自己想象出来的，并不一定真实存在，换句话说，无非是追求心灵的寄托。</li></ul></blockquote><p>你喜欢并不是我，而是想象中的我。</p><blockquote><ul><li><p>我的野心，便是想成为你的好朋友。现在我的野心，便是希望这样的友谊能够继续到死时。</p></li><li><p>人们的饥渴是存在于他们的灵魂内的，而引起这种饥渴来，使人们明白的感到苦恼，otherwise behind and unfelt的，是所谓幸福，凡幸福没有终极的止境，因此幸福愈大，则饥渴愈苦，因是我在心里说，清如，因为我是如此深爱你，所以让我们（我宁愿）永远维持着我们平淡的友谊啊！</p></li></ul></blockquote><blockquote><ul><li>我一定要吃糖，为着寂寞的缘故。</li><li>这里一切都是丑的，风，雨，太阳，都丑，人也丑，我也丑得很，只有你像青天一样可羡。</li><li>寄给你全宇宙的爱和自太古至永劫的思念。</li></ul></blockquote><blockquote><ul><li>如果不是因为这世界 有些古怪，我巴不得永远和你厮守在一起。</li></ul></blockquote><p>太露骨了兄弟</p><blockquote><ul><li>你说我们前世是不是冤家？我向来不把聚散看成一回事，在你之前，除你之外，我也并非没有好朋友，不知道为什么和你认识之后，便像被一根绳紧紧牵系住一样，怪不自由的，心也不能像从前一样轻了，但同时却又觉得比从前幸福得多。</li><li>愿意炼成一个坚强的钢铁样的信心，永远倾向着你。</li><li>我知道你顶明白我 ，但还是巴不得把心的每个角落给你看才痛快。</li><li>常常气闷的很，觉得什么人都讨厌，连自己的影子也讨厌，很愿意一个朋友也不要，不过想到你时，总是好像有点例外。</li><li>如果我不认识你，我一定更不幸。</li></ul></blockquote><blockquote><ul><li>醒来觉得甚是爱你。</li></ul></blockquote><blockquote><ul><li>我发誓永不自杀，除非有一天我厌倦了你。</li><li>每天每天你让别人看见你，我却看不见你，这全然是没有理由的。</li><li>我是属于你的，永远而且完全地。</li><li>我想作诗，写雨，写夜的相思，写你，写不出。</li><li>不许你再叫我先生，否则我要从字典上查出世界上最肉麻的称呼来称呼你。</li><li>我爱你，此外什么都不知道。</li><li>亲爱的小鬼，我要对你说些什么肉麻的话才好耶！</li></ul></blockquote><blockquote><ul><li>不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。</li></ul></blockquote><blockquote><ul><li><p>我愿舍弃一切，以想念你终此一生。</p></li><li><p>我不很快乐，因为你不很爱我，但所谓不很快乐者不等于不快乐，正如不很爱我不等于不爱我一样。</p></li></ul></blockquote><blockquote><ul><li>一个人不该太把自己看轻，如果你能使一个人倾心相爱，你总有特别使他钦佩的地方，不见得是因为他实在找不到朋友了才要找到你。</li></ul></blockquote><blockquote><ul><li><p>只要你不嫌吃力，一天对我讲四十八个钟头的话我都不会厌倦。</p></li><li><p>寂寞常常啮着我，唯你能给我感奋。</p></li></ul></blockquote><blockquote><ul><li>但愿未来我们终日在一起，每天每天从早晨口角到夜深，恨不得大家都走开。</li><li>至少你是如此的中我的意，使我不再希望有一个比你更好的人。</li><li>永远爱你，尽管你那样不好。</li><li>我想要在毛亭里看雨，假山边看蚂蚁，看蝴蝶恋爱，看蜘蛛结网，看水，看船，看云，看瀑布，看宋清如甜甜的睡觉。</li><li>要是你怪我不该爱你，那么使我爱你的实在是你自己。</li></ul></blockquote><blockquote><ul><li>比起你来，我也是幸福的多，因为我的朋友是一个天使，而你的朋友只是一个傻小子。</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>三味书屋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap Table学习笔记</title>
    <link href="/2020/07/21/bootstrapTable/"/>
    <url>/2020/07/21/bootstrapTable/</url>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap-Table基础用法"><a href="#Bootstrap-Table基础用法" class="headerlink" title="Bootstrap Table基础用法"></a>Bootstrap Table基础用法</h2><h3 id="1、使用js注册一个bootstrap-table"><a href="#1、使用js注册一个bootstrap-table" class="headerlink" title="1、使用js注册一个bootstrap-table"></a>1、使用js注册一个bootstrap-table</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;destroy&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(&#123;    <span class="hljs-attr">columns</span>: [&#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;ID&#x27;</span>    &#125;, &#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Name&#x27;</span>    &#125;, &#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Root&#x27;</span>    &#125;],    data[&#123;    <span class="hljs-attr">id</span>:<span class="hljs-string">&quot;1&quot;</span>,    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Jack&quot;</span>,    <span class="hljs-attr">root</span>:<span class="hljs-string">&quot;User&quot;</span>&#125;,&#123;    <span class="hljs-attr">id</span>:<span class="hljs-string">&quot;2&quot;</span>,    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Emily&quot;</span>,    <span class="hljs-attr">root</span>:<span class="hljs-string">&quot;Admin&quot;</span>&#125;]&#125;);</code></pre><h3 id="2、html注册bootstrap-table"><a href="#2、html注册bootstrap-table" class="headerlink" title="2、html注册bootstrap-table"></a>2、html注册bootstrap-table</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span></span><span class="hljs-tag">  <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;table&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">data-url</span>=<span class="hljs-string">&quot;data1.json&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>Root<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h2 id="Bootstrap-Table其他功能"><a href="#Bootstrap-Table其他功能" class="headerlink" title="Bootstrap Table其他功能"></a>Bootstrap Table其他功能</h2><p>（参考官网文档）</p><h3 id="1、使用html开启相关功能"><a href="#1、使用html开启相关功能" class="headerlink" title="1、使用html开启相关功能"></a>1、使用html开启相关功能</h3><p>data-[属性名称]</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span></span><span class="hljs-tag">  <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;table&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">data-url</span>=<span class="hljs-string">&quot;data1.json&quot;</span>  </span><span class="hljs-tag">  <span class="hljs-attr">data-pagination</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">data-search</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">data-sortable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h3 id="2、使用js配置相关功能"><a href="#2、使用js配置相关功能" class="headerlink" title="2、使用js配置相关功能"></a>2、使用js配置相关功能</h3><pre><code class="hljs javascript"><span class="hljs-comment">//初始化主表格</span>$(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;destroy&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(&#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;Ashx/Select.ashx?type=equipmentHistory&#x27;</span>, <span class="hljs-comment">//请求后台的URL（*）</span>    method/<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,                      <span class="hljs-comment">//请求方式（*）</span>    <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,                       <span class="hljs-comment">//清除缓存</span>    <span class="hljs-attr">queryParams</span>: &#123;                      <span class="hljs-comment">//参数</span>        <span class="hljs-title class_">Department</span>: $(<span class="hljs-string">&quot;#department-select&quot;</span>).<span class="hljs-title function_">val</span>(),        <span class="hljs-title class_">Project</span>: $(<span class="hljs-string">&quot;#project-select&quot;</span>).<span class="hljs-title function_">val</span>(),        <span class="hljs-title class_">Line</span>: $(<span class="hljs-string">&quot;#line-select&quot;</span>).<span class="hljs-title function_">val</span>(),        <span class="hljs-title class_">Station</span>: $(<span class="hljs-string">&quot;#station-select&quot;</span>).<span class="hljs-title function_">val</span>(),    &#125;,    <span class="hljs-attr">ajaxOptions</span>: &#123;                      <span class="hljs-comment">//传参ajax设置</span>        <span class="hljs-attr">traditional</span>: <span class="hljs-literal">true</span>,              <span class="hljs-comment">//允许传递数组类型的参数</span>    &#125;,    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,    <span class="hljs-attr">search</span>: <span class="hljs-literal">true</span>,                       <span class="hljs-comment">//开启搜索框</span>    <span class="hljs-attr">visibleSearch</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">showSearchButton</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">showColumns</span>: <span class="hljs-literal">true</span>,                  <span class="hljs-comment">//可以自主选择显示哪些列</span>    <span class="hljs-attr">striped</span>: <span class="hljs-literal">true</span>,                      <span class="hljs-comment">//是否显示行间隔</span>    <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,                     <span class="hljs-comment">//是否启用排序</span>    <span class="hljs-attr">sortName</span>: <span class="hljs-string">&#x27;id&#x27;</span>,    <span class="hljs-attr">sortOrder</span>: <span class="hljs-string">&quot;desc&quot;</span>,                  <span class="hljs-comment">//排序方式</span>    <span class="hljs-attr">queryParams</span>: oTableInit.<span class="hljs-property">queryParams</span>,<span class="hljs-comment">//传递参数（*）</span>    <span class="hljs-attr">sidePagination</span>: <span class="hljs-string">&quot;client&quot;</span>,           <span class="hljs-comment">//分页方式：client客户端分页，server服务端分页（*）</span>    <span class="hljs-attr">pageNumber</span>: <span class="hljs-number">1</span>,                      <span class="hljs-comment">//初始化加载第一页，默认第一页</span>    <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,                       <span class="hljs-comment">//每页的记录行数（*）</span>    <span class="hljs-attr">pageList</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>],        <span class="hljs-comment">//可供选择的每页的行数（*）</span>    <span class="hljs-attr">height</span>: <span class="hljs-number">500</span>,                        <span class="hljs-comment">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度  </span>    <span class="hljs-attr">detailView</span>: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//显示详情，左侧加号</span>    <span class="hljs-attr">detailFormatter</span>:<span class="hljs-string">&quot;detailFormatter&quot;</span>,  <span class="hljs-comment">//通过detailFormatter()修改详情内容</span>    <span class="hljs-attr">showExport</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">row, index</span>) &#123; <span class="hljs-comment">//增加\Helper\html资料\bootstrap-table-excel-export中的js文件，实现表格内容导出功能</span>        <span class="hljs-keyword">var</span> sUserAgent = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();        <span class="hljs-keyword">var</span> bIsIpad = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">&quot;ipad&quot;</span>;        <span class="hljs-keyword">var</span> bIsIphoneOs = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">&quot;iphone os&quot;</span>;        <span class="hljs-keyword">var</span> bIsMidp = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">&quot;midp&quot;</span>;        <span class="hljs-keyword">var</span> bIsUc7 = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">&quot;rv:1.2.3.4&quot;</span>;        <span class="hljs-keyword">var</span> bIsUc = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">&quot;ucweb&quot;</span>;        <span class="hljs-keyword">var</span> bIsAndroid = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">&quot;android&quot;</span>;        <span class="hljs-keyword">var</span> bIsCE = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">&quot;windows ce&quot;</span>;        <span class="hljs-keyword">var</span> bIsWM = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">&quot;windows mobile&quot;</span>;        <span class="hljs-keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;,    <span class="hljs-attr">clickToSelect</span>: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//是否启用点击选中行</span>    <span class="hljs-attr">exportDataType</span>: <span class="hljs-string">&quot;selected&quot;</span>,            <span class="hljs-comment">//导出内容的范围&#x27;basic&#x27;, &#x27;all&#x27;, &#x27;selected&#x27;.</span>    <span class="hljs-attr">exportTypes</span>: [<span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;excel&#x27;</span>, <span class="hljs-string">&#x27;xlsx&#x27;</span>], <span class="hljs-comment">//导出类型</span>    <span class="hljs-attr">exportOptions</span>: &#123;        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;QN Report - &#x27;</span> + <span class="hljs-title function_">formatDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()), <span class="hljs-comment">//文件名称设置</span>        <span class="hljs-attr">worksheetName</span>: <span class="hljs-string">&#x27;Sheet1&#x27;</span>,           <span class="hljs-comment">//表格工作区名称</span>        <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;Laeq&amp;Lex&#x27;</span>,        <span class="hljs-attr">excelstyles</span>: [<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;font-size&#x27;</span>, <span class="hljs-string">&#x27;font-weight&#x27;</span>],    &#125;,    <span class="hljs-attr">columns</span>: [    [&#123;    <span class="hljs-comment">//增加表头</span>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;已绑定的设备&#x27;</span>,            <span class="hljs-attr">colspan</span>: <span class="hljs-number">6</span>,            <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,            <span class="hljs-attr">rowStyle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">row, index</span>) &#123;                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">css</span>: &#123; <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#888&quot;</span>, <span class="hljs-string">&quot;background-color&quot;</span>:<span class="hljs-string">&quot;white&quot;</span> &#125; &#125;;            &#125;        &#125;    ],[&#123;        <span class="hljs-attr">checkbox</span>: <span class="hljs-literal">true</span>    &#125;, &#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;ID&#x27;</span>    &#125;, &#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Name&#x27;</span>,        <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,    <span class="hljs-comment">//文字水平居中</span>        <span class="hljs-attr">valign</span>: <span class="hljs-string">&#x27;middle&#x27;</span>,   <span class="hljs-comment">//文字垂直居中</span>        <span class="hljs-attr">visible</span>: <span class="hljs-literal">false</span>,     <span class="hljs-comment">//该列不可见</span>    &#125;, &#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;root&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Root&#x27;</span>    &#125;，&#123;        <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;option&#x27;</span>,        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Option&#x27;</span>,        <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,        <span class="hljs-attr">valign</span>: <span class="hljs-string">&#x27;middle&#x27;</span>,        <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) &#123;    <span class="hljs-comment">//自定义该列的样式</span>                <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; class=&quot;btn bad text-light&quot; id=&quot;start&quot;&gt;Start&lt;/button&gt;&#x27;</span>];                   &#125;,        <span class="hljs-attr">events</span>: &#123;                                    <span class="hljs-comment">//自定义功能</span>            <span class="hljs-string">&quot;click #delete&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e, value, row, index</span>) &#123;                                &#125;            &#125;    &#125;]],     <span class="hljs-comment">//注册加载子表的事件。注意下这里的三个参数！需要设置detailView:true</span>     <span class="hljs-attr">onExpandRow</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">index, row, $detail</span>) &#123;         <span class="hljs-title class_">InitSubTable</span>(index, row, $detail);     &#125;&#125;);<span class="hljs-comment">//设置详情内容</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">detailFormatter</span>(<span class="hljs-params">index, row</span>) &#123;    <span class="hljs-keyword">var</span> html = []    $.<span class="hljs-title function_">each</span>(row, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;        html.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;&lt;p&gt;&lt;b&gt;&#x27;</span> + key + <span class="hljs-string">&#x27;:&lt;/b&gt; &#x27;</span> + value + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span>)    &#125;);    <span class="hljs-keyword">return</span> html.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);&#125;<span class="hljs-comment">//初始化子表格</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">InitSubTable</span> (index, row, $detail) &#123;    <span class="hljs-keyword">var</span> eqid = row.<span class="hljs-property">idEquipment</span>;    <span class="hljs-keyword">var</span> cur_table = $detail.<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;table class=&quot;tablewhite&quot;&gt;&lt;/table&gt;&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;table&#x27;</span>);    $(cur_table).<span class="hljs-title function_">bootstrapTable</span>(&#123;        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;Ashx/Select.ashx?type=equipmentPMInfo&amp;eqID=&#x27;</span>+eqid,        <span class="hljs-attr">rowStyle</span>:<span class="hljs-string">&quot;rowStyleChild&quot;</span>,  <span class="hljs-comment">//通过rowStyleChild()根据数据修改行的样式</span>        <span class="hljs-attr">columns</span>:[  &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;PMCategory&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;PM Type&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;AlarmDate&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Alarm Date&#x27;</span>,            <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-title function_">changeDateFormat</span>(value)  <span class="hljs-comment">//通过changeDateFormat()修改时间格式</span>            &#125;        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;PmResult&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Pm Result&#x27;</span>        &#125;],    &#125;);&#125;;<span class="hljs-comment">//根据条件修改行样式</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">rowStyleChild</span>(<span class="hljs-params">row, index</span>) &#123;    <span class="hljs-keyword">var</span> style = &#123;&#125;;         <span class="hljs-keyword">if</span> (row.<span class="hljs-property">PmResult</span> !== <span class="hljs-string">&quot;PASS&quot;</span>) &#123;        style=&#123;<span class="hljs-attr">css</span>:&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;#d9534f&#x27;</span>&#125;&#125;;        &#125;               <span class="hljs-keyword">return</span> style;&#125;<span class="hljs-comment">//修改时间格式</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeDateFormat</span>(<span class="hljs-params">cellval</span>) &#123;    <span class="hljs-keyword">if</span> (cellval != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(cellval);        <span class="hljs-keyword">var</span> times = d.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&#x27;-&#x27;</span> + (d.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;-&#x27;</span> + d.<span class="hljs-title function_">getDate</span>();        <span class="hljs-keyword">return</span> times;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> cellval;    &#125;&#125;</code></pre><h3 id="3、js-动态加载数据"><a href="#3、js-动态加载数据" class="headerlink" title="3、js 动态加载数据"></a>3、js 动态加载数据</h3><pre><code class="hljs javascript"><span class="hljs-comment">//方法1</span><span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//动态修改url的值</span>$(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;refresh&#x27;</span>, &#123; <span class="hljs-string">&#x27;url&#x27;</span>: url &#125;);<span class="hljs-comment">//注意：url返回值应为json格式</span><span class="hljs-comment">//方法2</span>$(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;load&#x27;</span>, data); <span class="hljs-comment">//注意：此处的data应为json格式，且key值和column的field名相对应</span><span class="hljs-comment">//方法2</span>$(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;updateCell&#x27;</span>, &#123;    <span class="hljs-attr">index</span>: i,    <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;DRI&#x27;</span>,    <span class="hljs-attr">value</span>: data.<span class="hljs-property">DisplayName</span>,&#125;); <span class="hljs-comment">//formatter中不支持ajax异步查询更换值，只能加载完table之后再使用updateCell方法。更新</span></code></pre><h3 id="4、edit-Table"><a href="#4、edit-Table" class="headerlink" title="4、edit Table"></a>4、edit Table</h3><p>插件 bootstrap-editable.js 和 bootstrap-table-editable.js</p><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;~/Scripts/bootstrap-table.min.js&quot;</span>&gt;&lt;/script&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;~/Scripts/bootstrap-editable.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;~/Scripts/bootstrap-table-editable.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>$(<span class="hljs-string">&quot;#table&quot;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;destroy&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(&#123;    <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/User/QuerybyRange&#x27;</span>,    <span class="hljs-attr">queryParams</span>: &#123;        <span class="hljs-attr">NTID</span>: $(<span class="hljs-string">&quot;#ntid-input&quot;</span>).<span class="hljs-title function_">val</span>(),        <span class="hljs-title class_">EmployeeID</span>: $(<span class="hljs-string">&quot;#epid-input&quot;</span>).<span class="hljs-title function_">val</span>(),        <span class="hljs-title class_">Department</span>: $(<span class="hljs-string">&quot;#departsele&quot;</span>).<span class="hljs-title function_">val</span>()[<span class="hljs-number">0</span>] == <span class="hljs-literal">null</span> ? <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;epm-Department&quot;</span>) == <span class="hljs-string">&quot;ALL&quot;</span> ? <span class="hljs-literal">null</span> : <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;epm-Department&quot;</span>) : $(<span class="hljs-string">&quot;#departsele&quot;</span>).<span class="hljs-title function_">val</span>(),    &#125;,    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,    <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//设置为 true 会在表格底部显示分页条。</span>    <span class="hljs-attr">paginationLoop</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//设置为 true 启用分页条无限循环的功能。</span>    <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<span class="hljs-comment">//每页初始显示的条数</span>    <span class="hljs-attr">pageList</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>],    <span class="hljs-attr">columns</span>: [        &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;Index&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Index&#x27;</span>,            <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) &#123;                <span class="hljs-keyword">return</span> index + <span class="hljs-number">1</span>;            &#125;        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;UserName&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;User Name&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;EmployeeID&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Employee ID&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;NTID&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;NTID&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;Department&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Department&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;Project&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Project&#x27;</span>,            <span class="hljs-attr">editable</span>: &#123;                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Project&#x27;</span>,                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;checklist&#x27;</span>,                <span class="hljs-attr">separator</span>: <span class="hljs-string">&quot;,&quot;</span>,                <span class="hljs-attr">source</span>: res[<span class="hljs-number">0</span>],                <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;inline&#x27;</span>,                <span class="hljs-attr">validate</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;                    <span class="hljs-keyword">if</span> ($.<span class="hljs-title function_">trim</span>(value) == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Value can not be empty.&#x27;</span>;                &#125;            &#125;        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;eMail&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;e-Mail&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;PhoneNum&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Phone&#x27;</span>        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;role&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Role&#x27;</span>,            <span class="hljs-attr">editable</span>: &#123;                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Role&#x27;</span>,                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;select&#x27;</span>,                <span class="hljs-attr">separator</span>: <span class="hljs-string">&quot;,&quot;</span>,                <span class="hljs-attr">source</span>: res[<span class="hljs-number">1</span>],                <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;inline&#x27;</span>,                <span class="hljs-attr">validate</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;                    <span class="hljs-keyword">if</span> ($.<span class="hljs-title function_">trim</span>(value) == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Value can not be empty.&#x27;</span>;                &#125;            &#125;        &#125;, &#123;            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;Operate&#x27;</span>,            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Operate&#x27;</span>,            <span class="hljs-attr">events</span>: operateEvents,            <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) &#123;                <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;&lt;a href=&quot;#&quot; id=&quot;delete&quot;&gt;Delete&lt;/a&gt;&#x27;</span>];            &#125;        &#125;],    <span class="hljs-attr">onEditableSave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">field, row, oldValue, $el</span>) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(field);        <span class="hljs-keyword">var</span> tmp = &#123;            <span class="hljs-attr">id</span>: row[<span class="hljs-string">&#x27;id&#x27;</span>],            <span class="hljs-attr">NTID</span>: row[<span class="hljs-string">&#x27;id&#x27;</span>],        &#125;        tmp[field] = field == <span class="hljs-string">&#x27;Project&#x27;</span> ?  row[field].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>) : row[field];        $.<span class="hljs-title function_">ajax</span>(&#123;            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/User/Edit&#x27;</span>,            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,            <span class="hljs-attr">data</span>: tmp,            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);            &#125;,            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;                <span class="hljs-title function_">alert</span>(err.<span class="hljs-property">responseText</span>);            &#125;,            <span class="hljs-attr">complete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;                $(<span class="hljs-string">&quot;#table&quot;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&quot;refreshOptions&quot;</span>, &#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/User/QuerybyRange&quot;</span> &#125;);            &#125;        &#125;)    &#125;,&#125;);</code></pre><h3 id="5、添加自定义按钮"><a href="#5、添加自定义按钮" class="headerlink" title="5、添加自定义按钮"></a>5、添加自定义按钮</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbar&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;NewPN&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success &quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span> 新增 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">GetPNTable</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        $(<span class="hljs-string">&quot;#toolbar&quot;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&quot;style&quot;</span>);</span><span class="language-javascript">        $(<span class="hljs-string">&quot;#table&quot;</span>).<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;destroy&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(&#123;</span><span class="language-javascript">            <span class="hljs-attr">toolbar</span>: <span class="hljs-string">&quot;#toolbar&quot;</span>,</span><span class="language-javascript">            <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,</span><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://cnwuxg0te01:9000/api/SparepartDescription/GetSparepartDescription_byCategory&#x27;</span>,</span><span class="language-javascript">            <span class="hljs-attr">queryParams</span>: &#123;</span><span class="language-javascript">                <span class="hljs-title class_">Category</span>: $(<span class="hljs-string">&quot;#category&quot;</span>).<span class="hljs-title function_">val</span>(),</span><span class="language-javascript">                <span class="hljs-attr">subCategory</span>: $(<span class="hljs-string">&quot;#subcategory&quot;</span>).<span class="hljs-title function_">val</span>(),</span><span class="language-javascript">                <span class="hljs-attr">iskeypart</span>: $(<span class="hljs-string">&quot;#iskeypart&quot;</span>).<span class="hljs-title function_">val</span>(),</span><span class="language-javascript">                <span class="hljs-attr">pn</span>: $(<span class="hljs-string">&quot;#pn&quot;</span>).<span class="hljs-title function_">val</span>(),</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">            <span class="hljs-attr">ajaxOptions</span>: &#123;</span><span class="language-javascript">                <span class="hljs-attr">traditional</span>: <span class="hljs-literal">true</span>,</span><span class="language-javascript">                <span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;</span><span class="language-javascript">                    xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);</span><span class="language-javascript">                &#125;,</span><span class="language-javascript">            &#125;,</span><span class="language-javascript">            <span class="hljs-attr">search</span>: <span class="hljs-literal">true</span>,                       <span class="hljs-comment">//开启搜索框</span></span><span class="language-javascript">            <span class="hljs-attr">visibleSearch</span>: <span class="hljs-literal">true</span>,</span><span class="language-javascript">            <span class="hljs-attr">showColumns</span>: <span class="hljs-literal">true</span>,</span><span class="language-javascript">            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span><span class="language-javascript">            <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//设置为 true 会在表格底部显示分页条。</span></span><span class="language-javascript">            <span class="hljs-attr">paginationLoop</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//设置为 true 启用分页条无限循环的功能。</span></span><span class="language-javascript">            <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<span class="hljs-comment">//每页初始显示的条数</span></span><span class="language-javascript">            <span class="hljs-attr">pageList</span>: <span class="hljs-string">&#x27;[10, 15, 20,All]&#x27;</span>,</span><span class="language-javascript">            <span class="hljs-attr">showLoading</span>: <span class="hljs-literal">false</span>,</span><span class="language-javascript">            <span class="hljs-attr">columns</span>: [&#123;</span><span class="language-javascript">                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;Index&#x27;</span>,</span><span class="language-javascript">                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;NO.&#x27;</span>,</span><span class="language-javascript">                <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) &#123;</span><span class="language-javascript">                    <span class="hljs-keyword">return</span> index + <span class="hljs-number">1</span>;</span><span class="language-javascript">                &#125;</span><span class="language-javascript">            &#125;],          </span><span class="language-javascript">        &#125;)</span><span class="language-javascript">    &#125;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://www.bootstrap-table.com.cn/examples/options/table-height/">Bootstrap Table官网实例</a></p><p>2、<a href="https://www.cnblogs.com/landeanfen/p/4993979.html">bootstrap-table父子表</a></p><p>3、<a href="https://blog.csdn.net/qq_39215166/article/details/74452366?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">在table内添加按钮</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020杂记</title>
    <link href="/2020/06/30/2020/"/>
    <url>/2020/06/30/2020/</url>
    
    <content type="html"><![CDATA[<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="20200630"><a href="#20200630" class="headerlink" title="20200630"></a>20200630</h3><p>​年初新冠来袭，至今（6月末）已有1000w人罹难，但是1000w于我而言终究是纸上的4个数字一个符号。2-3月份的时候，也天天看新闻，看国内转危为安，看国外水生火热，不是说没有同情心，真的事不关己，只能当茶余饭后的谈资来看。虽然嘴上说着些体恤别人的同情话，但终归没往心里去。</p><p>​最近有些闲暇，咳嗽病又犯了，人也懒，无事可做，就想写点什么，聊以自慰，仿佛自己没有虚度这几日似的。</p><p>​高中那会最爱写日记，因为上课太无聊，同学太有趣，不记下来好似亏了点什么，一年一本日记本不在话下。大学之后对写日记便觉兴趣乏乏，至今也没能写满一册。如今也是，仿佛生活中没了什么值得记忆的东西了，每天都是一样的，工作日工作，休息日躺着，要么逛吃逛吃，实在无趣。</p><p>​我总说：如果生活很无趣，那就做一个有趣的人。</p><p>​无奈懒惰至极，想法不少，鲜有实践的。</p><h3 id="我看苏同学"><a href="#我看苏同学" class="headerlink" title="我看苏同学"></a>我看苏同学</h3><p>​说实在，苏同学是我顶佩服一人，尤其欣赏他那固执到有些偏执的拗劲，所以常常和他谈不拢就有种想揍他的冲动。</p><p>​这人是真的执着。我是个极其随便的人，如果说不通我就不和你争；但苏同学不一样，他是一定要给你把道理讲通的，如果你不同意他，他就和你死耗，不知道他是对大家都这样，还是只我一人有此感受。这人不管做事还是讲话，都有点一根筋，大学时他帮我做毕设翻译，其实也就随口一提，结果他到来劲了。最后我已经困得睁不开眼了，他还在电话那边一个字一个字的给我报他翻译的中文，最后我俩搞到凌晨才做完，其实当时心里想的是：早知道往谷歌翻译里一丢，复制，粘贴就啥事都没有了……帮我做实验课的课题也是，本来就是一星期的作业，他非要赶在那两小时，我和另一个同学都饿得不行了，和他说：“没事的，我这个可以下周才交呢！”却回我们：“再等会，马上了，我有点眉目了”。最后还真让他做出来了，实在佩服。</p><p>​这人也是离奇，高中时看《来自星星的你》，我们讨论的激烈，他问我们在讨论啥，如实说了，他说他也回去看看，第二天问他什么感受，张口就开，那个什么星球根本不存在，这剧不合理，我没看……给我们惊得。有时候觉得他这点很可爱，有时候又觉得这人真的离谱。</p><h3 id="20200714"><a href="#20200714" class="headerlink" title="20200714"></a>20200714</h3><p>​说这样的话可能没什么依据，但是现在的父母真的是比我们的父母要对小孩负责的多。</p><p>​就拿我现在工作的师傅来说，为了小孩放弃了更好的工作（当然他的家庭条件不需要她有一个高薪），虽然不能接送小孩，但是上下学总是第一时间打电话联系，时刻监督。上班也是除了工作就是在找孩子看的书，辅导资料，看一些关于小孩教育的文章。期末考还没结束，辅导班已经全报好了，假期作业也都发货了。（说实话，有点惨。）</p><p>​而我小的时候，爸爸妈妈都在外面拼命赚钱，上学爷爷奶奶放假外公外婆，很少有一年半载爸妈一直在身边的经历。但也不是不管你，该打的也没少打。可我印象里，他们连家长会的鲜少参加。</p><p>​不是说我们那代人的父母怎么不好，只是真的，社会越来越富裕了，家长对于孩子的付出已经远远超出物质层面。除了基本的生活需要，你还要关注他的心理健康，健全的人格和良好的价值观。所以父母真的越来越难当了。</p><p>​</p><h3 id="20200914"><a href="#20200914" class="headerlink" title="20200914"></a>20200914</h3><p>​我是个不会写故事也不会撒谎的人，流水账倒是会一些。</p><p>​朝花夕拾，只的是个很美的词，是因为人的记忆总是会留下美好的事物吗？</p><p>​如果现在谈我的人生或许有些为时过早，但从出生到24岁之前的日子，或许可以划分成三个阶段：</p><p>​认识薛韵之前的，遇到薛韵的，和遇到薛韵之后。</p><p>​认识薛韵之前，感觉生活什么烦恼也没有，就像饭后的散步，遇到很多人，聊聊家常，平淡的日复一日。</p><p>​认识薛韵之后</p><h3 id="20201122"><a href="#20201122" class="headerlink" title="20201122"></a>20201122</h3><p>我这人有个毛病，不爱反省，也不会做长远打算，想一出是一出。所以最不爱历史，做事也坚持不过三两天，可能昨天想回家养猪，明天就想飞到月亮上去了。                  </p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css详细讲解</title>
    <link href="/2020/06/30/CssAdvance/"/>
    <url>/2020/06/30/CssAdvance/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>1、块级元素auto,是随父元素变化的</p><p>2、一旦元素被设为浮动，该元素的width就由内容元素决定</p><h3 id="PX-EM-REM"><a href="#PX-EM-REM" class="headerlink" title="PX&#x2F;EM&#x2F;REM"></a>PX&#x2F;EM&#x2F;REM</h3><h4 id="1、PX-像素"><a href="#1、PX-像素" class="headerlink" title="1、PX(像素)"></a>1、PX(像素)</h4><h4 id="2、EM"><a href="#2、EM" class="headerlink" title="2、EM"></a>2、EM</h4><p>EM继承父元素字体大小，默认1em&#x3D;16px, 0.875em&#x3D;4px, 0.75em&#x3D;12px, 0.625em&#x3D;10px</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;&#125;<span class="hljs-comment">/*简化换算*/</span><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;  <span class="hljs-comment">/*这样1.2em=12px*/</span></code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;&#125;   <span class="hljs-comment">/*简化换算 1em=10px*/</span></span><span class="language-css"><span class="hljs-selector-class">.con1</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;   <span class="hljs-comment">/*这样1.2em=12px*/</span></span><span class="language-css"><span class="hljs-selector-class">.con2</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;&#125;     <span class="hljs-comment">/*由于em继承父元素字体大小，此时font-size=1em=12px*/</span></span><span class="language-css"><span class="hljs-selector-class">.con3</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;   <span class="hljs-comment">/*由于em继承父元素字体大小，此时font-size=1.2em=12px*1.2=14.4px*/</span></span><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con2&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con3&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><h4 id="3、REM"><a href="#3、REM" class="headerlink" title="3、REM"></a>3、REM</h4><p>REM类似于EM，但是他的大小只相对于html的根元素，可以忽略继承的层级关系。</p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><h2 id="Float-少用"><a href="#Float-少用" class="headerlink" title="Float(少用)"></a><a href="https://www.imooc.com/learn/121">Float</a>(少用)</h2><p>float会使父容器高度塌陷（父容器的高度无法定位和使用）</p><p>float原本是用来实现文字环绕效果的</p><h4 id="1-清除float的影响"><a href="#1-清除float的影响" class="headerlink" title="1.清除float的影响"></a>1.清除float的影响</h4><ul><li><p>在block元素底部插入clear:both属性的元素【可以使用CSS after伪元素(IE6,IE7不识别)】 </p></li><li><p>BFC&#x2F;haslayout(IE6&#x2F;IE7)：使内部元素和外部完全隔绝</p><pre><code class="hljs css">IE8及以上浏览器：<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-attribute">display</span>:table;<span class="hljs-attribute">clear</span>:both&#125;IE6/IE7使用：<span class="hljs-selector-class">.clearfix</span>&#123;*zoom:<span class="hljs-number">1</span>;&#125;</code></pre></li></ul><p style="color:red">.clearfix只应该用在包含浮动子元素的父级元素上</p><h4 id="2-float的滥用"><a href="#2-float的滥用" class="headerlink" title="2.float的滥用"></a>2.float的滥用</h4><ul><li>使元素block块状化</li><li>去空格化,使元素紧密排列(将空格的文字元素置后了,实现文字环绕)</li><li>float在低版本的IE(6,7)下会有很多问题</li></ul><h4 id="3-float与流体布局"><a href="#3-float与流体布局" class="headerlink" title="3.float与流体布局"></a>3.float与流体布局</h4><pre><code class="hljs css">左侧：<span class="hljs-attribute">width</span> + <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;右侧：<span class="hljs-attribute">padding-left</span>/<span class="hljs-attribute">margin-left</span> =  <span class="hljs-attribute">width</span></code></pre><p>自适应的流体布局:</p><pre><code class="hljs css">左侧：<span class="hljs-attribute">float</span>右侧：<span class="hljs-attribute">display</span>:<span class="hljs-built_in">table-cell</span>(IE8+)/<span class="hljs-built_in">inline-block</span>(IE7)</code></pre><h2 id="Absolute"><a href="#Absolute" class="headerlink" title="Absolute"></a><a href="https://www.imooc.com/learn/192">Absolute</a></h2><h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a><a href="https://www.imooc.com/learn/680">Margin</a></h2><h4 id="1-百分比margin的计算规则"><a href="#1-百分比margin的计算规则" class="headerlink" title="1. 百分比margin的计算规则"></a>1. 百分比margin的计算规则</h4><ul><li>普通元素：不管是何种margin(margin-top;margin-bottom;margin-left;mergin-right)都是相对于父级元素的width计算的</li><li>绝对定位(position:absolute)元素：相对于第一个具有定位属性的祖先元素（relative&#x2F;absolute&#x2F;fixed）的width计算</li></ul><h4 id="2-margin重叠"><a href="#2-margin重叠" class="headerlink" title="2. margin重叠"></a>2. margin重叠</h4><ul><li><p><strong>通常特性：</strong><br>  只发生在block属性的元素上(不含float,absolute元素)<br>  不考虑writing-mode,只发生在垂直方向上(只有margin-top和margin-bottom会有此现象)</p></li><li><p><strong>种情景</strong><br>相邻的兄弟元素<br>父级和第一个&#x2F;最后一个子元素<br>空block元素</p></li><li><p><strong>margin计算法则</strong><br> 正正取最大<br> 正负取相加<br> 负负取最负</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RegExp正则表达式</title>
    <link href="/2020/05/22/RegExp/"/>
    <url>/2020/05/22/RegExp/</url>
    
    <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>使用RegExp对象，或者直接在一对 ‘&#x2F; &#x2F;‘中</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;\\d&#123;5&#125;&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);  <span class="hljs-comment">//第一个参数：正则表达式主体部分；第二个参数：修饰符（选填）</span>   <span class="hljs-comment">//注意：转义字符&#x27;\&#x27;-&gt;&#x27;\\&#x27;.例如：&#x27;\d&#x27;-&gt;&#x27;\\d&#x27;</span><span class="hljs-keyword">var</span> a = <span class="hljs-regexp">/\d&#123;5&#125;/g</span>;                <span class="hljs-comment">//与第一种定义方式等价</span></code></pre><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><h4 id="1-直接量"><a href="#1-直接量" class="headerlink" title="1.直接量"></a>1.直接量</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">字母和数字字符</td><td align="center">自身</td></tr><tr><td align="center">\o</td><td align="center">NUL字符（\u0000）Unicode编码方式</td></tr><tr><td align="center">\t</td><td align="center">制表符（\u0009）</td></tr><tr><td align="center">\n</td><td align="center">换行符（\u000A）</td></tr><tr><td align="center">\v</td><td align="center">垂直制表符（\u000B）</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr><tr><td align="center">\r</td><td align="center">回车符</td></tr><tr><td align="center">\xnn</td><td align="center">由16进制数nn指定的拉丁字符；例：\x0A&#x3D;\n</td></tr><tr><td align="center">\uxxxx</td><td align="center">由16进制数xxxx指定的Unicode字符；例：\u000A&#x3D;\n</td></tr><tr><td align="center">\cX</td><td align="center">控制字符^X；例：\cJ&#x3D;\n</td></tr></tbody></table><h4 id="2-具有特殊含义的符号"><a href="#2-具有特殊含义的符号" class="headerlink" title="2.具有特殊含义的符号"></a>2.具有特殊含义的符号</h4><blockquote><p>^  $  .  *  +  ?  &#x3D;  !  :  |  \  &#x2F;  ( )  [ ]  { }</p></blockquote><p>如果想使用这类字符的直接量，需要在前面加上，转义字符 &#39;\&#39; ；否则作为特殊字符使用。没有特殊含义的字符可直接使用。</p><h4 id="3-字符类"><a href="#3-字符类" class="headerlink" title="3.字符类"></a>3.字符类</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">[…]</td><td align="center">括号内任意字符</td></tr><tr><td align="center">[^…]</td><td align="center">非括号内大的任意字符</td></tr><tr><td align="center">.</td><td align="center">除换行符和其他Unicode终止符之外的任意字符</td></tr><tr><td align="center">\w</td><td align="center">ASCII码，&#x3D;[a-zA-Z0-9]</td></tr><tr><td align="center">\W</td><td align="center">非ASCII码,&#x3D;[ ^a-zA-Z0-9]</td></tr><tr><td align="center">\s</td><td align="center">任意的Unicode空白符</td></tr><tr><td align="center">\S</td><td align="center">任意的Unicode非空白符</td></tr><tr><td align="center">\d</td><td align="center">ASCII码数字，&#x3D;[0-9]</td></tr><tr><td align="center">\D</td><td align="center">非ASCII码数字，&#x3D;[ ^0-9]</td></tr><tr><td align="center">[\b]</td><td align="center">退格直接量</td></tr></tbody></table><p>[\b]无法和其他字符类连用；例：[\d\s]。必须写作[\b]才表示退格，[\b\d]是错误的。</p><h4 id="4-重复语法"><a href="#4-重复语法" class="headerlink" title="4.重复语法"></a>4.重复语法</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">{n,m}</td><td align="center">重复至少n次，至多m次</td></tr><tr><td align="center">{n,}</td><td align="center">重复至少n次</td></tr><tr><td align="center">{n}</td><td align="center">重复n次</td></tr><tr><td align="center">?</td><td align="center">重复0或1次，&#x3D;{0，1}(及该项可选)</td></tr><tr><td align="center">+</td><td align="center">重复至少一次，&#x3D;{1，}</td></tr><tr><td align="center">*</td><td align="center">重复至少0次，&#x3D;{0,}</td></tr></tbody></table><p>以上字符都是尽可能多的匹配（贪婪的匹配），如果要实现非贪婪的匹配，可以在语句后添加’？‘</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-regexp">/\d&#123;3&#125;|[a-z]&#123;4&#125;/</span>;   <span class="hljs-comment">//匹配前三个数字，后四个是小写字母</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">&quot;12345678&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[0-9]&#123;1,6&#125;?/</span>);    <span class="hljs-comment">//=&gt;[ &#x27;1&#x27;, index: 0, input: &#x27;12345678&#x27;, groups: undefined ]</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">&quot;12345678&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[0-9]&#123;1,6&#125;/</span>);     <span class="hljs-comment">//=&gt;[ &#x27;123456&#x27;, index: 0, input: &#x27;12345678&#x27;, groups: undefined ]</span></code></pre><p>正则表达式的匹配，总是会寻找字符串中第一个可能匹配的位置，所以下面的两种写法，查询到的结果是一样的</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> kat=<span class="hljs-string">&quot;aaab&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/a+?b/</span>);     <span class="hljs-comment">//=&gt;[ &#x27;aaab&#x27;, index: 0, input: &#x27;aaab&#x27;, groups: undefined ]</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">&quot;aaab&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/a+b/</span>);      <span class="hljs-comment">//=&gt;[ &#x27;aaab&#x27;, index: 0, input: &#x27;aaab&#x27;, groups: undefined ]</span></code></pre><h4 id="5-选择，分组，引用"><a href="#5-选择，分组，引用" class="headerlink" title="5.选择，分组，引用"></a>5.选择，分组，引用</h4><table><thead><tr><th align="center">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">|</td><td align="left">选择</td></tr><tr><td align="center">(…)</td><td align="left">组合，该单元格可以用过“*”，“+”，“？”，“|”等符号来修饰，并且会记住该条件所匹配的字符串，以便后续调用；可以使用\n引用</td></tr><tr><td align="center">(?:…)</td><td align="left">只组合，不会记忆字符串；无法用\n引用</td></tr><tr><td align="center">\n</td><td align="left">(n是数字)，和第n个分组第一次匹配的字符串相匹配，索引从左到右</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">&#x27;\&quot;fakacnfma\&#x27;&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([&#x27;&quot;])[^&#x27;&quot;]*\1/</span>);   <span class="hljs-comment">//=&gt;null</span><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">&#x27;\&quot;fakacnfma\&#x27;&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([&#x27;&quot;])[^&#x27;&quot;]*[&#x27;&quot;]/</span>);   <span class="hljs-comment">//=&gt;[  `&quot;fakacnfma&#x27;`,</span><span class="hljs-comment">//      &#x27;&quot;&#x27;,</span><span class="hljs-comment">//      index: 0,</span><span class="hljs-comment">//      input: `&quot;fakacnfma&#x27;`,</span><span class="hljs-comment">//      groups: undefined</span><span class="hljs-comment">//  ]</span></code></pre><p>正则表达式不允许在“ ”中有‘ ’，反之亦然。如下实例，匹配到的是里面的‘ ’，而非外面的“ ”</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">&#x27;\&quot;\&#x27;fakacnfma\&#x27;\&quot;&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([&#x27;&quot;])[^&#x27;&quot;]*\1/</span>);<span class="hljs-comment">//=&gt;  [  &quot;&#x27;fakacnfma&#x27;&quot;,    </span><span class="hljs-comment">//       &quot;&#x27;&quot;,</span><span class="hljs-comment">//       index: 1,</span><span class="hljs-comment">//       input: `&quot;&#x27;fakacnfma&#x27;&quot;`,</span><span class="hljs-comment">//       groups: undefined</span><span class="hljs-comment">//     ]</span></code></pre><p>不允许在字符类中使用\n的引用。如下实例是错误的:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-regexp">/([&#x27;&quot;])[^\1]*\1/</span>;</code></pre><h4 id="6-指定匹配位置"><a href="#6-指定匹配位置" class="headerlink" title="6.指定匹配位置"></a>6.指定匹配位置</h4><table><thead><tr><th align="center">字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">^</td><td>字符串的开头，在多行检索中匹配，每行的开头</td></tr><tr><td align="center">$</td><td>字符串的结尾，在多行检索中匹配，每行的结尾</td></tr><tr><td align="center">\b</td><td>匹配单词边界 &#x3D;&gt; 位于\w和\W之间的位置（*[\b]匹配退格符）</td></tr><tr><td align="center">\B</td><td>匹配非单词边界的位置</td></tr><tr><td align="center">(?&#x3D;p)</td><td>零宽正向先行断言 &#x3D;&gt;接下来的字符都和p匹配，但p不会出现在查询结果中</td></tr><tr><td align="center">(?!&#x3D;p)</td><td>零宽负向先行断言 &#x3D;&gt;接下来的字符不和p匹配</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> c=<span class="hljs-regexp">/^JavaScript$/</span>;      <span class="hljs-comment">//纯JavaScript字符串</span><span class="hljs-keyword">var</span> txt5=<span class="hljs-string">&#x27;javascript JavaScript: Is A LANGUAGE&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[Jj]ava([Ss]cript)?(?=\:)/</span>);  <span class="hljs-comment">//先行正向断言,javascript后须带有‘：’，但‘：’不会被匹配到结果中</span><span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     &#x27;JavaScript&#x27;,</span><span class="hljs-comment">//     &#x27;Script&#x27;,</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: &#x27;JavaScript: Is A LANGUAGE&#x27;,</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><h4 id="7-修饰符"><a href="#7-修饰符" class="headerlink" title="7.修饰符"></a>7.修饰符</h4><table><thead><tr><th align="center">字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">i</td><td>不区分大小写</td></tr><tr><td align="center">g</td><td>全局匹配，找出所以匹配的项，输入一个数组中</td></tr><tr><td align="center">m</td><td>多行匹配模式，主要针对‘^’和’$’</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">&quot;java12das45&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[a-z]+(\d+)/g</span>);  <span class="hljs-comment">//=&gt;[ &#x27;java12&#x27;, &#x27;das45&#x27; ]</span><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">&quot;java12das45&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[a-z]+(\d+)/</span>);   <span class="hljs-comment">//=&gt;[ &#x27;java12&#x27;, &#x27;12&#x27;, index: 0, input: &#x27;java12das45&#x27;, groups: undefined ]</span></code></pre><h2 id="3-可使用匹配模式的String方法"><a href="#3-可使用匹配模式的String方法" class="headerlink" title="3.可使用匹配模式的String方法"></a>3.可使用匹配模式的String方法</h2><h4 id="1-search"><a href="#1-search" class="headerlink" title="1.search"></a>1.search</h4><p>查询<code> string.search(x)</code>返回匹配字串的第一个字符的位置。该方法不支持全局检索，会忽略修饰符g，及无法返回数组</p><p>如果找不到匹配的字串会返回-1</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">&quot;132java12das45&quot;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/[a-z]+(\d+)/g</span>);  <span class="hljs-comment">//=&gt;3</span></code></pre><h4 id="2-replace"><a href="#2-replace" class="headerlink" title="2.replace"></a>2.replace</h4><p>执行检索与替换操作<code>string.replace(x,y)第一个参数可以是 正则表达式 或 字符串，第二个参数可以是 进行替换的字符串 或 函数</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt5=<span class="hljs-string">&#x27;javascript  javaScript: Is A LANGUAGE&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/javascript/ig</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>); <span class="hljs-comment">//=&gt;JavaScript JavaScript: Is A LANGUAGE</span></code></pre><p>在replace中，第二个参数可以是正则表达式‘(’，‘)’中匹配的内容，使用‘$’，。具体用法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> quote = <span class="hljs-regexp">/&quot;([^&quot;]*)&quot;/g</span>;<span class="hljs-keyword">var</span> txt = <span class="hljs-string">&#x27;&quot;fdajfoa&quot;ckajc&quot;fdadasd&quot;231&quot;da34fav&quot;&#x27;</span>.<span class="hljs-title function_">replace</span>(quote,<span class="hljs-string">&quot;“$1”&quot;</span>);<span class="hljs-comment">//=&gt; “fdajfoa”ckajc“fdadasd”231“da34fav”  将所有的英文的 &quot;&quot;，替换成中文的 “”</span></code></pre><h4 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h4><p><code>match(x)</code>返回一个数组</p><p>match返回数组的三种情况</p><pre><code class="hljs javascript"><span class="hljs-comment">//没有修饰词g,没有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">&quot;aaab&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/a+b/</span>);      <span class="hljs-comment">//=&gt;[ &#x27;aaab&#x27;, index: 0, input: &#x27;aaab&#x27;, groups: undefined ]</span><span class="hljs-comment">//有修饰词g有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">&#x27;fdajfoackajcfdadasd231da34fav&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/f(d)a/g</span>)    <span class="hljs-comment">//=&gt;[ &#x27;fda&#x27;, &#x27;fda&#x27; ]</span><span class="hljs-comment">//没有g有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">&#x27;fdajfoackajcfdadasd231da34fav&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/f(d)a/</span>)    <span class="hljs-comment">//a[n],存放的是$n的内容</span><span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     &#x27;fda&#x27;,</span><span class="hljs-comment">//     &#x27;d&#x27;,</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: &#x27;fdajfoackajcfdadasd231da34fav&#x27;,</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><h4 id="4-split"><a href="#4-split" class="headerlink" title="4.split"></a>4.split</h4><p><code>split(x)</code>将一个字符串拆分成数组，分隔符为split的参数</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> kat = <span class="hljs-string">&quot;1, 2, 3, 4, 5&quot;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\s*,\s*/</span>);  <span class="hljs-comment">//=&gt;[1,2,3,4,5]   允许两边留任意多的空格符</span></code></pre><h2 id="4-RegExp对象"><a href="#4-RegExp对象" class="headerlink" title="4.RegExp对象"></a>4.RegExp对象</h2><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a= <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;f(d)a&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);</code></pre><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h4><table><thead><tr><th align="center">属性</th><th>含义</th></tr></thead><tbody><tr><td align="center">source</td><td>可读字符串，包含正则表达式文本</td></tr><tr><td align="center">globa</td><td>布尔值，是否带修饰符g</td></tr><tr><td align="center">ignoreCase</td><td>布尔值，是否带修饰符i</td></tr><tr><td align="center">multiline</td><td>布尔值，是否带修饰符m</td></tr><tr><td align="center">lastIndex</td><td>可读写整数，读取的最后字符的下一位(对新字串进行检索，必须将lastIndex置0，否则会出错)</td></tr></tbody></table><h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h4><p><code>RegExp.exce()对指定的字符串执行一个正则表达式</code>，类似于<code>string.match()</code>,但是g修饰符对他不起作用</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a= <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;f(d)a&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);a.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;fdajfoackajcfdadasd231da34fav&#x27;</span>)  <span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     &#x27;fda&#x27;,</span><span class="hljs-comment">//     &#x27;d&#x27;,</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: &#x27;fdajfoackajcfdadasd231da34fav&#x27;,</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><p><code>RegExp.test()只返回true/false </code></p><p><code>test()和exce()方法，都会修改lastIndex的值</code>当最后一次检索失败时，要手动将<code>lastIndex</code>的值置0，否则下一次检索将不会从字符串的起始位置开始。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> b= <span class="hljs-regexp">/[a-z]+(\d+)/g</span>;     <span class="hljs-comment">//前面是小写字母，后面是数字</span><span class="hljs-keyword">var</span> c=<span class="hljs-regexp">/^JavaScript$/</span>;      <span class="hljs-comment">//纯JavaScript字符串</span><span class="hljs-keyword">var</span> d=<span class="hljs-regexp">/Java(?!Script)([A-Z]\w*)/</span>;      <span class="hljs-comment">//Java后面不是&quot; Script&quot;,而是以大写字母开头的字符串</span><span class="hljs-keyword">var</span> e=<span class="hljs-regexp">/[Jj]ava([Ss]cript)?(?=\:)/</span>;    <span class="hljs-comment">//先行正向断言 </span><span class="hljs-keyword">var</span> g=<span class="hljs-regexp">/(\w+)\:\/\/([\w.]+)\/(\S*)/</span>;    <span class="hljs-comment">//解析一个url </span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This Blog http://ymmltp.github.com/test.html&#x27;</span>);<span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     &#x27;http://ymmltp.github.com/test.html&#x27;,</span><span class="hljs-comment">//     &#x27;http&#x27;,</span><span class="hljs-comment">//     &#x27;ymmltp.github.com&#x27;,</span><span class="hljs-comment">//     &#x27;test.html&#x27;,</span><span class="hljs-comment">//    index: 10,</span><span class="hljs-comment">//     input: &#x27;This Blog http://ymmltp.github.com/test.html&#x27;,</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019杂记</title>
    <link href="/2019/12/01/2019/"/>
    <url>/2019/12/01/2019/</url>
    
    <content type="html"><![CDATA[<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p>第一次写blog</p><p>提笔不知道说点什么，今天天气不甚好，正在听一首《空心》。       </p><p>今年想把《三体》看完，但是实在无趣，苏云龙说，他是看了《三体》才去学物理的，但……行吧，我不行。<br>NoNo现在在睡觉，我的音乐声有点大，不知道它睡不睡得着。这猫，哪都好，就是总是半夜醒，然后在你脸上蹦迪，着实烦人。</p><p>啊，对了，NoNo是我的猫，他是一只不纯的小白猫，因为我们要养一只叫诺贝尔的猫。但是，太羞耻了，别人随便说说的话，你竟然记这么久，所以就先叫他NoNo吧！</p><p>今年有很多想学的，js,html,css,mysql……但是这些真不是说想学就能会的。一年下来也只能说有点眉目了，真的，只有学习这个事，你会越学越觉得自己不会。</p><p>师傅第一次让我写网页，我真啥都不懂，本来就不是计算机相关专业的，只学过一点C和VB。咋办呢，百度啊，还别说，这时候百度还真是个好东西。然后知道了<a href="https://www.bootcss.com/">bootstrap</a>，知道了网页有Webform架构MVC架构。说白了就是划分网页各个功能块的方式不一样（反正，从我知道的那点皮毛来看就是这样），然后搭配各自不同的代码。第一次写网页，花了两个月多，写出来的东西还没人用。算了我认了，全当入门练手。但是通过这个经历，我知道了，一个网页一般需要前端（html,css,js）和后台来共同完成。这时候我觉得自己老牛逼了，感觉自己就已经会写网页了（膨胀.jpg）</p><p>然后第二次写网页，搭框架倒是很快了，但是需要写一个很特殊的table，它左侧th和顶部th不随滑动而动，只有body部分受到scroll的控制。讲真，光这个我就搞了一个月，后来还是搞出来了，下次还是把代码也写进来好了。这时候 我才发现，我真的只是懂个皮毛（fp，你连皮毛都不懂，就是入个门！）</p><p>通过这个，我又知道了<a href="https://cn.vuejs.org/">vue.js</a>；Angela这些js框架，之前有听同学提过，但是没太懂。于是我又想去了解一下这几个js架构（目前还没有空尝试），还有<u>CSS3写的动态属性</u>，所以就是越学越觉得需要学的东西越多。果然说，学无止境是对的。</p><p>今年，苏同学还让我写一个关于球状闪电的论文（压根不知道怎么写论文的人👈），还没开始动手。</p><p>明年还是想学好网页和mysql，python(和其他语言比起来，这个真的好上手，想回家给我侄子科普一下。)</p><p>想在明后年能涨薪到8000吧，感觉有点难。没事，先立个小目标。</p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test blog</title>
    <link href="/2019/11/21/test-blog/"/>
    <url>/2019/11/21/test-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog"></a>My first blog</h1><h2 id="welcome-to-my-bloy"><a href="#welcome-to-my-bloy" class="headerlink" title="welcome to my bloy"></a>welcome to my bloy</h2><pre><code class="hljs c">print(<span class="hljs-string">&quot;hello world!&quot;</span>)</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
