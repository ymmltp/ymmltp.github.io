<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Database</title>
    <link href="/2021/12/01/Database/"/>
    <url>/2021/12/01/Database/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Entity Framework</title>
    <link href="/2021/11/10/EntityFramework/"/>
    <url>/2021/11/10/EntityFramework/</url>
    
    <content type="html"><![CDATA[<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><pre><code class="hljs C++">动态条件查询var item = db.pmsheets.ToList();    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(department))        item = item.Where(e =&gt; e.department == department).ToList();    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(project))        item = item.Where(e =&gt; e.project == project).ToList();    var items = item.Select(e =&gt; <span class="hljs-keyword">new</span> &#123;        paras = e.station    &#125;).Distinct().ToList();</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bootstrapSelect</title>
    <link href="/2021/11/04/bootstrapSelect/"/>
    <url>/2021/11/04/bootstrapSelect/</url>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap-Select"><a href="#Bootstrap-Select" class="headerlink" title="Bootstrap Select"></a>Bootstrap Select</h2><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>:</span><span class="hljs-function">全选：<span class="hljs-title">data</span>-<span class="hljs-title">none</span>-<span class="hljs-title">selected</span>-<span class="hljs-title">text</span>="<span class="hljs-title">All</span>" <span class="hljs-title">data</span>-<span class="hljs-title">actions</span>-<span class="hljs-title">box</span>="<span class="hljs-title">true</span>"</span><span class="hljs-function">是否支持多选：<span class="hljs-title">multiple</span></span><span class="hljs-function">多选最多：<span class="hljs-title">data</span>-<span class="hljs-title">max</span>-<span class="hljs-title">options</span>="5" </span><span class="hljs-function">是否支持查询：<span class="hljs-title">data</span>-<span class="hljs-title">live</span>-<span class="hljs-title">search</span>="<span class="hljs-title">true</span>"</span><span class="hljs-function">下拉框显示的<span class="hljs-title">option</span>个数：<span class="hljs-title">data</span>-<span class="hljs-title">size</span>="6"</span></code></pre><pre><code class="hljs javascript">&lt;select id=<span class="hljs-string">"machine-select"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control selectpicker"</span> title=<span class="hljs-string">"Select Machine"</span>  multiple data-size=<span class="hljs-string">"6"</span> data-live-search=<span class="hljs-string">"true"</span> data-max-options=<span class="hljs-string">"5"</span> &gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre><p>bootstrap-select js 控制选择</p><pre><code class="hljs javascript"></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openCV</title>
    <link href="/2021/10/18/openCV/"/>
    <url>/2021/10/18/openCV/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h1><p>参考文件：<a href="https://docs.opencv.org/4.5.2/d5/d10/tutorial_js_root.html" target="_blank" rel="noopener">https://docs.opencv.org/4.5.2/d5/d10/tutorial_js_root.html</a></p><h3 id="1、常用方法："><a href="#1、常用方法：" class="headerlink" title="1、常用方法："></a>1、常用方法：</h3><pre><code class="hljs javascript"><span class="hljs-comment">//读取图片-&gt; mat对象</span>cv.imread(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'imageSrc'</span>))<span class="hljs-comment">//输出到canvas</span>cv.inshow(<span class="hljs-string">'canvasOutput2'</span>,dst)  <span class="hljs-comment">//element id,mat类型的对象</span><span class="hljs-comment">//设置画布大小</span>cv.Size(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>)cv.resize(src, src, dsize);  <span class="hljs-comment">// 输入对象，输出对象，输出对象的大小</span><span class="hljs-comment">//设置画面颜色 (对画面操作前最好将其转换成RGB)</span><span class="hljs-comment">//https://blog.csdn.net/keith_bb/article/details/53470170</span>cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, <span class="hljs-number">0</span>);cv.threshold(src, src, <span class="hljs-number">100</span>, <span class="hljs-number">255</span>, cv.THRESH_OTSU);<span class="hljs-comment">//cvtColor+threshold 将图片转为二进制图像</span><span class="hljs-comment">//轮廓检索</span><span class="hljs-comment">//https://blog.csdn.net/dcrmg/article/details/51987348</span> cv.findContours(src, contours, hierarchy, cv.RETR_TREE, cv.CHAIN_APPROX_NONE); <span class="hljs-comment">//灰度图片或二进制图像，存储轮廓，存储每个轮廓的相对关系，轮廓检索模式，轮廓近似方法</span><span class="hljs-comment">//绘制轮廓</span><span class="hljs-comment">//https://blog.csdn.net/qq_18343569/article/details/47982167</span>cv.drawContours(src_clone, contours, i, color, <span class="hljs-number">1</span>);<span class="hljs-comment">//图片描线</span>cv.Canny()<span class="hljs-comment">//图片模糊</span>cv.blur()cv.filter()</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tree</title>
    <link href="/2021/10/14/tree/"/>
    <url>/2021/10/14/tree/</url>
    
    <content type="html"><![CDATA[<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><h3 id="二叉排序树（二叉查找树）（BST）："><a href="#二叉排序树（二叉查找树）（BST）：" class="headerlink" title="二叉排序树（二叉查找树）（BST）："></a>二叉排序树（二叉查找树）（BST）：</h3><p>左节点&lt;根节点&lt;右节点 </p><h3 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）:"></a>平衡二叉树（AVL）:</h3><p>左右子树的高度差的绝对值&lt;=1</p><h3 id="哈夫曼树："><a href="#哈夫曼树：" class="headerlink" title="哈夫曼树："></a>哈夫曼树：</h3><p>带权路径长度 = 权<em>根到节点的边数<br>所有 *</em>叶子节点** 的带权路径长度之和（WPL）最小的树</p><h3 id="B树（多路平衡查找树）绝对平衡"><a href="#B树（多路平衡查找树）绝对平衡" class="headerlink" title="B树（多路平衡查找树）绝对平衡"></a>B树（多路平衡查找树）绝对平衡</h3><p>1、最多的<strong>分叉</strong>，称为树的阶：5阶B树：一个节点最多有5个分叉，最少有3个分叉；最多4个元素。最少有2个元素<br>2、节点中的的元素是有序的<br>3、非根节点(ceil(m/2),m)个子树，（ceil(m/2)-1，m-1）个元素<br>   根节点（1，m）个子树，（1，m-1）个元素<br>4、所有的叶节点（其实都是null,就是查找失败的节点）都出现在同一层，叶节点的上一层，称为终端节点<br>5、B树的高度，通常不包含叶子节点（失败节点，null）<br>6、各个节点的关键字是不重复的<br>7、每个关键字中还包含指向内容的指针。</p><h3 id="B-树-绝对平衡"><a href="#B-树-绝对平衡" class="headerlink" title="B+树 绝对平衡"></a>B+树 绝对平衡</h3><p>类似分块查找<br>根节点也至少需要两个子树，否则不是B+树<br>1、节点中的关键字个数和子树个数相同<br>2、所有的叶子节点，包含所有的关键字，及指向对应记录的指针，<br>3、叶节点中关键字按大小顺序排列，且相邻的叶节点按大小顺序链接起来（<strong>支持顺序查找</strong>）<br>4、所有分支节点中仅包含子节点关键字的最大值以及指向子节点的指针<br>5、非根节点：(ceil(m/2),m)，分支数=元素个数<br>   根节点（1，m）<br>6、分支节点中出现过的数字，还会在子节点中出现<br>7、分支节点，只起到索引的作用。并不包含指向内容的指针</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>平衡二叉查找树的变体,左右子树高度差可以大于一,不一定平衡，但一定是二叉查找树<br>1、 结点是红色或黑色。<br>2、根结点是黑色。<br>3、所有叶子都是黑色。（叶子是NIL结点）<br>4、每个红色结点的两个子结点都是黑色。（从每个叶子到根的所有路径上不能有两个连续的红色结点）<br>5、从任一节结点其每个叶子的所有路径都包含相同数目的黑色结点</p><h3 id="堆-必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质"><a href="#堆-必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质" class="headerlink" title="堆 必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质"></a>堆 必须插满一层，才能进入第二层，但各层左右节点之间不满足二叉排序树的性质</h3><p>堆的插入：<br>永远插入最后一个位置，再进行排序，和交换，使当前堆满足堆的属性<br>堆的删除：<br>使用最后一个数填补被删除的数，再进行排序，交换，使当前堆满足堆的属性</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL Learning</title>
    <link href="/2021/10/13/postgreSQL/"/>
    <url>/2021/10/13/postgreSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>###1、注意点：</p><blockquote><p>1、大写(A)的名字，需要用双引号（”A”）,使其生效，否者会报错： column “a” does not exist<br>2、Trigger怎么写？？？？语法错误</p></blockquote><p>###2、postgreSql in VS .net</p><blockquote><p>选择 .net 4.6.1<br>1、安装插件 Npgsql PostgreSQL Integration<br>2、安装 EF框架 无框架限制<br>3、安装 Npgsql 注意.net版本<br>4、安装 EF6 for Npgsql 提供postgresql的ADO模型，要匹配：.net 以及 2,3 的版本</p></blockquote><p>###2、postgreSql in VS .net Core</p><blockquote><p>1、安装插件 Npgsql PostgreSQL Integration<br>2、安装 EF框架：Microsoft.EntityFrameworkCore<br>3、Microsoft.EntityFrameworkCore.Tools<br>4、安装 Npgsql: Npgsql.EntityFrameworkCore.PostgreSQL<br>5、Npgsql.EntityFrameworkCore.PostgreSQL.Design<br>6、cmd-&gt;cd 进入工程文件.csproj所在的文件夹 -&gt;<br>dotnet ef dbcontext scaffold “Host=cnwuxm1medb01;Database=FOF;Username=FOFUser;Password=Jabil123” Npgsql.EntityFrameworkCore.PostgreSQL -o Model</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC</title>
    <link href="/2021/08/26/MVC/"/>
    <url>/2021/08/26/MVC/</url>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="cshtml"><a href="#cshtml" class="headerlink" title=".cshtml"></a>.cshtml</h3><p>cs生成HTML界面，所以每刷新一次，都要重新生成界面。<br>_layout.cshtml每次加载都刷新</p><p>Q:如何在客户端与服务器之间建立一次链接；并生成cookie.cookie有效时间为，整个通话期间，界面关闭，删除cookie.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2021杂记</title>
    <link href="/2021/06/30/2021/"/>
    <url>/2021/06/30/2021/</url>
    
    <content type="html"><![CDATA[<h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><h3 id="20210223"><a href="#20210223" class="headerlink" title="20210223"></a>20210223</h3>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edu2021</title>
    <link href="/2020/11/10/edu2021/"/>
    <url>/2020/11/10/edu2021/</url>
    
    <content type="html"><![CDATA[<h2 id="考研相关"><a href="#考研相关" class="headerlink" title="考研相关"></a>考研相关</h2><p>华东师范大学 数据科学与工程学院  当代数据管理系统</p><p>1、政治（101）</p><p>2、英语1（201）</p><p>3、数学2（302）</p><p>4、专业课：数据科学与工程综合（824）</p><h2 id="专业课考点及参考资料（824）"><a href="#专业课考点及参考资料（824）" class="headerlink" title="专业课考点及参考资料（824）"></a>专业课考点及参考资料（824）</h2><h3 id="1）数据结构与程序设计："><a href="#1）数据结构与程序设计：" class="headerlink" title="1）数据结构与程序设计："></a>1）数据结构与程序设计：</h3><p>数据结构的概念；算法及其时间和空间复杂度分析；常用线性结构：栈、队列，循环队列, 数组, 字符串等；线性结构的链式存储，链表、双向链表、循环链表、链式队列、链式栈；递归概念、递归程序设计、回溯法、广度优先搜索、深度优先搜索；列表：查找的概念，顺序查找与二分查找；哈希表：利用哈希表进行查找，哈希冲突的解决；排序的概念：排序算法(插入排序、冒泡排序、快速排序、堆排序、基数排序等)；树：基本性质、常用存储结构、遍历算法、二叉树、二叉查找树、堆、二叉平衡树、多路树（Trie树，B树）；图：基本概念、存储结构、遍历算法、生成树、拓扑排序、最短路径；C++语言程序设计：数据类型、操作符和表达式、控制流程、函数、程序结构、数组、指针、结构和共用体、基本输入输出、类与对象。 </p><p>参考教材：克鲁斯（Robert L. Kruse）等著. 《数据结构与程序设计——C++语言描述》 高等教育出版社，2001 （第1-12章） </p><h3 id="2）数据管理系统及应用："><a href="#2）数据管理系统及应用：" class="headerlink" title="2）数据管理系统及应用："></a>2）数据管理系统及应用：</h3><p>数据库的基本概念：数据库、数据库管理系统、DBA；数据模型的基本概念：层次模型、网状模型、关系模型；关系模型：关系代数、关系演算；查询语言：SQL（DDL、DML）；数据库设计：数据库模式、范式、ER图、逻辑设计、物理设计、约束的使用；事务处理：ACID属性、事务在程序中的使用方法、并发控制、日志、恢复；数据库的基本工作原理：数据的存储方式、索引、查询的执行方式、查询优化；数据库的辅助工具：存储过程、触发器、软件访问数据库的方式（ODBC）。</p><p>参考教材：王珊、萨师煊，《数据库系统概论》第五版，高等教育出版社，2014年（第1-11章） </p><h3 id="3）操作系统："><a href="#3）操作系统：" class="headerlink" title="3）操作系统："></a>3）操作系统：</h3><p>系统调用概念与机制、常用文件与进程相关的系统调用（POSIX）、操作系统结构、微内核、虚拟机、单道程序、多道程序、运行态、就绪态、阻塞态、新建态、僵死态、进程、进程模型、线程、线程模型、进程控制块 (PCB)、陷入、抢占、FCFS进程调度、时间片轮转调度、优先级调度、多重队列调度、最短进程优先调度、两级调度、同步、互斥竞争条件、临界区、忙等算法、锁变量、原子操作、信号量、管程、消息、饿死、经典IPC问题、两阶段加锁、I/O 的各种控制方式、设备驱动程序、SPOOLing、死锁、死锁预防、死锁检测、死锁避免、银行家算法、RAM盘、磁盘、磁盘调度算法、时钟、终端设备、虚拟存储器、地址重定位、地址映射、逻辑地址、物理地址、固定分区、可变分区（动态分区）、交换、内碎片、外碎片、首次适配法、下次适配法、最佳适配法、最差适配法、分页、分段、页表、页表项、虚页、页框、多级页表、TLBs，翻译后援存储器（快表）、逆向页表、最近未使用页面替换算法（NRU）、先进先出页面替换算法（FIFO）、第二次机会页面替换算法、时钟页面替换算法、最久未使用页面替换算法（LRU）、软件模拟LRU算法 （NFU）、老化算法、Belady异常、系统抖动、工作集模型、工作集、文件系统、文件、目录文件、字符设备文件、块设备文件、硬链接、符号链接、目录项、i-node、超级块、打开文件表、文件系统安装、块高速缓存、文件系统的性能、一致性检查、文件系统安全性与保护机制。</p><p> 参考教材：[荷] Andrew S. Tanenbaum / [荷] Herbert Bos著，陈向群 / 马洪兵等译， 《现代操作系统（原书第4版）》机械工业出版社，2017 </p><h3 id="4）概率论与数理统计初步："><a href="#4）概率论与数理统计初步：" class="headerlink" title="4）概率论与数理统计初步："></a>4）概率论与数理统计初步：</h3><p>样本空间与概率的基本概念：概率模型、条件概率基本概念、全概率定理和贝叶斯准则及它们的应用、独立性；离散随机变量，概率质量函数（分布列）的基本概念、常用离散概率分布（如伯努利分布、二项分布、几何分布、泊松分布等）、随机变量的函数、期望、均值与方差、常用离散概率分布的期望与方差计算和结论、多个随机变量的联合分布、事件条件下的随机变量与随机变量取特定值条件下的随机变量、条件期望、随机变量与事件的独立性、随机变量之间的独立性、多个随机变量的相互独立性；连续随机变量：连续随机变量、概率密度函数、累积分布函数、正态分布、多个随机变量的联合概率密度、连续随机变量的条件和独立性、连续贝叶斯准则及其应用；随机变量函数：随机变量函数的概念和其PDF计算方法、卷积的概念和计算方法、协方差和相关系数、条件期望和条件方差及其在估计中的应用；极限定理：马尔可夫和切比雪夫不等式、弱大数定理和依概率收敛、中心极限定理及其应用、强大数定理和以概率1收敛；随机过程初步：伯努利过程、泊松过程、离散时间的马尔可夫链；统计推断初步：贝叶斯统计推断的概念、点估计、贝叶斯最小均方估计、经典参数估计、假设检验、显著性检验。</p><p>参考教材：Dimitri P. Bertsekas, John N. Tsitsiklis著，郑忠国，童行伟译.《概率导论（第2版，修订版）》. 人民邮电出版社. 2016 （第1-9章）</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>1、<a href="https://yjszs.ecnu.edu.cn/system/sscsfwlist.asp" target="_blank" rel="noopener">硕士研究生招生考试科目初试范围一览(仅供参考)</a></p><p>2、<a href="https://yz.chsi.com.cn/" target="_blank" rel="noopener">中国研究生招生信息网</a></p><p>3、<a href="https://yjszs.ecnu.edu.cn/index.asp" target="_blank" rel="noopener">华东师范大学研究生招生信息网</a></p><p>4、<a href="https://souky.eol.cn/" target="_blank" rel="noopener">研究生招生报名查询系统</a></p><p>5、<a href="http://ecnu.fanya.chaoxing.com/portal" target="_blank" rel="noopener">华东师范大学网络教学平台</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#</title>
    <link href="/2020/11/05/languageC/"/>
    <url>/2020/11/05/languageC/</url>
    
    <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>override(重写):与父类函数特征（函数名、参数类型与个数）相同</p><p>overload(重载):同一个类中的方法名相同，但函数特征不同，可省略</p><p>new(overwrite覆写):与父类中同名的方法，也称为覆盖，覆盖不会改变父类方法的功能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dom指令</title>
    <link href="/2020/09/22/Dom/"/>
    <url>/2020/09/22/Dom/</url>
    
    <content type="html"><![CDATA[<h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><table><thead><tr><th align="left">CODE</th><th align="left">MEAN</th></tr></thead><tbody><tr><td align="left">netstat -aon|findstr “9050</td><td align="left">//查看port是否被占用</td></tr><tr><td align="left">netstat -ano</td><td align="left">//查看系统正在使用的port</td></tr></tbody></table><h2 id="通信相关"><a href="#通信相关" class="headerlink" title="通信相关"></a>通信相关</h2><table><thead><tr><th>CODE</th><th>MEAN</th></tr></thead><tbody><tr><td>telnet   [IP]</td><td></td></tr><tr><td>ping  [IP]  [port]</td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>promise</title>
    <link href="/2020/09/18/promise/"/>
    <url>/2020/09/18/promise/</url>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>js中具有嵌套关系的ajax异步操作代码过于冗长，使用promise可以用简洁的方式呈现异步操作。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> TestFnc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)</span>&#123;    <span class="hljs-comment">//resolve()返回正常值</span>    <span class="hljs-comment">//reject()返回异常值</span>&#125;)</code></pre><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><p>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些学习遇到的问题</title>
    <link href="/2020/09/17/Question/"/>
    <url>/2020/09/17/Question/</url>
    
    <content type="html"><![CDATA[<h3 id="1、JS相关"><a href="#1、JS相关" class="headerlink" title="1、JS相关"></a>1、JS相关</h3><h4 id="Q-如何对promise中的方法添加监听事件"><a href="#Q-如何对promise中的方法添加监听事件" class="headerlink" title="Q:如何对promise中的方法添加监听事件"></a>Q:如何对promise中的方法添加监听事件</h4><blockquote></blockquote><h4 id="Q-Ajax"><a href="#Q-Ajax" class="headerlink" title="Q:Ajax"></a>Q:Ajax</h4><blockquote></blockquote><h3 id="2-HTTP相关问题"><a href="#2-HTTP相关问题" class="headerlink" title="2.HTTP相关问题"></a>2.HTTP相关问题</h3><h4 id="Q-Cookie-Session-token"><a href="#Q-Cookie-Session-token" class="headerlink" title="Q:Cookie,Session,token"></a>Q:Cookie,Session,token</h4><blockquote></blockquote><h4 id="Q-网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js-怎么处理"><a href="#Q-网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js-怎么处理" class="headerlink" title="Q:网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js,怎么处理"></a>Q:网页发布了新的功能，但是用户因为有本地缓存，而没有加载最新的js,怎么处理</h4><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36820717/article/details/81663351" target="_blank" rel="noopener">https://blog.csdn.net/qq_36820717/article/details/81663351</a></p><p>给js/css文件设置版本号，并动态获取版本号，以确保每次更新js/css内容</p></blockquote><h3 id="3-C-相关"><a href="#3-C-相关" class="headerlink" title="3.C#相关"></a>3.C#相关</h3><h4 id="Q-什么是Interface"><a href="#Q-什么是Interface" class="headerlink" title="Q:什么是Interface"></a>Q:什么是Interface</h4><blockquote></blockquote><h4 id="Q-委托"><a href="#Q-委托" class="headerlink" title="Q:委托"></a>Q:委托</h4><blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/2020/08/20/javascript/"/>
    <url>/2020/08/20/javascript/</url>
    
    <content type="html"><![CDATA[<h2 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h2><p>1、判断数组是否包含某个元素：indexOf<br>2、js直接给input元素赋值不能触发onchange事件：</p><h2 id="2、知识提升"><a href="#2、知识提升" class="headerlink" title="2、知识提升"></a>2、知识提升</h2><p>a标签不跳转</p><h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><p><a href="https://www.cnblogs.com/zhaoxiaoying/p/9031890.html" target="_blank" rel="noopener">1、const,var,let的区别</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2020/08/19/ajax/"/>
    <url>/2020/08/19/ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><h3 id="1、ajax基本用法"><a href="#1、ajax基本用法" class="headerlink" title="1、ajax基本用法"></a>1、ajax基本用法</h3><pre><code class="hljs javascript">.ajaxSend( Event event, jqXHR jqXHR, PlainObject ajaxOptions)   <span class="hljs-comment">//在ajax request发送前触发</span>.ajaxStart()       <span class="hljs-comment">//when the first Ajax request begins</span>.ajaxSuccess(Event event, jqXHR jqXHR, PlainObject ajaxOptions, PlainObject data)     <span class="hljs-comment">//whenever an Ajax request completes successfully</span>.ajaxComplete(Event event, jqXHR jqXHR, PlainObject ajaxOptions)  <span class="hljs-comment">//ajax完成时触发</span>.ajaxError( Event event, jqXHR jqXHR, PlainObject ajaxSettings, <span class="hljs-built_in">String</span> thrownError ) <span class="hljs-comment">//ajax完成，但是返回码不是200时触发</span>.ajaxStop()  <span class="hljs-comment">//when all Ajax requests have completed</span></code></pre><pre><code class="hljs javascript">$.ajax(&#123;    url: <span class="hljs-string">"https://www.e-pm.com.cn/api/user/Adduser"</span>,    type: <span class="hljs-string">"POST/GET"</span>,         <span class="hljs-comment">//jquery-1.9.0及之后改为method</span>    cache:<span class="hljs-literal">false</span>,              <span class="hljs-comment">//只在Get方法中生效 It works by appending "_=&#123;timestamp&#125;" to the GET parameters</span>    crossDomain:<span class="hljs-literal">false</span>,         <span class="hljs-comment">//是否跨域  crossDomain (default: false)</span>    asycn: <span class="hljs-literal">true</span>,             <span class="hljs-comment">//是否异步  async (default: true)</span>    contentType: <span class="hljs-string">'json'</span>,      <span class="hljs-comment">//发送的文件类型 (default: 'application/x-www-form-urlencoded; charset=UTF-8')</span>    processData:<span class="hljs-literal">true</span>         <span class="hljs-comment">//通过contentType的属性将data中的内容转义成string(default:true) If you want to send a DOMDocument, or other non-processed data, set this option to false.</span>    data:&#123;&#125;,                  <span class="hljs-comment">//传递的参数</span>    dataType:<span class="hljs-string">'json'</span>,          <span class="hljs-comment">//服务器返回的文件类型（"xml","json"返回的数据不是json格式或者&#123;&#125;/null都会报错,"text","script"）</span>    converters:<span class="hljs-string">"* text"</span>,      <span class="hljs-comment">//修改返回参数的类型 (default: &#123;"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML&#125;)</span>    dataFilter:<span class="hljs-built_in">Function</span>( <span class="hljs-built_in">String</span> data, <span class="hljs-built_in">String</span> type )&#123;        <span class="hljs-comment">//data:服务器返回的参数，type:dataType中定义的参数</span>        <span class="hljs-comment">//对返回值进行预处理，作用于Success之前,返回的结果共后续的方法使用</span>    &#125;,    statusCode: &#123;        <span class="hljs-number">404</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            alert( <span class="hljs-string">"page not found"</span> );        &#125;    &#125;    success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res,status,xhr</span>)</span>&#123;    <span class="hljs-comment">//success funciton</span>    &#125;,    fail:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-comment">//fail funcion</span>    &#125;,    error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,status,xhr</span>)</span>&#123;            &#125;,    complete:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> jqXHR jqXHR, String textStatus </span>)</span>&#123;    &#125;,&#125;);<span class="hljs-comment">//ajaxSetup:ajax配置。此后，每一个ajax方法都将使用setup中的参数。</span><span class="hljs-comment">//ajax中的所有参数都可以配置到setup中，注意，该方法全局生效。</span>$.ajaxSetup(&#123;  url: <span class="hljs-string">"/xmlhttp/"</span>,  global: <span class="hljs-literal">false</span>,  type: <span class="hljs-string">"POST"</span>&#125;);$.ajax(&#123;     <span class="hljs-comment">// url not set here; uses /xmlhttp/</span>    data: myData &#125;);</code></pre><h3 id="2、ajax上传文件"><a href="#2、ajax上传文件" class="headerlink" title="2、ajax上传文件"></a>2、ajax上传文件</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"eq-img"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"eq-img"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"eq-img-input"</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">"selectImage(this)"</span> /&gt;</span></code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectImage</span>(<span class="hljs-params">file</span>) </span>&#123;    <span class="hljs-keyword">var</span> item = file.files[<span class="hljs-number">0</span>];    <span class="hljs-keyword">var</span> index = item.name.lastIndexOf(<span class="hljs-string">"."</span>)+<span class="hljs-number">1</span>;    <span class="hljs-keyword">var</span> type = item.name.substring(index).toLowerCase();    <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">"jpg"</span> &amp;&amp; type !== <span class="hljs-string">"png"</span>)&#123;        alert(<span class="hljs-string">"只能上传jpg和png格式的图片！"</span>);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">var</span> HTMLimgID = $(file)[<span class="hljs-number">0</span>].id.replace(<span class="hljs-string">"-input"</span>, <span class="hljs-string">""</span>);        <span class="hljs-keyword">if</span> (!file.files || !file.files[<span class="hljs-number">0</span>]) &#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader();        reader.readAsDataURL(file.files[<span class="hljs-number">0</span>]);        reader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;            <span class="hljs-built_in">document</span>.getElementById(HTMLimgID).src = evt.target.result;  <span class="hljs-comment">//在img中加载图片</span>            <span class="hljs-comment">//把文件加载到form里，利用form上传</span>            <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData();            formData.append(<span class="hljs-string">'name'</span>, file.files[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//上传的应该是一个file对象，name是服务器端需要的对象名</span>            $.ajax(&#123;                url: <span class="hljs-string">"https://www.e-pm.com.cn/api/image/SaveImages2"</span>,                data: formData,                type: <span class="hljs-string">"post"</span>,                cache:<span class="hljs-literal">false</span>,                contentType: <span class="hljs-literal">false</span>,                processData: <span class="hljs-literal">false</span>,                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;                    <span class="hljs-comment">//success funciton</span>                &#125;,                fail: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;                    <span class="hljs-comment">//fail funcion</span>                &#125;            &#125;);        &#125;    &#125;&#125;</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://api.jquery.com/category/ajax/" target="_blank" rel="noopener">ajax库</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql Learning</title>
    <link href="/2020/08/11/mysql/"/>
    <url>/2020/08/11/mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="Mysql基础用法"><a href="#Mysql基础用法" class="headerlink" title="Mysql基础用法"></a>Mysql基础用法</h2><h3 id="1-增、删、改、查"><a href="#1-增、删、改、查" class="headerlink" title="1.增、删、改、查"></a>1.增、删、改、查</h3><h4 id="查询–Select"><a href="#查询–Select" class="headerlink" title="查询–Select"></a>查询–Select</h4><pre><code class="hljs mysql">Select * from [Table]                       &#x2F;&#x2F;查询整个表select * from [Table] where [Project]&#x3D;&#39;A&#39; and [Equipment Number]&#x3D;&#39;b&#39; and ……   &#x2F;&#x2F;查询Project下内容为A的数据select distinct program FROM A            &#x2F;&#x2F;相同的program会被合并SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2</code></pre><h4 id="增加–Insert"><a href="#增加–Insert" class="headerlink" title="增加–Insert"></a>增加–Insert</h4><pre><code class="hljs mysql">Insert into [Table]([表头]，[表头]，[表头]) values(&#39;值&#39;,&#39;值&#39;,&#39;值&#39;)    Olecmd.ExecuteNonQuery();&#x2F;&#x2F;写入表</code></pre><h4 id="修改–Update"><a href="#修改–Update" class="headerlink" title="修改–Update"></a>修改–Update</h4><pre><code class="hljs mysql">update [Table] set [列]&#x3D;&#39;value&#39; where [Project]&#x3D;&#39;&quot; + comboBox1.Text + &quot;&#39;and [Equipment Name]&#x3D;&#39;&quot; + comboBox2.Text + &quot;&#39;and [Model]&#x3D;&#39;&quot; + comboBox3.Text + &quot;&#39;&quot;</code></pre><h4 id="删除–Delete"><a href="#删除–Delete" class="headerlink" title="删除–Delete"></a>删除–Delete</h4><pre><code class="hljs mysql">delete from [table] where……;delete from [table] limit num;  &#x2F;&#x2F;删除固定几行</code></pre><h4 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h4><p>replace可以起到Insert和Update的效果，但是使用需要注意</p><h3 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2.数据库操作"></a>2.数据库操作</h3><h3 id="3-常见方法"><a href="#3-常见方法" class="headerlink" title="3.常见方法"></a>3.常见方法</h3><pre><code class="hljs mysql">order bydesc</code></pre><h3 id="4-实例"><a href="#4-实例" class="headerlink" title="4.实例"></a>4.实例</h3><h5 id="查询每组数据的前几个"><a href="#查询每组数据的前几个" class="headerlink" title="查询每组数据的前几个"></a>查询每组数据的前几个</h5><p>（例如：每班前三名的同学）</p><p>查询每个人最近20次点检用时：</p><pre><code class="hljs mysql">SELECT c.DRI,c.pmTime,c.DateFROM pmhistory cWHERE(SELECT count(1) AS IDFROM pmhistory a WHERE a.DRI &#x3D; c.DRI AND a.Date &gt;&#x3D; c.Date) &lt;&#x3D; 20ORDER BY c.DRI,c.Date desc</code></pre><h2 id="Mysql进阶"><a href="#Mysql进阶" class="headerlink" title="Mysql进阶"></a>Mysql进阶</h2><h3 id="1-EXPLAIN的使用与分析"><a href="#1-EXPLAIN的使用与分析" class="headerlink" title="1.EXPLAIN的使用与分析"></a>1.EXPLAIN的使用与分析</h3>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas Learning</title>
    <link href="/2020/07/30/canvas/"/>
    <url>/2020/07/30/canvas/</url>
    
    <content type="html"><![CDATA[<h2 id="Canvas的定义"><a href="#Canvas的定义" class="headerlink" title="Canvas的定义"></a>Canvas的定义</h2><p><span style="color:red">html属性中的width和height，不要使用css样式，因为这个属性除了定义画板大小，还定义了画板的分辨率</span></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"canvas"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"border:1px solid gray;margin:50px auto;display:block"</span>&gt;</span>            当前浏览器不支持canvas(只有浏览器不支持canvas时才会显示这段话)/或者在js中判断canvas.getContext('2d')是否为空。        <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">            <span class="hljs-comment">//canvas是基于状态来绘制的</span></span><span class="javascript">            <span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-keyword">var</span> canvas=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"canvas"</span>);</span><span class="actionscript">                <span class="hljs-comment">//使用Context绘制</span></span><span class="actionscript">                <span class="hljs-keyword">var</span> context=canvas.getContext(<span class="hljs-string">'2d'</span>);</span>            &#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="Canvas的用法"><a href="#Canvas的用法" class="headerlink" title="Canvas的用法"></a>Canvas的用法</h2><h3 id="1、常用方法"><a href="#1、常用方法" class="headerlink" title="1、常用方法"></a>1、常用方法</h3><p><span style="color:red">canvas是基于状态来绘制的</span></p><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><pre><code class="hljs javascript"><span class="hljs-comment">//js中定义画板的大小用width和height属性，</span>canvas.width=<span class="hljs-number">1024</span>;canvas.height=<span class="hljs-number">768</span>;<span class="hljs-comment">//2D绘图</span><span class="hljs-comment">//获取画板对象</span><span class="hljs-keyword">var</span> context=canvas.getContext(<span class="hljs-string">'2d'</span>);  <span class="hljs-comment">//2d画板</span><span class="hljs-comment">//绘图接口</span><span class="hljs-comment">//画板左上角为原点，向右X正，向下Y正</span>context.moveTo(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.lineTo(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);<span class="hljs-comment">//设置绘制范围 不一定要同时出现</span>context.beginPath(); <span class="hljs-comment">//开始一个新的路径，beginPath + lineTo = moveTo</span>context.closePath(); <span class="hljs-comment">//当绘制的图形不是闭合图形时，会自动闭合，对fill无效，可以避免线段宽度带来的间隙</span><span class="hljs-comment">//刷新画布内容</span>cxt.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,WINDOW_WIDTH,WINDOW_HEIGHT);  <span class="hljs-comment">//3D绘图</span><span class="hljs-keyword">var</span> context=canvas.getContext(<span class="hljs-string">'3d'</span>);  <span class="hljs-comment">//3d画板</span><span class="hljs-comment">//点是否在画布内</span>context.isPointInPath(x,y);<span class="hljs-comment">//添加事件</span>canvas.addEventListener(<span class="hljs-string">"mouseup"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>);</span></code></pre><h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><pre><code class="hljs javascript"><span class="hljs-comment">//线条绘制</span><span class="hljs-comment">//设置画笔的属性</span>context.lineWidth = <span class="hljs-number">5</span>;context.lineCap = <span class="hljs-string">"butt"</span>/<span class="hljs-string">"round"</span>/<span class="hljs-string">"square"</span> <span class="hljs-comment">//线条起始形状，默认，圆形，方形</span>context.lineJoin = <span class="hljs-string">"miter"</span>/<span class="hljs-string">"bevel"</span>/<span class="hljs-string">"round"</span> <span class="hljs-comment">//线条相交部分的效果 ，尖角（默认），平角，圆角</span>context.miterLimit = <span class="hljs-number">10</span>(默认值); <span class="hljs-comment">//相交线段的内角与外角距离的最大像素差，一旦超过这个值，lineJoin默认bevel</span>context.strokeStyle = <span class="hljs-string">"#ff0000"</span>; <span class="hljs-comment">//支持css样式</span><span class="hljs-comment">//绘制线条</span>context.stroke();  <span class="hljs-comment">//图形填充</span><span class="hljs-comment">//设置填充属性</span>context.fillStyle= <span class="hljs-string">"rgb(2,100,222)"</span>;<span class="hljs-comment">//填充图形 （如果填充发生在绘制线条之后，会使线条的宽度发生变化。所以一般要先填充再绘线）</span>context.fill();<span class="hljs-comment">//绘制矩形</span>context.rect(x,y,width,height)<span class="hljs-comment">//规划矩形路线，需要使用stroke和fill来绘图，矩形的位置，宽高</span>context.strokeRect(x,y,width,height)<span class="hljs-comment">//绘制矩形边框，使用的属性和stroke一样</span>context.fillRect(x,y,width,height)<span class="hljs-comment">//绘制填充的矩形，使用的属性和fill一样</span><span class="hljs-comment">//绘制圆 </span><span class="hljs-comment">//(3点钟方向为0*pi/2*pi,6点钟方向0.5*pi,9点钟方向1*pi,12点钟方向1.5*pi)</span>context.arc(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>*<span class="hljs-built_in">Math</span>.PI,<span class="hljs-literal">false</span>); <span class="hljs-comment">//圆心坐标(X,Y),半径，起始弧度，结束弧度，是否逆时针</span>context.actTo(x1,y1,x2,y2,r); <span class="hljs-comment">//配合moveTo(x0,y0可以绘制半径为r,同时相切与直线(x0,y0)-(x1,y1)和直线(x1,y1)-(x2,y2)的弧线(x0,y0)-(x1,y1)部分可能会有直线；起始点是(x0,y0)，但结束点是圆弧与直线(x1,y1)-(x2,y2)的切点</span></code></pre><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><pre><code class="hljs javascript"><span class="hljs-comment">//二次曲线</span>context.moveTo(x0,y0);context.quadraticCurveTo(x1,y1,x2,y2); <span class="hljs-comment">// 绘制起始点为(x0,y0),控制点为(x1,y1),结束点为(x2,y2)的曲线</span><span class="hljs-comment">//三次曲线</span>context.moveTo(x0,y0);context.bezierCurveTo(x1,y1,x2,y2,x3,y3); <span class="hljs-comment">// 绘制起始点为(x0,y0),控制点为(x1,y1),(x2,y2),结束点为(x3,y3)的曲线</span></code></pre><h4 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h4><pre><code class="hljs javascript">context.translate(x,y); <span class="hljs-comment">// 位移，位移的移动是叠加的，所以移动之后需要反向移回，或者使用save,restore</span>context.scale(a,b); <span class="hljs-comment">//长宽，会放大图像的所有属性（起始点坐标，线宽,图形大小）</span>context.rotate(deg); <span class="hljs-comment">//旋转</span>context.transform(a,b,c,d,e,f);<span class="hljs-comment">//水平缩放，水平倾斜，垂直倾斜，垂直缩放，水平位移，垂直位移transform和位移类似，是叠加的，可以使用setTransform，将他设成初始值</span>context.setTransform(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//不考虑之前所有的transform</span><span class="hljs-comment">//这两者应该成对出现,进行图型变换前最好先保存。</span>context.save();<span class="hljs-comment">//保存当前状态</span>context.restore();<span class="hljs-comment">//回复至前一次保存的状态</span></code></pre><h4 id="渐变色（可作为fillStyle-strokeStyle的值）"><a href="#渐变色（可作为fillStyle-strokeStyle的值）" class="headerlink" title="渐变色（可作为fillStyle/strokeStyle的值）"></a>渐变色（可作为fillStyle/strokeStyle的值）</h4><pre><code class="hljs javascript"><span class="hljs-comment">//线性渐变色</span><span class="hljs-keyword">var</span> grd = context.createLinearGradient(xstart,ystart,xend,yend); <span class="hljs-comment">// </span>grd.addColorStop(stop,color);<span class="hljs-comment">//放射性渐变</span><span class="hljs-keyword">var</span> grd = context.createRadialGradient(x0,y0,r0,x1,y1,r1); <span class="hljs-comment">// 在两个圆中间进行渐变</span>grd.addColorStop(stop,color);<span class="hljs-comment">//图像做背景填充</span><span class="hljs-keyword">var</span> pattern = context.createPattern(img/canvas/video,repeat-style); <span class="hljs-comment">//填充对象可以是图片，canvas,或vedio;repear-stylt = no-rapeat/repeat-x/repeat-y/repeat</span></code></pre><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><pre><code class="hljs javascript"><span class="hljs-comment">//配置文字属性</span>context.font = <span class="hljs-string">"bold 40px Arial"</span>; <span class="hljs-comment">//默认值20px sans-serif</span><span class="hljs-comment">//font属性的所有值font-style(normal italic oblique),font-variant(normal small-caps),font-weight(normal/400 bold/700 ),font-size(20px 20em 100%),font-family(支持多备选字体 @font-face)</span><span class="hljs-comment">//绘制填充文字</span>context.fillStyle =<span class="hljs-string">"#058"</span>; <span class="hljs-comment">//可以使用渐变色和图像为背景</span>context.fillText(<span class="hljs-string">"Welcome..."</span>,<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>); <span class="hljs-comment">//string,x,y,文字最大长度（选填）</span><span class="hljs-comment">//绘制边框文字</span>context.strokeStyle =<span class="hljs-string">"#058"</span>;  <span class="hljs-comment">//可以使用渐变色和图像为背景</span>context.strokeText(<span class="hljs-string">"Hello..."</span>,<span class="hljs-number">500</span>,<span class="hljs-number">100</span>，<span class="hljs-number">200</span>);<span class="hljs-comment">//文字对齐</span>context.textAlign = center/right/left <span class="hljs-comment">//文字水平对齐，针对指定的x坐标</span>context.textBaseline = top/middle/bottom <span class="hljs-comment">//文字垂直对齐，针对指定的y坐标</span><span class="hljs-comment">//文本的度量</span>context.measureText(string).width</code></pre><h3 id="2、高级方法"><a href="#2、高级方法" class="headerlink" title="2、高级方法"></a>2、高级方法</h3><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><pre><code class="hljs javascript"><span class="hljs-comment">//可用于文字，图片</span>context.shadowColor  <span class="hljs-comment">//类似于fillStyle</span>context.shadowOffsetXcontext.shadowOffsetYcontext.shadowBlur   <span class="hljs-comment">// 阴影模糊程度，越大越模糊</span></code></pre><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><pre><code class="hljs javascript">context.globalAlpha = <span class="hljs-number">0.7</span> <span class="hljs-comment">//全局透明度属性</span>context.globalCompositeOperation = <span class="hljs-string">"source-over"</span> <span class="hljs-comment">//全局图像覆盖属性</span></code></pre><table><thead><tr><th>图2覆盖图1</th><th>图1覆盖图2</th><th>其他特性</th></tr></thead><tbody><tr><td>source-over</td><td>destination-over</td><td>lighter:重叠处颜色叠加</td></tr><tr><td>source-atop:显示图1以及图2在图1内部的部分</td><td>destination-atop:显示图2以及图1在图2内部的部分</td><td>copy:只绘制图2</td></tr><tr><td>source-in:显示图2在图1内部的部分</td><td>destination-in:显示图1在图2内部的部分</td><td>xor:重叠处图像挖空</td></tr><tr><td>source-out:显示图2在图1外部的部分</td><td>destination-out:显示图1在图2内部的部分</td><td></td></tr></tbody></table><h4 id="剪辑区域"><a href="#剪辑区域" class="headerlink" title="剪辑区域"></a>剪辑区域</h4><pre><code class="hljs javascript">context.clip()  <span class="hljs-comment">//将之前绘制的封闭图形作为新的画布环境</span></code></pre><p><strong>实例</strong></p><p>实现一个探照灯效果</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">light</span>(<span class="hljs-params"></span>)</span>&#123;    setInterval( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; draw(context);            update(canvas.width,canvas.height); &#125;, <span class="hljs-number">40</span>); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span>(<span class="hljs-params">cxt</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">var</span> canvas = cxt.canvas;    cxt.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvas.width,canvas.height);        cxt.save();    cxt.beginPath();    cxt.fillStyle=<span class="hljs-string">"black"</span>;    cxt.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvas.width,canvas.height);    cxt.beginPath();    cxt.arc(cycle.x,cycle.y,cycle.radius,<span class="hljs-number">0</span>,<span class="hljs-built_in">Math</span>.PI*<span class="hljs-number">2</span>);    cxt.fillStyle=<span class="hljs-string">"white"</span>;    cxt.fill();    cxt.clip();  <span class="hljs-comment">//只会显示出圆形内部的内容</span>    cxt.font = <span class="hljs-string">"bold 150px Arial"</span>;    cxt.textAlign = <span class="hljs-string">"center"</span>;    cxt.textBaseline = <span class="hljs-string">"middle"</span>;    cxt.fillStyle = <span class="hljs-string">"#058"</span>;    cxt.fillText(<span class="hljs-string">"CANVAS"</span>,canvas.width/<span class="hljs-number">2</span>,canvas.height/<span class="hljs-number">4</span>);  <span class="hljs-comment">//文字是画在原来的方形画布上的</span>    cxt.fillText(<span class="hljs-string">"CANVAS"</span>,canvas.width/<span class="hljs-number">2</span>,canvas.height/<span class="hljs-number">2</span>);    cxt.fillText(<span class="hljs-string">"CANVAS"</span>,canvas.width/<span class="hljs-number">2</span>,canvas.height/<span class="hljs-number">4</span>*<span class="hljs-number">3</span>);    cxt.restore();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">width,height</span>)</span>&#123;    cycle.x += cycle.vx;    cycle.y += cycle.vy;    <span class="hljs-keyword">if</span>(cycle.x-cycle.radius&lt;=<span class="hljs-number">0</span>)    &#123;        cycle.vx = -cycle.vx;        cycle.x =cycle.radius;    &#125;    <span class="hljs-keyword">if</span>(cycle.x+cycle.radius&gt;=width)    &#123;        cycle.vx = -cycle.vx;        cycle.x = width - cycle.radius;    &#125;    <span class="hljs-keyword">if</span>(cycle.y-cycle.radius&lt;=<span class="hljs-number">0</span>)    &#123;        cycle.vy = -cycle.vy;        cycle.y = cycle.radius;    &#125;    <span class="hljs-keyword">if</span>(cycle.y+cycle.radius&gt;=height)    &#123;        cycle.vy = -cycle.vy;        cycle.y = height - cycle.radius;    &#125;&#125;</code></pre><h4 id="路径方向和剪纸效果"><a href="#路径方向和剪纸效果" class="headerlink" title="路径方向和剪纸效果"></a>路径方向和剪纸效果</h4><p><span style = "color:red">使用fill()的这个特性实现剪纸效果</span></p><pre><code class="hljs javascript">context.fill();  <span class="hljs-comment">//遵循非零环绕原则,绘图与路径方向有关</span></code></pre><p><strong>例子</strong>:</p><pre><code class="hljs javascript">context.beginPath();context.arc(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>,<span class="hljs-number">300</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI,<span class="hljs-literal">false</span>); context.arc(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>,<span class="hljs-number">150</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI,<span class="hljs-literal">true</span>);  <span class="hljs-comment">//context.arc(400,400,150,0,2*Math.PI,false); </span>context.closePath();context.fillStyle=<span class="hljs-string">"blue"</span>;context.shadowColor= <span class="hljs-string">"gray"</span>;context.shadowOffsetX = <span class="hljs-number">10</span>;context.shadowOffsetY = <span class="hljs-number">10</span>;context.shadowBlur = <span class="hljs-number">10</span>;context.fill();</code></pre><h4 id="Canvas交互实例"><a href="#Canvas交互实例" class="headerlink" title="Canvas交互实例"></a>Canvas交互实例</h4><p>点击改变小球的颜色</p><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"cv"</span>); <span class="hljs-keyword">var</span> context = canvas.getContext(<span class="hljs-string">"2d"</span>); balls  = [];<span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;    canvas.width = <span class="hljs-number">800</span>;    canvas.height = <span class="hljs-number">800</span>;     CreateBalls();    drawBall();    canvas.addEventListener(<span class="hljs-string">"mouseup"</span>,detect);   <span class="hljs-comment">//部署鼠标事件mousemove,mousedown</span>&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CreateBalls</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)    &#123;        <span class="hljs-keyword">var</span> ABall = &#123;        x:<span class="hljs-built_in">Math</span>.random()*canvas.width,        y:<span class="hljs-built_in">Math</span>.random()*canvas.height,        radius:<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">20</span>+<span class="hljs-number">20</span>,        &#125;        balls[i] = ABall;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawBall</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i &lt;balls.length;i++)    &#123;        context.beginPath();        context.fillStyle = <span class="hljs-string">"#058"</span>;        context.arc(balls[i].x,balls[i].y,balls[i].radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI);        context.fill();    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detect</span>(<span class="hljs-params">event</span>)</span>&#123;    <span class="hljs-keyword">var</span> x = event.clientX - canvas.getBoundingClientRect().left;  <span class="hljs-comment">//获取鼠标点击在画布上的位置</span>    <span class="hljs-keyword">var</span> y = event.clientY - canvas.getBoundingClientRect().top;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;balls.length;i++)    &#123;        context.beginPath();        context.arc(balls[i].x,balls[i].y,balls[i].radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI);        <span class="hljs-keyword">if</span>(context.isPointInPath(x,y))  <span class="hljs-comment">//判断(x,y)是否在所绘制的图形内部</span>        &#123;            context.fillStyle = <span class="hljs-string">"red"</span>;            context.fill();        &#125;    &#125;&#125;</code></pre><h4 id="在Canvas上使用HTML其他元素"><a href="#在Canvas上使用HTML其他元素" class="headerlink" title="在Canvas上使用HTML其他元素"></a>在Canvas上使用HTML其他元素</h4><p>1、Canvas标签内部的内容只有在Canvas无效时才能看见</p><p>2、使用绝对定位将一个新的div至于Canvas之上，在新的div中布置HTML元素</p><h4 id="扩充Canvas函数方法"><a href="#扩充Canvas函数方法" class="headerlink" title="扩充Canvas函数方法"></a>扩充Canvas函数方法</h4><p>增加一个方法</p><pre><code class="hljs javascript">CanvasRenderingContext2D.prototype.fillStar = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r,R,x,y,rot</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">this</span>.beginPath();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        <span class="hljs-keyword">this</span>.lineTo(<span class="hljs-built_in">Math</span>.cos((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*R+x,                    -<span class="hljs-built_in">Math</span>.sin((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*R+y);        <span class="hljs-keyword">this</span>.lineTo(<span class="hljs-built_in">Math</span>.cos((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*r+x,                    -<span class="hljs-built_in">Math</span>.sin((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>-rot)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*r+y);    &#125;    <span class="hljs-keyword">this</span>.closePath();    <span class="hljs-keyword">this</span>.fill();&#125;</code></pre><p>复写一个方法（不推荐），增加一个属性</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"canvas"</span>);<span class="hljs-keyword">var</span> context = canvas.getContext(<span class="hljs-string">'2d'</span>);<span class="hljs-keyword">var</span> originalMoveTo = CanvasRenderingContext2D.prototype.moveTo;CanvasRenderingContext2D.prototype.lastMoveToLoc = &#123;&#125;;  <span class="hljs-comment">//增加的新属性</span>CanvasRenderingContext2D.prototype.moveTo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)</span>&#123;    originalMoveTo.apply(context,[x,y]);    <span class="hljs-keyword">this</span>.lastMoveToLoc.x = x;    <span class="hljs-keyword">this</span>.lastMoveToLoc.y = y;&#125;</code></pre><h4 id="Canvas兼容"><a href="#Canvas兼容" class="headerlink" title="Canvas兼容"></a>Canvas兼容</h4><p>1、IE6,7,8可以添加explorecanvas库来兼容。</p><h4 id="Canvas图形库"><a href="#Canvas图形库" class="headerlink" title="Canvas图形库"></a>Canvas图形库</h4><p>1、<a href="https://code.google.com/archive/p/canvasplus" target="_blank" rel="noopener">canvasplus</a></p><p>2、<a href="https://northwardcompass.com/artisanjs-a-generative-art-and-canvas-extension/" target="_blank" rel="noopener">Artisan JS</a></p><p>3、<a href="https://www.rgraph.net/" target="_blank" rel="noopener">Rgraph:图表图形库</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code class="hljs javascript"><span class="hljs-comment">//canvas是基于状态来绘制的，只使用最后一次赋值的属性</span><span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> canvas=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"canvas"</span>);    <span class="hljs-comment">//使用Context绘制</span>    <span class="hljs-keyword">var</span> context=canvas.getContext(<span class="hljs-string">'2d'</span>);        context.moveTo(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);    context.lineTo(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);    context.lineTo(<span class="hljs-number">100</span>,<span class="hljs-number">700</span>);    context.lineTo(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);    <span class="hljs-comment">//设置画笔的属性</span>    context.fillStyle= <span class="hljs-string">"rgb(2,100,222)"</span>;    context.fill();    <span class="hljs-comment">//设置画笔的属性</span>    context.lineWidth = <span class="hljs-number">5</span>;    context.strokeStyle = <span class="hljs-string">"#ff0000"</span>;    context.stroke();      context.moveTo(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);    context.lineTo(<span class="hljs-number">800</span>,<span class="hljs-number">700</span>);    context.strokeStyle = <span class="hljs-string">"black"</span>;  <span class="hljs-comment">//black会覆盖上面的 "#ff0000"，所以最后都是黑色线条</span>    context.stroke();          <span class="hljs-comment">//绘制圆弧</span>    context.lineWidth = <span class="hljs-number">5</span>;    context.strokeStyle  =<span class="hljs-string">"#005588"</span>;    context.arc(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>*<span class="hljs-built_in">Math</span>.PI,<span class="hljs-literal">true</span>);    context.stroke();&#125;</code></pre><h4 id="如何绘制两个不同的线条"><a href="#如何绘制两个不同的线条" class="headerlink" title="如何绘制两个不同的线条"></a>如何绘制两个不同的线条</h4><pre><code class="hljs javascript"><span class="hljs-comment">//绘制第一个图形</span>context.beginPath();context.moveTo(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.lineTo(<span class="hljs-number">700</span>,<span class="hljs-number">700</span>);context.lineTo(<span class="hljs-number">100</span>,<span class="hljs-number">700</span>);context.lineTo(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);context.closePath();context.lineWidth = <span class="hljs-number">5</span>;context.strokeStyle = <span class="hljs-string">"#ff0000"</span>;context.stroke();  <span class="hljs-comment">//绘制第二个图形</span>context.beginPath();context.moveTo(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);context.lineTo(<span class="hljs-number">800</span>,<span class="hljs-number">700</span>);context.closePath();context.strokeStyle = <span class="hljs-string">"black"</span>;context.stroke();</code></pre><h4 id="绘制七巧板"><a href="#绘制七巧板" class="headerlink" title="绘制七巧板"></a>绘制七巧板</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"canvas"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"800"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"border:1px solid gray;margin:50px auto;display:block"</span>&gt;</span>            当前浏览器不支持canvas.../或者在js中判断canvas.getContext('2d')是否为空。        <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">            <span class="hljs-comment">//定义七巧板</span></span><span class="javascript">            <span class="hljs-keyword">let</span> tangram = [</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">0</span>,y:<span class="hljs-number">0</span>&#125;,&#123;x:<span class="hljs-number">800</span>,y:<span class="hljs-number">0</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">400</span>&#125;],color:<span class="hljs-string">"#caff67"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">0</span>,y:<span class="hljs-number">0</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">400</span>&#125;,&#123;x:<span class="hljs-number">0</span>,y:<span class="hljs-number">800</span>&#125;],color:<span class="hljs-string">"#67becf"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">800</span>,y:<span class="hljs-number">0</span>&#125;,&#123;x:<span class="hljs-number">800</span>,y:<span class="hljs-number">400</span>&#125;,&#123;x:<span class="hljs-number">600</span>,y:<span class="hljs-number">600</span>&#125;,&#123;x:<span class="hljs-number">600</span>,y:<span class="hljs-number">200</span>&#125;],color:<span class="hljs-string">"#ef2d61"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">600</span>,y:<span class="hljs-number">200</span>&#125;,&#123;x:<span class="hljs-number">600</span>,y:<span class="hljs-number">600</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">400</span>&#125;],color:<span class="hljs-string">"#f9f51a"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">400</span>&#125;,&#123;x:<span class="hljs-number">600</span>,y:<span class="hljs-number">600</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">800</span>&#125;,&#123;x:<span class="hljs-number">200</span>,y:<span class="hljs-number">600</span>&#125;],color:<span class="hljs-string">"#a594c0"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">200</span>,y:<span class="hljs-number">600</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">800</span>&#125;,&#123;x:<span class="hljs-number">0</span>,y:<span class="hljs-number">800</span>&#125;],color:<span class="hljs-string">"#fa8ecc"</span>&#125;,</span><span class="actionscript">                &#123;p:[&#123;x:<span class="hljs-number">800</span>,y:<span class="hljs-number">400</span>&#125;,&#123;x:<span class="hljs-number">800</span>,y:<span class="hljs-number">800</span>&#125;,&#123;x:<span class="hljs-number">400</span>,y:<span class="hljs-number">800</span>&#125;],color:<span class="hljs-string">"#f6ca29"</span>&#125;,</span>            ]<span class="javascript">            <span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-keyword">var</span> canvas=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"canvas"</span>);</span><span class="actionscript">                <span class="hljs-keyword">var</span> context=canvas.getContext(<span class="hljs-string">'2d'</span>);    <span class="hljs-comment">//使用Context绘制</span></span><span class="actionscript">                tangram.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span></span>&#123;</span>                    draw(item,context);                &#125;)            &#125;<span class="actionscript">            <span class="hljs-comment">//画图方法</span></span><span class="actionscript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span><span class="hljs-params">(piece,cxt)</span></span></span>            &#123;                cxt.beginPath();                cxt.moveTo(piece.p[0].x,piece.p[0].y);<span class="actionscript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; piece.p.length; i++)</span>                &#123;                    cxt.lineTo(piece.p[i].x,piece.p[i].y);                &#125;                cxt.closePath();<span class="actionscript">                <span class="hljs-comment">//设置画笔的属性</span></span>                cxt.fillStyle= piece.color;                cxt.fill();<span class="actionscript">                cxt.strokeStyle=<span class="hljs-string">"black"</span>;</span>                cxt.lineWidth=2;                cxt.stroke();            &#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="简单的球体掉落"><a href="#简单的球体掉落" class="headerlink" title="简单的球体掉落"></a>简单的球体掉落</h4><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ball = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">512</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">r</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">g</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">vx</span>:<span class="hljs-number">-4</span>,<span class="hljs-attr">vy</span>:<span class="hljs-number">-10</span>,<span class="hljs-attr">color</span>:<span class="hljs-string">"#005588"</span>&#125;;<span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"cv"</span>);    canvas.width = <span class="hljs-number">1024</span>;    canvas.height = <span class="hljs-number">768</span>;    <span class="hljs-keyword">var</span> context = canvas.getContext(<span class="hljs-string">"2d"</span>);    setInterval(        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            render(context);            update();        &#125;,<span class="hljs-number">20</span> <span class="hljs-comment">//50ms执行一次，所以帧率是20</span>    );&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span> (<span class="hljs-params"></span>)</span>&#123;    ball.x+=ball.vx;    ball.y+=ball.vy;    ball.vy+=ball.g;    <span class="hljs-keyword">if</span>(ball.y&gt;=<span class="hljs-number">768</span>-ball.r)    &#123;        ball.y = <span class="hljs-number">768</span>-ball.r;        ball.vy = -ball.vy*<span class="hljs-number">0.5</span>;  <span class="hljs-comment">//0.5的摩擦系数</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">cxt</span>)</span>&#123;    cxt.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,cxt.canvas.width,cxt.canvas.height);    cxt.fillStyle = ball.color;    cxt.beginPath();    cxt.arc(ball.x,ball.y,ball.r,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI);    cxt.fill();&#125;</code></pre><h4 id="五角星"><a href="#五角星" class="headerlink" title="五角星"></a>五角星</h4><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawStar</span>(<span class="hljs-params">cxt,x,y,R,rot</span>)</span><span class="hljs-function"></span>&#123;    cxt.save();    cxt.translate(x,y);    cxt.rotate(rot/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI);    cxt.scale(R,R);    starPath(cxt);    cxt.fillStyle = <span class="hljs-string">"#fb3"</span>;    <span class="hljs-comment">//cxt.strokeStyle = "#fd5";</span>    <span class="hljs-comment">//cxt.lineWidth = 3;  // scale()方法会影响该属性</span>    cxt.lineJoin = <span class="hljs-string">"round"</span>;    cxt.fill();    <span class="hljs-comment">//cxt.stroke();</span>    cxt.restore();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">starPath</span>(<span class="hljs-params">cxt</span>)  //标准五角星</span><span class="hljs-function"></span>&#123;    cxt.beginPath();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        cxt.lineTo(<span class="hljs-built_in">Math</span>.cos((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI),                   -<span class="hljs-built_in">Math</span>.sin((<span class="hljs-number">18</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI));        cxt.lineTo(<span class="hljs-built_in">Math</span>.cos((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*<span class="hljs-number">0.5</span>,                   -<span class="hljs-built_in">Math</span>.sin((<span class="hljs-number">54</span>+i*<span class="hljs-number">72</span>)/<span class="hljs-number">180</span>*<span class="hljs-built_in">Math</span>.PI)*<span class="hljs-number">0.5</span>);    &#125;    cxt.closePath();&#125;</code></pre><p><strong>渐变色</strong></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> grd = context.createLinearGradient(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">800</span>);grd.addColorStop(<span class="hljs-number">0.0</span>,<span class="hljs-string">"#f00"</span>);grd.addColorStop(<span class="hljs-number">0.5</span>,<span class="hljs-string">"#0f0"</span>);grd.addColorStop(<span class="hljs-number">1.0</span>,<span class="hljs-string">"#00f"</span>);context.fillStyle = grd;context.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);</code></pre><h4 id="图片填充"><a href="#图片填充" class="headerlink" title="图片填充"></a>图片填充</h4><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> backgroundImage = <span class="hljs-keyword">new</span> Image;backgroundImage.src = <span class="hljs-string">""</span> ;backgroundImage.onload=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> pattern = context.createPattern(backgroundImage,<span class="hljs-string">"no-repeat"</span>);     context.fillStyle = pattern;    context.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,widht,height);&#125;</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1、<a href="https://www.w3.org/TR/2dcontext/" target="_blank" rel="noopener">Canvas,W3C标准</a></p><p>2、<a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">WHATWG标准</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2020/07/29/novel1/"/>
    <url>/2020/07/29/novel1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>《如果有来生》</p><p>如果有来生，要做一棵树，</p><p>站成永恒。</p><p>没有悲欢的姿势，</p><p>一半在尘土里安详，</p><p>一半在风里飞扬；</p><p>一半洒落荫凉，</p><p>一半沐浴阳光。</p><p>非常沉默、非常骄傲。</p><p>从不依靠、从不寻找。</p><p>​                                    —-三毛《写给自己》</p></blockquote><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p>风可以带走什么？</p><p>大概只有身上的泥土和一声浅浅的叹息吧。</p><p>看着那群勾肩搭背，欢笑着离去的背影，小树拍了拍身上的泥，撑着膝盖从地上爬起来，转身回家去了。这种事情他早就习以为常，也没必要感伤什么。妈妈在家做了好吃的饼子等他呢，回去晚了，凉了可就糟蹋那美味了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>清潭集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《朱生豪情书》节选</title>
    <link href="/2020/07/27/reader-1/"/>
    <url>/2020/07/27/reader-1/</url>
    
    <content type="html"><![CDATA[<h4 id="上"><a href="#上" class="headerlink" title="上"></a>上</h4><blockquote><ul><li>所谓爱的对象主要是自己想象出来的，并不一定真实存在，换句话说，无非是追求心灵的寄托。</li></ul></blockquote><p>你喜欢并不是我，而是想象中的我。</p><blockquote><ul><li>我的野心，便是想成为你的好朋友。现在我的野心，便是希望这样的友谊能够继续到死时。</li></ul><ul><li>人们的饥渴是存在于他们的灵魂内的，而引起这种饥渴来，使人们明白的感到苦恼，otherwise behind and unfelt的，是所谓幸福，凡幸福没有终极的止境，因此幸福愈大，则饥渴愈苦，因是我在心里说，清如，因为我是如此深爱你，所以让我们（我宁愿）永远维持着我们平淡的友谊啊！</li></ul></blockquote><blockquote><ul><li>我一定要吃糖，为着寂寞的缘故。</li><li>这里一切都是丑的，风，雨，太阳，都丑，人也丑，我也丑得很，只有你像青天一样可羡。</li><li>寄给你全宇宙的爱和自太古至永劫的思念。</li></ul></blockquote><blockquote><ul><li>如果不是因为这世界 有些古怪，我巴不得永远和你厮守在一起。</li></ul></blockquote><p>太露骨了兄弟</p><blockquote><ul><li>你说我们前世是不是冤家？我向来不把聚散看成一回事，在你之前，除你之外，我也并非没有好朋友，不知道为什么和你认识之后，便像被一根绳紧紧牵系住一样，怪不自由的，心也不能像从前一样轻了，但同时却又觉得比从前幸福得多。</li><li>愿意炼成一个坚强的钢铁样的信心，永远倾向着你。</li><li>我知道你顶明白我 ，但还是巴不得把心的每个角落给你看才痛快。</li><li>常常气闷的很，觉得什么人都讨厌，连自己的影子也讨厌，很愿意一个朋友也不要，不过想到你时，总是好像有点例外。</li><li>如果我不认识你，我一定更不幸。</li></ul></blockquote><blockquote><ul><li>醒来觉得甚是爱你。</li></ul></blockquote><blockquote><ul><li>我发誓永不自杀，除非有一天我厌倦了你。</li><li>每天每天你让别人看见你，我却看不见你，这全然是没有理由的。</li><li>我是属于你的，永远而且完全地。</li><li>我想作诗，写雨，写夜的相思，写你，写不出。</li><li>不许你再叫我先生，否则我要从字典上查出世界上最肉麻的称呼来称呼你。</li><li>我爱你，此外什么都不知道。</li><li>亲爱的小鬼，我要对你说些什么肉麻的话才好耶！</li></ul></blockquote><blockquote><ul><li>不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。</li></ul></blockquote><blockquote><ul><li><p>我愿舍弃一切，以想念你终此一生。</p></li><li><p>我不很快乐，因为你不很爱我，但所谓不很快乐者不等于不快乐，正如不很爱我不等于不爱我一样。</p></li></ul></blockquote><blockquote><ul><li>一个人不该太把自己看轻，如果你能使一个人倾心相爱，你总有特别使他钦佩的地方，不见得是因为他实在找不到朋友了才要找到你。</li></ul></blockquote><blockquote><ul><li><p>只要你不嫌吃力，一天对我讲四十八个钟头的话我都不会厌倦。</p></li><li><p>寂寞常常啮着我，唯你能给我感奋。</p></li></ul></blockquote><blockquote><ul><li>但愿未来我们终日在一起，每天每天从早晨口角到夜深，恨不得大家都走开。</li><li>至少你是如此的中我的意，使我不再希望有一个比你更好的人。</li><li>永远爱你，尽管你那样不好。</li><li>我想要在毛亭里看雨，假山边看蚂蚁，看蝴蝶恋爱，看蜘蛛结网，看水，看船，看云，看瀑布，看宋清如甜甜的睡觉。</li><li>要是你怪我不该爱你，那么使我爱你的实在是你自己。</li></ul></blockquote><blockquote><ul><li>比起你来，我也是幸福的多，因为我的朋友是一个天使，而你的朋友只是一个傻小子。</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>三味书屋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap Table学习笔记</title>
    <link href="/2020/07/21/bootstrapTable/"/>
    <url>/2020/07/21/bootstrapTable/</url>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap-Table基础用法"><a href="#Bootstrap-Table基础用法" class="headerlink" title="Bootstrap Table基础用法"></a>Bootstrap Table基础用法</h2><h5 id="1、使用js注册一个bootstrap-table"><a href="#1、使用js注册一个bootstrap-table" class="headerlink" title="1、使用js注册一个bootstrap-table"></a>1、使用js注册一个bootstrap-table</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"table"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><pre><code class="hljs javascript">$(<span class="hljs-string">'#table'</span>).bootstrapTable(&#123;    columns: [&#123;        field: <span class="hljs-string">'id'</span>,        title: <span class="hljs-string">'ID'</span>    &#125;, &#123;        field: <span class="hljs-string">'name'</span>,        title: <span class="hljs-string">'Name'</span>    &#125;, &#123;        field: <span class="hljs-string">'root'</span>,        title: <span class="hljs-string">'Root'</span>    &#125;],    data[&#123;    id:<span class="hljs-string">"1"</span>,    name:<span class="hljs-string">"Jack"</span>,    root:<span class="hljs-string">"User"</span>&#125;,&#123;    id:<span class="hljs-string">"2"</span>,    name:<span class="hljs-string">"Emily"</span>,    root:<span class="hljs-string">"Admin"</span>&#125;]&#125;);</code></pre><h5 id="2、html注册bootstrap-table"><a href="#2、html注册bootstrap-table" class="headerlink" title="2、html注册bootstrap-table"></a>2、html注册bootstrap-table</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span></span><span class="hljs-tag">  <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"table"</span></span><span class="hljs-tag">  <span class="hljs-attr">data-url</span>=<span class="hljs-string">"data1.json"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">"id"</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">"name"</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">"root"</span>&gt;</span>Root<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h2 id="Bootstrap-Table其他功能"><a href="#Bootstrap-Table其他功能" class="headerlink" title="Bootstrap Table其他功能"></a>Bootstrap Table其他功能</h2><p>（参考官网文档）</p><h5 id="1、使用html开启相关功能"><a href="#1、使用html开启相关功能" class="headerlink" title="1、使用html开启相关功能"></a>1、使用html开启相关功能</h5><p>​    data-[属性名称]</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span></span><span class="hljs-tag">  <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"table"</span></span><span class="hljs-tag">  <span class="hljs-attr">data-url</span>=<span class="hljs-string">"data1.json"</span>  </span><span class="hljs-tag">  <span class="hljs-attr">data-pagination</span>=<span class="hljs-string">"true"</span></span><span class="hljs-tag">  <span class="hljs-attr">data-search</span>=<span class="hljs-string">"true"</span></span><span class="hljs-tag">  <span class="hljs-attr">data-sortable</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h5 id="2、使用js配置相关功能"><a href="#2、使用js配置相关功能" class="headerlink" title="2、使用js配置相关功能"></a>2、使用js配置相关功能</h5><pre><code class="hljs javascript"><span class="hljs-comment">//初始化主表格</span>$(<span class="hljs-string">'#table'</span>).bootstrapTable(<span class="hljs-string">'destroy'</span>).bootstrapTable(&#123;    url: <span class="hljs-string">'Ashx/Select.ashx?type=equipmentHistory'</span>, <span class="hljs-comment">//请求后台的URL（*）</span>    method: <span class="hljs-string">'get'</span>,                      <span class="hljs-comment">//请求方式（*）</span>    cache: <span class="hljs-literal">false</span>,                       <span class="hljs-comment">//清除缓存</span>    search: <span class="hljs-literal">true</span>,                       <span class="hljs-comment">//开启搜索框</span>    visibleSearch: <span class="hljs-literal">true</span>,    showSearchButton: <span class="hljs-literal">true</span>,    showColumns: <span class="hljs-literal">true</span>,                  <span class="hljs-comment">//可以自主选择显示哪些列</span>    striped: <span class="hljs-literal">true</span>,                      <span class="hljs-comment">//是否显示行间隔</span>    sortable: <span class="hljs-literal">true</span>,                     <span class="hljs-comment">//是否启用排序</span>    sortName: <span class="hljs-string">'id'</span>,    sortOrder: <span class="hljs-string">"desc"</span>,                  <span class="hljs-comment">//排序方式</span>    queryParams: oTableInit.queryParams,<span class="hljs-comment">//传递参数（*）</span>    sidePagination: <span class="hljs-string">"client"</span>,           <span class="hljs-comment">//分页方式：client客户端分页，server服务端分页（*）</span>    pageNumber: <span class="hljs-number">1</span>,                      <span class="hljs-comment">//初始化加载第一页，默认第一页</span>    pageSize: <span class="hljs-number">10</span>,                       <span class="hljs-comment">//每页的记录行数（*）</span>    pageList: [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>],        <span class="hljs-comment">//可供选择的每页的行数（*）</span>    height: <span class="hljs-number">500</span>,                        <span class="hljs-comment">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度  </span>    detailView: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//显示详情，左侧加号</span>    detailFormatter:<span class="hljs-string">"detailFormatter"</span>,  <span class="hljs-comment">//通过detailFormatter()修改详情内容</span>    showExport: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">row, index</span>) </span>&#123; <span class="hljs-comment">//增加\Helper\html资料\bootstrap-table-excel-export中的js文件，实现表格内容导出功能</span>        <span class="hljs-keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();        <span class="hljs-keyword">var</span> bIsIpad = sUserAgent.match(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">"ipad"</span>;        <span class="hljs-keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">"iphone os"</span>;        <span class="hljs-keyword">var</span> bIsMidp = sUserAgent.match(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">"midp"</span>;        <span class="hljs-keyword">var</span> bIsUc7 = sUserAgent.match(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">"rv:1.2.3.4"</span>;        <span class="hljs-keyword">var</span> bIsUc = sUserAgent.match(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">"ucweb"</span>;        <span class="hljs-keyword">var</span> bIsAndroid = sUserAgent.match(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">"android"</span>;        <span class="hljs-keyword">var</span> bIsCE = sUserAgent.match(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">"windows ce"</span>;        <span class="hljs-keyword">var</span> bIsWM = sUserAgent.match(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">"windows mobile"</span>;        <span class="hljs-keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;,    clickToSelect: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//是否启用点击选中行</span>    exportDataType: <span class="hljs-string">"selected"</span>,            <span class="hljs-comment">//导出内容的范围'basic', 'all', 'selected'.</span>    exportTypes: [<span class="hljs-string">'csv'</span>, <span class="hljs-string">'excel'</span>, <span class="hljs-string">'xlsx'</span>], <span class="hljs-comment">//导出类型</span>    exportOptions: &#123;        fileName: <span class="hljs-string">'QN Report - '</span> + formatDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()), <span class="hljs-comment">//文件名称设置</span>        worksheetName: <span class="hljs-string">'Sheet1'</span>,           <span class="hljs-comment">//表格工作区名称</span>        tableName: <span class="hljs-string">'Laeq&amp;Lex'</span>,        excelstyles: [<span class="hljs-string">'background-color'</span>, <span class="hljs-string">'color'</span>, <span class="hljs-string">'font-size'</span>, <span class="hljs-string">'font-weight'</span>],    &#125;,    columns: [&#123;        checkbox: <span class="hljs-literal">true</span>    &#125;,         field: <span class="hljs-string">'id'</span>,        title: <span class="hljs-string">'ID'</span>    &#125;, &#123;        field: <span class="hljs-string">'name'</span>,        title: <span class="hljs-string">'Name'</span>,        visible: <span class="hljs-literal">false</span>, <span class="hljs-comment">//改行不可见，但是</span>    &#125;, &#123;        field: <span class="hljs-string">'root'</span>,        title: <span class="hljs-string">'Root'</span>    &#125;],     <span class="hljs-comment">//注册加载子表的事件。注意下这里的三个参数！需要设置detailView:true</span>     onExpandRow: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index, row, $detail</span>) </span>&#123;         InitSubTable(index, row, $detail);     &#125;&#125;);<span class="hljs-comment">//设置详情内容</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detailFormatter</span>(<span class="hljs-params">index, row</span>) </span>&#123;    <span class="hljs-keyword">var</span> html = []    $.each(row, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;        html.push(<span class="hljs-string">'&lt;p&gt;&lt;b&gt;'</span> + key + <span class="hljs-string">':&lt;/b&gt; '</span> + value + <span class="hljs-string">'&lt;/p&gt;'</span>)    &#125;);    <span class="hljs-keyword">return</span> html.join(<span class="hljs-string">''</span>);&#125;<span class="hljs-comment">//初始化子表格</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">InitSubTable</span> (<span class="hljs-params">index, row, $detail</span>) </span>&#123;    <span class="hljs-keyword">var</span> eqid = row.idEquipment;    <span class="hljs-keyword">var</span> cur_table = $detail.html(<span class="hljs-string">'&lt;table class="tablewhite"&gt;&lt;/table&gt;'</span>).find(<span class="hljs-string">'table'</span>);    $(cur_table).bootstrapTable(&#123;        url: <span class="hljs-string">'Ashx/Select.ashx?type=equipmentPMInfo&amp;eqID='</span>+eqid,        rowStyle:<span class="hljs-string">"rowStyleChild"</span>,  <span class="hljs-comment">//通过rowStyleChild()根据数据修改行的样式</span>        columns:[  &#123;            field: <span class="hljs-string">'PMCategory'</span>,            title: <span class="hljs-string">'PM Type'</span>        &#125;, &#123;            field: <span class="hljs-string">'AlarmDate'</span>,            title: <span class="hljs-string">'Alarm Date'</span>,            formatter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) </span>&#123;                <span class="hljs-keyword">return</span> changeDateFormat(value)  <span class="hljs-comment">//通过changeDateFormat()修改时间格式</span>            &#125;        &#125;, &#123;            field: <span class="hljs-string">'PmResult'</span>,            title: <span class="hljs-string">'Pm Result'</span>        &#125;],    &#125;);&#125;;<span class="hljs-comment">//根据条件修改行样式</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rowStyleChild</span>(<span class="hljs-params">row, index</span>) </span>&#123;    <span class="hljs-keyword">var</span> style = &#123;&#125;;         <span class="hljs-keyword">if</span> (row.PmResult !== <span class="hljs-string">"PASS"</span>) &#123;        style=&#123;<span class="hljs-attr">css</span>:&#123;<span class="hljs-string">'color'</span>:<span class="hljs-string">'#d9534f'</span>&#125;&#125;;        &#125;               <span class="hljs-keyword">return</span> style;&#125;<span class="hljs-comment">//修改时间格式</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeDateFormat</span>(<span class="hljs-params">cellval</span>) </span>&#123;    <span class="hljs-keyword">if</span> (cellval != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(cellval);        <span class="hljs-keyword">var</span> times = d.getFullYear() + <span class="hljs-string">'-'</span> + (d.getMonth() + <span class="hljs-number">1</span>) + <span class="hljs-string">'-'</span> + d.getDate();        <span class="hljs-keyword">return</span> times;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> cellval;    &#125;&#125;</code></pre><h5 id="2、js-动态加载数据"><a href="#2、js-动态加载数据" class="headerlink" title="2、js 动态加载数据"></a>2、js 动态加载数据</h5><pre><code class="hljs javascript"><span class="hljs-comment">//方法1</span><span class="hljs-keyword">var</span> url = <span class="hljs-string">""</span>; <span class="hljs-comment">//动态修改url的值</span>$(<span class="hljs-string">'#table'</span>).bootstrapTable(<span class="hljs-string">'refresh'</span>, &#123; <span class="hljs-string">'url'</span>: url &#125;);<span class="hljs-comment">//注意：url返回值应为json格式</span><span class="hljs-comment">//方法2</span>$(<span class="hljs-string">'#table'</span>).bootstrapTable(<span class="hljs-string">'load'</span>, data); <span class="hljs-comment">//注意：此处的data应为json格式，且key值和column的field名相对应</span><span class="hljs-comment">//方法2</span>$(<span class="hljs-string">'#table'</span>).bootstrapTable(<span class="hljs-string">'updateCell'</span>, &#123;    index: i,    field: <span class="hljs-string">'DRI'</span>,    value: data.DisplayName,&#125;); <span class="hljs-comment">//formatter中不支持ajax异步查询更换值，只能加载完table之后再使用updateCell方法。更新</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://www.bootstrap-table.com.cn/examples/options/table-height/" target="_blank" rel="noopener">Bootstrap Table官网实例</a></p><p>2、<a href="https://www.cnblogs.com/landeanfen/p/4993979.html" target="_blank" rel="noopener">bootstrap-table父子表</a></p><p>3、<a href="https://blog.csdn.net/qq_39215166/article/details/74452366?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">在table内添加按钮</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020杂记</title>
    <link href="/2020/06/30/2020/"/>
    <url>/2020/06/30/2020/</url>
    
    <content type="html"><![CDATA[<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="20200630"><a href="#20200630" class="headerlink" title="20200630"></a>20200630</h3><p>​        年初新冠来袭，至今（6月末）已有1000w人罹难，但是1000w于我而言终究是纸上的4个数字一个符号。2-3月份的时候，也天天看新闻，看国内转危为安，看国外水生火热，不是说没有同情心，真的事不关己，只能当茶余饭后的谈资来看。虽然嘴上说着些体恤别人的同情话，但终归没往心里去。</p><p>​        最近有些闲暇，咳嗽病又犯了，人也懒，无事可做，就想写点什么，聊以自慰，仿佛自己没有虚度这几日似的。</p><p>​        高中那会最爱写日记，因为上课太无聊，同学太有趣，不记下来好似亏了点什么，一年一本日记本不在话下。大学之后对写日记便觉兴趣乏乏，至今也没能写满一册。如今也是，仿佛生活中没了什么值得记忆的东西了，每天都是一样的，工作日工作，休息日躺着，要么逛吃逛吃，实在无趣。</p><p>​        我总说：如果生活很无趣，那就做一个有趣的人。</p><p>​        无奈懒惰至极，想法不少，鲜有实践的。</p><h3 id="我看苏同学"><a href="#我看苏同学" class="headerlink" title="我看苏同学"></a>我看苏同学</h3><p>​        说实在，苏同学是我顶佩服一人，尤其欣赏他那固执到有些偏执的拗劲，所以常常和他谈不拢就有种想揍他的冲动。</p><p>​        这人是真的执着。我是个极其随便的人，如果说不通我就不和你争；但苏同学不一样，他是一定要给你把道理讲通的，如果你不同意他，他就和你死耗，不知道他是对大家都这样，还是只我一人有此感受。这人不管做事还是讲话，都有点一根筋，大学时他帮我做毕设翻译，其实也就随口一提，结果他到来劲了。最后我已经困得睁不开眼了，他还在电话那边一个字一个字的给我报他翻译的中文，最后我俩搞到凌晨才做完，其实当时心里想的是：早知道往谷歌翻译里一丢，复制，粘贴就啥事都没有了……帮我做实验课的课题也是，本来就是一星期的作业，他非要赶在那两小时，我和另一个同学都饿得不行了，和他说：“没事的，我这个可以下周才交呢！”却回我们：“再等会，马上了，我有点眉目了”。最后还真让他做出来了，实在佩服。</p><p>​        这人也是离奇，高中时看《来自星星的你》，我们讨论的激烈，他问我们在讨论啥，如实说了，他说他也回去看看，第二天问他什么感受，张口就开，那个什么星球根本不存在，这剧不合理，我没看……给我们惊得。有时候觉得他这点很可爱，有时候又觉得这人真的离谱。</p><h3 id="20200714"><a href="#20200714" class="headerlink" title="20200714"></a>20200714</h3><p>​    说这样的话可能没什么依据，但是现在的父母真的是比我们的父母要对小孩负责的多。</p><p>​    就拿我现在工作的师傅来说，为了小孩放弃了更好的工作（当然他的家庭条件不需要她有一个高薪），虽然不能接送小孩，但是上下学总是第一时间打电话联系，时刻监督。上班也是除了工作就是在找孩子看的书，辅导资料，看一些关于小孩教育的文章。期末考还没结束，辅导班已经全报好了，假期作业也都发货了。（说实话，有点惨。）</p><p>​    而我小的时候，爸爸妈妈都在外面拼命赚钱，上学爷爷奶奶放假外公外婆，很少有一年半载爸妈一直在身边的经历。但也不是不管你，该打的也没少打。可我印象里，他们连家长会的鲜少参加。</p><p>​    不是说我们那代人的父母怎么不好，只是真的，社会越来越富裕了，家长对于孩子的付出已经远远超出物质层面。除了基本的生活需要，你还要关注他的心理健康，健全的人格和良好的价值观。所以父母真的越来越难当了。</p><p>​        </p><h3 id="20200914"><a href="#20200914" class="headerlink" title="20200914"></a>20200914</h3><p>​        我是个不会写故事也不会撒谎的人，流水账倒是会一些。</p><p>​        朝花夕拾，只的是个很美的词，是因为人的记忆总是会留下美好的事物吗？</p><p>​        如果现在谈我的人生或许有些为时过早，但从出生到24岁之前的日子，或许可以划分成三个阶段：</p><p>​        认识薛韵之前的，遇到薛韵的，和遇到薛韵之后。</p><p>​        认识薛韵之前，感觉生活什么烦恼也没有，就像饭后的散步，遇到很多人，聊聊家常，平淡的日复一日。</p><p>​        认识薛韵之后</p><h3 id="20201122"><a href="#20201122" class="headerlink" title="20201122"></a>20201122</h3><p>我这人有个毛病，不爱反省，也不会做长远打算，想一出是一出。所以最不爱历史，做事也坚持不过三两天，可能昨天想回家养猪，明天就想飞到月亮上去了。                  </p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css详细讲解</title>
    <link href="/2020/06/30/CssAdvance/"/>
    <url>/2020/06/30/CssAdvance/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>1、块级元素auto,是随父元素变化的</p><p>2、一旦元素被设为浮动，该元素的width就由内容元素决定</p><h3 id="PX-EM-REM"><a href="#PX-EM-REM" class="headerlink" title="PX/EM/REM"></a>PX/EM/REM</h3><h4 id="1、PX-像素"><a href="#1、PX-像素" class="headerlink" title="1、PX(像素)"></a>1、PX(像素)</h4><h4 id="2、EM"><a href="#2、EM" class="headerlink" title="2、EM"></a>2、EM</h4><p>EM继承父元素字体大小，默认1em=16px, 0.875em=4px, 0.75em=12px, 0.625em=10px</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;&#125;<span class="hljs-comment">/*简化换算*/</span><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;  <span class="hljs-comment">/*这样1.2em=12px*/</span></code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;&#125;   <span class="hljs-comment">/*简化换算 1em=10px*/</span></span><span class="css"><span class="hljs-selector-class">.con1</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;   <span class="hljs-comment">/*这样1.2em=12px*/</span></span><span class="css"><span class="hljs-selector-class">.con2</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;&#125;     <span class="hljs-comment">/*由于em继承父元素字体大小，此时font-size=1em=12px*/</span></span><span class="css"><span class="hljs-selector-class">.con3</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;&#125;   <span class="hljs-comment">/*由于em继承父元素字体大小，此时font-size=1.2em=12px*1.2=14.4px*/</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"con1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"con2"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"con3"</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><h4 id="3、REM"><a href="#3、REM" class="headerlink" title="3、REM"></a>3、REM</h4><p>REM类似于EM，但是他的大小只相对于html的根元素，可以忽略继承的层级关系。</p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><h2 id="Float-少用"><a href="#Float-少用" class="headerlink" title="Float(少用)"></a><a href="https://www.imooc.com/learn/121" target="_blank" rel="noopener">Float</a>(少用)</h2><p>float会使父容器高度塌陷（父容器的高度无法定位和使用）</p><p>float原本是用来实现文字环绕效果的</p><h4 id="1-清除float的影响"><a href="#1-清除float的影响" class="headerlink" title="1.清除float的影响"></a>1.清除float的影响</h4><ul><li><p>在block元素底部插入clear:both属性的元素【可以使用CSS after伪元素(IE6,IE7不识别)】 </p></li><li><p>BFC/haslayout(IE6/IE7)：使内部元素和外部完全隔绝</p><pre><code class="hljs css"><span class="hljs-selector-tag">IE8</span>及以上浏览器：<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:<span class="hljs-string">''</span>;<span class="hljs-attribute">display</span>:table;<span class="hljs-attribute">clear</span>:both&#125;IE6/IE7使用：.clearfix&#123;*zoom:1;&#125;</code></pre></li></ul><p style="color:red">.clearfix只应该用在包含浮动子元素的父级元素上</p><h4 id="2-float的滥用"><a href="#2-float的滥用" class="headerlink" title="2.float的滥用"></a>2.float的滥用</h4><ul><li>使元素block块状化</li><li>去空格化,使元素紧密排列(将空格的文字元素置后了,实现文字环绕)</li><li>float在低版本的IE(6,7)下会有很多问题</li></ul><h4 id="3-float与流体布局"><a href="#3-float与流体布局" class="headerlink" title="3.float与流体布局"></a>3.float与流体布局</h4><pre><code class="hljs css">左侧：<span class="hljs-selector-tag">width</span> + <span class="hljs-selector-tag">float</span><span class="hljs-selector-pseudo">:left</span>;右侧：padding-left/margin-left =  width</code></pre><p>自适应的流体布局:</p><pre><code class="hljs css">左侧：<span class="hljs-selector-tag">float</span>右侧：display:table-cell(IE8+)/inline-block(IE7)</code></pre><h2 id="Absolute"><a href="#Absolute" class="headerlink" title="Absolute"></a><a href="https://www.imooc.com/learn/192" target="_blank" rel="noopener">Absolute</a></h2><h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a><a href="https://www.imooc.com/learn/680" target="_blank" rel="noopener">Margin</a></h2><h4 id="1-百分比margin的计算规则"><a href="#1-百分比margin的计算规则" class="headerlink" title="1. 百分比margin的计算规则"></a>1. 百分比margin的计算规则</h4><ul><li>普通元素：不管是何种margin(margin-top;margin-bottom;margin-left;mergin-right)都是相对于父级元素的width计算的</li><li>绝对定位(position:absolute)元素：相对于第一个具有定位属性的祖先元素（relative/absolute/fixed）的width计算</li></ul><h4 id="2-margin重叠"><a href="#2-margin重叠" class="headerlink" title="2. margin重叠"></a>2. margin重叠</h4><ul><li><p><strong>通常特性：</strong><br>  只发生在block属性的元素上(不含float,absolute元素)<br>  不考虑writing-mode,只发生在垂直方向上(只有margin-top和margin-bottom会有此现象)</p></li><li><p><strong>种情景</strong><br>相邻的兄弟元素<br>父级和第一个/最后一个子元素<br>空block元素</p></li><li><p><strong>margin计算法则</strong><br> 正正取最大<br> 正负取相加<br> 负负取最负</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RegExp正则表达式</title>
    <link href="/2020/05/22/RegExp/"/>
    <url>/2020/05/22/RegExp/</url>
    
    <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>使用RegExp对象，或者直接在一对 ‘/ /‘中</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"\\d&#123;5&#125;"</span>,<span class="hljs-string">"g"</span>);  <span class="hljs-comment">//第一个参数：正则表达式主体部分；第二个参数：修饰符（选填）</span>   <span class="hljs-comment">//注意：转义字符'\'-&gt;'\\'.例如：'\d'-&gt;'\\d'</span><span class="hljs-keyword">var</span> a = <span class="hljs-regexp">/\d&#123;5&#125;/g</span>;                <span class="hljs-comment">//与第一种定义方式等价</span></code></pre><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><h4 id="1-直接量"><a href="#1-直接量" class="headerlink" title="1.直接量"></a>1.直接量</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">字母和数字字符</td><td align="center">自身</td></tr><tr><td align="center">\o</td><td align="center">NUL字符（\u0000）Unicode编码方式</td></tr><tr><td align="center">\t</td><td align="center">制表符（\u0009）</td></tr><tr><td align="center">\n</td><td align="center">换行符（\u000A）</td></tr><tr><td align="center">\v</td><td align="center">垂直制表符（\u000B）</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr><tr><td align="center">\r</td><td align="center">回车符</td></tr><tr><td align="center">\xnn</td><td align="center">由16进制数nn指定的拉丁字符；例：\x0A=\n</td></tr><tr><td align="center">\uxxxx</td><td align="center">由16进制数xxxx指定的Unicode字符；例：\u000A=\n</td></tr><tr><td align="center">\cX</td><td align="center">控制字符^X；例：\cJ=\n</td></tr></tbody></table><h4 id="2-具有特殊含义的符号"><a href="#2-具有特殊含义的符号" class="headerlink" title="2.具有特殊含义的符号"></a>2.具有特殊含义的符号</h4><blockquote><p>^  $  .  *  +  ?  =  !  :  |  \  /  ( )  [ ]  { }</p></blockquote><p>如果想使用这类字符的直接量，需要在前面加上，转义字符 &#39;\&#39; ；否则作为特殊字符使用。没有特殊含义的字符可直接使用。</p><h4 id="3-字符类"><a href="#3-字符类" class="headerlink" title="3.字符类"></a>3.字符类</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">[…]</td><td align="center">括号内任意字符</td></tr><tr><td align="center">[^…]</td><td align="center">非括号内大的任意字符</td></tr><tr><td align="center">.</td><td align="center">除换行符和其他Unicode终止符之外的任意字符</td></tr><tr><td align="center">\w</td><td align="center">ASCII码，=[a-zA-Z0-9]</td></tr><tr><td align="center">\W</td><td align="center">非ASCII码,=[ ^a-zA-Z0-9]</td></tr><tr><td align="center">\s</td><td align="center">任意的Unicode空白符</td></tr><tr><td align="center">\S</td><td align="center">任意的Unicode非空白符</td></tr><tr><td align="center">\d</td><td align="center">ASCII码数字，=[0-9]</td></tr><tr><td align="center">\D</td><td align="center">非ASCII码数字，=[ ^0-9]</td></tr><tr><td align="center">[\b]</td><td align="center">退格直接量</td></tr></tbody></table><p>[\b]无法和其他字符类连用；例：[\d\s]。必须写作[\b]才表示退格，[\b\d]是错误的。</p><h4 id="4-重复语法"><a href="#4-重复语法" class="headerlink" title="4.重复语法"></a>4.重复语法</h4><table><thead><tr><th align="center">字符</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">{n,m}</td><td align="center">重复至少n次，至多m次</td></tr><tr><td align="center">{n,}</td><td align="center">重复至少n次</td></tr><tr><td align="center">{n}</td><td align="center">重复n次</td></tr><tr><td align="center">?</td><td align="center">重复0或1次，={0，1}(及该项可选)</td></tr><tr><td align="center">+</td><td align="center">重复至少一次，={1，}</td></tr><tr><td align="center">*</td><td align="center">重复至少0次，={0,}</td></tr></tbody></table><p>以上字符都是尽可能多的匹配（贪婪的匹配），如果要实现非贪婪的匹配，可以在语句后添加’？‘</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-regexp">/\d&#123;3&#125;|[a-z]&#123;4&#125;/</span>;   <span class="hljs-comment">//匹配前三个数字，后四个是小写字母</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">"12345678"</span>.match(<span class="hljs-regexp">/[0-9]&#123;1,6&#125;?/</span>);    <span class="hljs-comment">//=&gt;[ '1', index: 0, input: '12345678', groups: undefined ]</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">"12345678"</span>.match(<span class="hljs-regexp">/[0-9]&#123;1,6&#125;/</span>);     <span class="hljs-comment">//=&gt;[ '123456', index: 0, input: '12345678', groups: undefined ]</span></code></pre><p>正则表达式的匹配，总是会寻找字符串中第一个可能匹配的位置，所以下面的两种写法，查询到的结果是一样的</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> kat=<span class="hljs-string">"aaab"</span>.match(<span class="hljs-regexp">/a+?b/</span>);     <span class="hljs-comment">//=&gt;[ 'aaab', index: 0, input: 'aaab', groups: undefined ]</span><span class="hljs-keyword">var</span> kat=<span class="hljs-string">"aaab"</span>.match(<span class="hljs-regexp">/a+b/</span>);      <span class="hljs-comment">//=&gt;[ 'aaab', index: 0, input: 'aaab', groups: undefined ]</span></code></pre><h4 id="5-选择，分组，引用"><a href="#5-选择，分组，引用" class="headerlink" title="5.选择，分组，引用"></a>5.选择，分组，引用</h4><table><thead><tr><th align="center">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">|</td><td align="left">选择</td></tr><tr><td align="center">(…)</td><td align="left">组合，该单元格可以用过“*”，“+”，“？”，“|”等符号来修饰，并且会记住该条件所匹配的字符串，以便后续调用；可以使用\n引用</td></tr><tr><td align="center">(?:…)</td><td align="left">只组合，不会记忆字符串；无法用\n引用</td></tr><tr><td align="center">\n</td><td align="left">(n是数字)，和第n个分组第一次匹配的字符串相匹配，索引从左到右</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">'\"fakacnfma\''</span>.match(<span class="hljs-regexp">/(['"])[^'"]*\1/</span>);   <span class="hljs-comment">//=&gt;null</span><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">'\"fakacnfma\''</span>.match(<span class="hljs-regexp">/(['"])[^'"]*['"]/</span>);   <span class="hljs-comment">//=&gt;[  `"fakacnfma'`,</span><span class="hljs-comment">//      '"',</span><span class="hljs-comment">//      index: 0,</span><span class="hljs-comment">//      input: `"fakacnfma'`,</span><span class="hljs-comment">//      groups: undefined</span><span class="hljs-comment">//  ]</span></code></pre><p>正则表达式不允许在“ ”中有‘ ’，反之亦然。如下实例，匹配到的是里面的‘ ’，而非外面的“ ”</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-string">'\"\'fakacnfma\'\"'</span>.match(<span class="hljs-regexp">/(['"])[^'"]*\1/</span>);<span class="hljs-comment">//=&gt;  [  "'fakacnfma'",    </span><span class="hljs-comment">//       "'",</span><span class="hljs-comment">//       index: 1,</span><span class="hljs-comment">//       input: `"'fakacnfma'"`,</span><span class="hljs-comment">//       groups: undefined</span><span class="hljs-comment">//     ]</span></code></pre><p>不允许在字符类中使用\n的引用。如下实例是错误的:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-regexp">/(['"])[^\1]*\1/</span>;</code></pre><h4 id="6-指定匹配位置"><a href="#6-指定匹配位置" class="headerlink" title="6.指定匹配位置"></a>6.指定匹配位置</h4><table><thead><tr><th align="center">字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">^</td><td>字符串的开头，在多行检索中匹配，每行的开头</td></tr><tr><td align="center">$</td><td>字符串的结尾，在多行检索中匹配，每行的结尾</td></tr><tr><td align="center">\b</td><td>匹配单词边界 =&gt; 位于\w和\W之间的位置（*[\b]匹配退格符）</td></tr><tr><td align="center">\B</td><td>匹配非单词边界的位置</td></tr><tr><td align="center">(?=p)</td><td>零宽正向先行断言 =&gt;接下来的字符都和p匹配，但p不会出现在查询结果中</td></tr><tr><td align="center">(?!=p)</td><td>零宽负向先行断言 =&gt;接下来的字符不和p匹配</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> c=<span class="hljs-regexp">/^JavaScript$/</span>;      <span class="hljs-comment">//纯JavaScript字符串</span><span class="hljs-keyword">var</span> txt5=<span class="hljs-string">'javascript JavaScript: Is A LANGUAGE'</span>.match(<span class="hljs-regexp">/[Jj]ava([Ss]cript)?(?=\:)/</span>);  <span class="hljs-comment">//先行正向断言,javascript后须带有‘：’，但‘：’不会被匹配到结果中</span><span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     'JavaScript',</span><span class="hljs-comment">//     'Script',</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: 'JavaScript: Is A LANGUAGE',</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><h4 id="7-修饰符"><a href="#7-修饰符" class="headerlink" title="7.修饰符"></a>7.修饰符</h4><table><thead><tr><th align="center">字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">i</td><td>不区分大小写</td></tr><tr><td align="center">g</td><td>全局匹配，找出所以匹配的项，输入一个数组中</td></tr><tr><td align="center">m</td><td>多行匹配模式，主要针对‘^’和’$’</td></tr></tbody></table><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">"java12das45"</span>.match(<span class="hljs-regexp">/[a-z]+(\d+)/g</span>);  <span class="hljs-comment">//=&gt;[ 'java12', 'das45' ]</span><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">"java12das45"</span>.match(<span class="hljs-regexp">/[a-z]+(\d+)/</span>);   <span class="hljs-comment">//=&gt;[ 'java12', '12', index: 0, input: 'java12das45', groups: undefined ]</span></code></pre><h2 id="3-可使用匹配模式的String方法"><a href="#3-可使用匹配模式的String方法" class="headerlink" title="3.可使用匹配模式的String方法"></a>3.可使用匹配模式的String方法</h2><h4 id="1-search"><a href="#1-search" class="headerlink" title="1.search"></a>1.search</h4><p>查询<code>string.search(x)</code>返回匹配字串的第一个字符的位置。该方法不支持全局检索，会忽略修饰符g，及无法返回数组</p><p>如果找不到匹配的字串会返回-1</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt2=<span class="hljs-string">"132java12das45"</span>.search(<span class="hljs-regexp">/[a-z]+(\d+)/g</span>);  <span class="hljs-comment">//=&gt;3</span></code></pre><h4 id="2-replace"><a href="#2-replace" class="headerlink" title="2.replace"></a>2.replace</h4><p>执行检索与替换操作<code>string.replace(x,y)第一个参数可以是 正则表达式 或 字符串，第二个参数可以是 进行替换的字符串 或 函数</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt5=<span class="hljs-string">'javascript  javaScript: Is A LANGUAGE'</span>.replace(<span class="hljs-regexp">/javascript/ig</span>,<span class="hljs-string">"JavaScript"</span>); <span class="hljs-comment">//=&gt;JavaScript JavaScript: Is A LANGUAGE</span></code></pre><p>在replace中，第二个参数可以是正则表达式‘(’，‘)’中匹配的内容，使用‘$’，。具体用法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> quote = <span class="hljs-regexp">/"([^"]*)"/g</span>;<span class="hljs-keyword">var</span> txt = <span class="hljs-string">'"fdajfoa"ckajc"fdadasd"231"da34fav"'</span>.replace(quote,<span class="hljs-string">"“$1”"</span>);<span class="hljs-comment">//=&gt; “fdajfoa”ckajc“fdadasd”231“da34fav”  将所有的英文的 ""，替换成中文的 “”</span></code></pre><h4 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h4><p><code>match(x)</code>返回一个数组</p><p>match返回数组的三种情况</p><pre><code class="hljs javascript"><span class="hljs-comment">//没有修饰词g,没有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">"aaab"</span>.match(<span class="hljs-regexp">/a+b/</span>);      <span class="hljs-comment">//=&gt;[ 'aaab', index: 0, input: 'aaab', groups: undefined ]</span><span class="hljs-comment">//有修饰词g有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">'fdajfoackajcfdadasd231da34fav'</span>.match(<span class="hljs-regexp">/f(d)a/g</span>)    <span class="hljs-comment">//=&gt;[ 'fda', 'fda' ]</span><span class="hljs-comment">//没有g有括号</span><span class="hljs-keyword">var</span> kat = <span class="hljs-string">'fdajfoackajcfdadasd231da34fav'</span>.match(<span class="hljs-regexp">/f(d)a/</span>)    <span class="hljs-comment">//a[n],存放的是$n的内容</span><span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     'fda',</span><span class="hljs-comment">//     'd',</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: 'fdajfoackajcfdadasd231da34fav',</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><h4 id="4-split"><a href="#4-split" class="headerlink" title="4.split"></a>4.split</h4><p><code>split(x)</code>将一个字符串拆分成数组，分隔符为split的参数</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> kat = <span class="hljs-string">"1, 2, 3, 4, 5"</span>.split(<span class="hljs-regexp">/\s*,\s*/</span>);  <span class="hljs-comment">//=&gt;[1,2,3,4,5]   允许两边留任意多的空格符</span></code></pre><h2 id="4-RegExp对象"><a href="#4-RegExp对象" class="headerlink" title="4.RegExp对象"></a>4.RegExp对象</h2><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a= <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"f(d)a"</span>,<span class="hljs-string">"g"</span>);</code></pre><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h4><table><thead><tr><th align="center">属性</th><th>含义</th></tr></thead><tbody><tr><td align="center">source</td><td>可读字符串，包含正则表达式文本</td></tr><tr><td align="center">globa</td><td>布尔值，是否带修饰符g</td></tr><tr><td align="center">ignoreCase</td><td>布尔值，是否带修饰符i</td></tr><tr><td align="center">multiline</td><td>布尔值，是否带修饰符m</td></tr><tr><td align="center">lastIndex</td><td>可读写整数，读取的最后字符的下一位(对新字串进行检索，必须将lastIndex置0，否则会出错)</td></tr></tbody></table><h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h4><p><code>RegExp.exce()对指定的字符串执行一个正则表达式</code>，类似于<code>string.match()</code>,但是g修饰符对他不起作用</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a= <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"f(d)a"</span>,<span class="hljs-string">"g"</span>);a.exec(<span class="hljs-string">'fdajfoackajcfdadasd231da34fav'</span>)  <span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     'fda',</span><span class="hljs-comment">//     'd',</span><span class="hljs-comment">//     index: 0,</span><span class="hljs-comment">//     input: 'fdajfoackajcfdadasd231da34fav',</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre><p><code>RegExp.test()只返回true/false</code></p><p><code>test()和exce()方法，都会修改lastIndex的值</code>当最后一次检索失败时，要手动将<code>lastIndex</code>的值置0，否则下一次检索将不会从字符串的起始位置开始。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> b= <span class="hljs-regexp">/[a-z]+(\d+)/g</span>;     <span class="hljs-comment">//前面是小写字母，后面是数字</span><span class="hljs-keyword">var</span> c=<span class="hljs-regexp">/^JavaScript$/</span>;      <span class="hljs-comment">//纯JavaScript字符串</span><span class="hljs-keyword">var</span> d=<span class="hljs-regexp">/Java(?!Script)([A-Z]\w*)/</span>;      <span class="hljs-comment">//Java后面不是" Script",而是以大写字母开头的字符串</span><span class="hljs-keyword">var</span> e=<span class="hljs-regexp">/[Jj]ava([Ss]cript)?(?=\:)/</span>;    <span class="hljs-comment">//先行正向断言 </span><span class="hljs-keyword">var</span> g=<span class="hljs-regexp">/(\w+)\:\/\/([\w.]+)\/(\S*)/</span>;    <span class="hljs-comment">//解析一个url </span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This Blog http://ymmltp.github.com/test.html'</span>);<span class="hljs-comment">//=&gt;[</span><span class="hljs-comment">//     'http://ymmltp.github.com/test.html',</span><span class="hljs-comment">//     'http',</span><span class="hljs-comment">//     'ymmltp.github.com',</span><span class="hljs-comment">//     'test.html',</span><span class="hljs-comment">//    index: 10,</span><span class="hljs-comment">//     input: 'This Blog http://ymmltp.github.com/test.html',</span><span class="hljs-comment">//     groups: undefined</span><span class="hljs-comment">//   ]</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>学无止境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019杂记</title>
    <link href="/2019/12/01/2019/"/>
    <url>/2019/12/01/2019/</url>
    
    <content type="html"><![CDATA[<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p>第一次写blog</p><p>提笔不知道说点什么，今天天气不甚好，正在听一首《空心》。       </p><p>今年想把《三体》看完，但是实在无趣，苏云龙说，他是看了《三体》才去学物理的，但……行吧，我不行。<br>NoNo现在在睡觉，我的音乐声有点大，不知道它睡不睡得着。这猫，哪都好，就是总是半夜醒，然后在你脸上蹦迪，着实烦人。</p><p>啊，对了，NoNo是我的猫，他是一只不纯的小白猫，因为我们要养一只叫诺贝尔的猫。但是，太羞耻了，别人随便说说的话，你竟然记这么久，所以就先叫他NoNo吧！</p><p>今年有很多想学的，js,html,css,mysql……但是这些真不是说想学就能会的。一年下来也只能说有点眉目了，真的，只有学习这个事，你会越学越觉得自己不会。</p><p>师傅第一次让我写网页，我真啥都不懂，本来就不是计算机相关专业的，只学过一点C和VB。咋办呢，百度啊，还别说，这时候百度还真是个好东西。然后知道了<a href="https://www.bootcss.com/" target="_blank" rel="noopener">bootstrap</a>，知道了网页有Webform架构MVC架构。说白了就是划分网页各个功能块的方式不一样（反正，从我知道的那点皮毛来看就是这样），然后搭配各自不同的代码。第一次写网页，花了两个月多，写出来的东西还没人用。算了我认了，全当入门练手。但是通过这个经历，我知道了，一个网页一般需要前端（html,css,js）和后台来共同完成。这时候我觉得自己老牛逼了，感觉自己就已经会写网页了（膨胀.jpg）</p><p>然后第二次写网页，搭框架倒是很快了，但是需要写一个很特殊的table，它左侧th和顶部th不随滑动而动，只有body部分受到scroll的控制。讲真，光这个我就搞了一个月，后来还是搞出来了，下次还是把代码也写进来好了。这时候 我才发现，我真的只是懂个皮毛（fp，你连皮毛都不懂，就是入个门！）</p><p>通过这个，我又知道了<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js</a>；Angela这些js框架，之前有听同学提过，但是没太懂。于是我又想去了解一下这几个js架构（目前还没有空尝试），还有<u>CSS3写的动态属性</u>，所以就是越学越觉得需要学的东西越多。果然说，学无止境是对的。</p><p>今年，苏同学还让我写一个关于球状闪电的论文（压根不知道怎么写论文的人👈），还没开始动手。</p><p>明年还是想学好网页和mysql，python(和其他语言比起来，这个真的好上手，想回家给我侄子科普一下。)</p><p>想在明后年能涨薪到8000吧，感觉有点难。没事，先立个小目标。</p>]]></content>
    
    
    
    <tags>
      
      <tag>七上八下</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test blog</title>
    <link href="/2019/11/21/test-blog/"/>
    <url>/2019/11/21/test-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog"></a>My first blog</h1><h2 id="welcome-to-my-bloy"><a href="#welcome-to-my-bloy" class="headerlink" title="welcome to my bloy"></a>welcome to my bloy</h2><pre><code class="hljs c"><span class="hljs-built_in">print</span>(<span class="hljs-string">"hello world!"</span>)</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
